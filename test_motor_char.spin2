'' =================================================================================================
''
''   File....... test_motor_char.spin2
''   Purpose.... Characterize a new motor at given voltage
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Feb 2022
''   Updated.... 9 Feb 2022
''
'' =================================================================================================

CON { timing }

  CLK_FREQ = 270_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock

CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

CON { application io pins }

    ' describe where things are attached to our JonnyMac eval board

    NUM_PAD_SW1     = 32
    NUM_PAD_SW2     = 33
    NUM_PAD_SW3     = 34
    NUM_PAD_SW4     = 35

    JOYSTICK_SW     = 40    ' grn
    JOYSTICK_Y_AXIS = 41    ' yel
    JOYSTICK_X_AXIS = 42    ' org

    HDMI_BASE_PIN       = tvDebug.PINS_P8_P15

    MOTOR_BASE_PIN       = user.ONLY_MOTOR_BASE

OBJ { our Motor(s) }

    user        :   "isp_bldc_motor_userconfig"     ' driver configuration
    tvDebug     :   "isp_hdmi_debug"         ' HDMI debug object
    wheel       :   "isp_bldc_motor"        ' the single BLDC motor

DAT { run-time condition vars }

    bUseHDMI    LONG   TRUE       ' set to TRUE to enable HDMI use/output

    hall        LONG    0
    h           LONG    0
    j           LONG    0
    k           LONG    0
    fault       LONG    false

PUB main() | nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars, motorCog, senseCog, basePin, voltage, motor, limitValue, stepSize, stopVal, bNextLoop, passNbr, bDidFail
'' DEMO Driving a single wheeled platform

    ' start our HDMI debug output
    if bUseHDMI
        basePin := tvDebug.validBasePinForChoice(HDMI_BASE_PIN)
        if basePin <> tvDebug.INVALID_PIN_BASE
            tvDebug.start(basePin)


    ' validate user settings/choicess
    '  do NOT start motor unless all are legit!
    basePin := wheel.validBasePinForChoice(MOTOR_BASE_PIN)
    voltage := wheel.validVoltageForChoice(user.DRIVE_VOLTAGE)
    motor := wheel.validMotorForChoice(user.MOTOR_TYPE)

    if basePin <> wheel.INVALID_PIN_BASE and voltage <> wheel.INVALID_VOLTAGE and motor <> wheel.INVALID_MOTOR
        ' start our single motor driver
        motorCog := wheel.start(basePin, voltage)
        'tvDebug.reportMotorCog(motorCog)

        ' for single motor let's start the single motor sense task
        senseCog := wheel.startSenseCog()

        if bUseHDMI
            nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars := wheel.getDebugData()
            debug("* Received: ", udec(nGroups), uhex_long(pGroupTitles), uhex_long(pGroupNames), uhex_long(pGroupVarCts), uhex_long(pGroupVars))

            tvDebug.registerDisplay(nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars)

        wheel.setMaxSpeed(100)  ' override 75% with 100% for these tests

        ' couple of loops:
        '  find 100_000_000 limit [100_000_000 to 900_000_000 step 100_000_000] -> result100s
        '  find 10_000_000 limit [result100s - (10_000_000 * 10) to result100s step 10_000_000] -> result10s
        '  find 1_000_000 limit [result10s - (1_000_000 * 10) to result10s step 1_000_000] -> result1s
        '  find 500_000 limit [result1s - (500_000 * 10) to result1s step 500_000] -> result
        passNbr := 1
        stepSize := 100_000_000
        stopVal := 900_000_000
        limitValue := 100_000_000
        repeat
            repeat 10
                ' set new limit the drive to it or until fault
                bNextLoop := FALSE
                wheel.testSetLimit(limitValue)
                debug("* START pass(", udec_(passNbr), ") curr: ", udec_(limitValue), ", stop: ", udec_(stopVal), ", step: ", udec_(stepSize))
                driveForwardToFail()
                bDidFail := reportEndCondition()
                if not bDidFail
                    ' setup for next value in this loop
                    if limitValue == stopVal
                        bNextLoop := TRUE
                    else
                        limitValue += stepSize
                else
                    bNextLoop := TRUE

                if bNextLoop
                    debug(" --- ")
                    ' setup for next inner loop
                    if stepSize > 1_000_000
                        stepSize := stepSize / 10
                    elseif stepSize > 500_000
                        stepSize := stepSize / 2
                    else
                        ' where done!
                        quit
                    limitValue := limitValue - (stepSize * 10)
                    stopVal := limitValue + (stepSize * 10)

                passNbr++

                waitms(30000)   ' 30 seconds...

            if stepSize == 500_000
                quit

            waitms(30000)   ' 30 seconds...


        debug("* END TEST: holding for 30 secs...")
        waitms(30000)   ' 30 seconds, then stop

        ' TBA  let's add a drive loop

        ' turn off our motor drivers
        wheel.stop()

VAR
    ' work values
    LONG    minX
    LONG    minY
    LONG    maxX
    LONG    maxY

DAT

passCt    LONG    0


PRI reportEndCondition() : bDidFail | endMaxRPM, endMaxTICs
    ' just finished pass which ended in NOT fault or fault
    ' report max RPM and max Tics
    ' report fault or not
    {
    maxRPM := maxTICs := 0
    bDidFail := FALSE
    passCt++
    if passCt > 5
        bDidFail := ((getrnd() & $00400000) <> 0) ? TRUE : FALSE
        if bDidFail
            passCt := 0
    '}
    endMaxRPM, endMaxTICs, bDidFail := wheel.testGetResults()
    debug("* RPT: ", udec(endMaxRPM), udec(endMaxTICs), sdec(bDidFail))

PRI driveForwardToFail() | bDidFail


    'waitms(125)
    'return  ' do nothing for now

    bDidFail := waitUntilMotorReady()
    if not bDidFail
        ' now drive!
        wheel.stopAfterTime(15, wheel.DTU_SEC)      ' set to hold at speed for 15 Sec
        wheel.driveAtPower(100)                      ' now go FWD at 100% pwr

        waitUntilMotorDone()


PRI driveReverseToFail() | bDidFail

    bDidFail := waitUntilMotorReady()
    if not bDidFail
        ' now drive!
        wheel.stopAfterTime(15, wheel.DTU_SEC)      ' set to hold at speed for 15 Sec
        wheel.driveAtPower(-100)                      ' now go FWD at 100% pwr

        waitUntilMotorDone()


PRI waitUntilMotorReady() : bDidFail
    bDidFail := FALSE
    if wheel.isReady() == false
        debug("* wait motor ready...")
        repeat
            _, _, bDidFail := wheel.testGetResults()
            if wheel.isReady()
                quit
            elseif bDidFail
                debug("* Ready? FAULT!")
                quit
            else
                waitms(2)

    if not bDidFail
        debug("* Motor ready, let's drive!")


PRI waitUntilMotorDone() : bDidFail
    bDidFail := FALSE
    if wheel.isStarting() == false
         debug("* wait until motor starts...")
         repeat
            _, _, bDidFail := wheel.testGetResults()
            if wheel.isStarting()
                quit
            elseif bDidFail
                debug("* Done? FAULT!")
                quit
            else
                waitms(2)

    if not bDidFail and wheel.isStopped() == false
        debug("* wait until motor finishes...")
        repeat
            _, _, bDidFail := wheel.testGetResults()
            if wheel.isStopped()
                quit
            elseif bDidFail
                debug("* Done? FAULT!")
                quit
            else
                waitms(2)

    if not bDidFail
        debug("* Motor stopped!")

CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
