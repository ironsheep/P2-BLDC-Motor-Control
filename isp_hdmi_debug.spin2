'' =================================================================================================
''
''   File....... isp_hdmi_debug.spin2
''   Purpose.... Object debug out via HDMI Eval Board
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Feb 2022
''   Updated.... 26 Feb 2022
''
'' =================================================================================================
CON { forward our interface constants }

    HDMI_BASE_PIN = 0

    STACK_SIZE_LONGS = 64

    ' terminal colors
    #0, TC_BLACK, TC_BLUE, TC_GREEN, TC_CYAN, TC_RED, TC_MAGENTA, TC_ORANGE, TC_WHITE
    ' terminal brightness
    TC_BRIGHT = 8
    TC_YELLOW = TC_BRIGHT | TC_ORANGE
    TC_GRAY = TC_BRIGHT | TC_BLACK

OBJ { included objects }

    hdmi    :   "hng034rm"  ' our HDMI driver (HDMI Eval Adapter)

DAT { debug display data }

    hdmiCog long    0
    taskStack       long    0[STACK_SIZE_LONGS]



PUB start() : ok

    ok := hdmiCog := cogspin(NEWCOG, taskShowDebug(), @taskStack) + 1

DAT { TASK: DEBUG w/Vars }

    modeIdx         long    0
    'displayModes    long   576, 592,  640, 656, 672, 704, 736, 896, 0
    '
    '                        56   50   100  128
    '                       496  480   480  576
    displayModes    long    592, 656, 672, 736, 0

    currMode        long    0
    ccc             long    0
    cpl             long    0
    buf_ptr         long    0
    buflen          long    0
    lines           long    0
    x               long    0
    y               long    0
    fg              long    0
    bg              long    0
    ctr             long    0

    colorText       byte    "color-"
    nbrAscii        byte    "0"
                    byte    0   ' terminator
    hzBarsText       byte    "---------|",0

PRI taskShowDebug()

    hdmi.start(512+64+48, HDMI_BASE_PIN)
    hdmi.setfontfamily(0)
    hdmi.waitvbl(100)
    hdmi.outtextxycg(0,0,hdmi.inttostr(long[0]),11,1)
    hdmi.waitvbl(200)

    'currMode := 672
    currMode := 736
    hdmi.setfontfamily(4)
    hdmi.setmode(currMode)   ' 100 x

    hdmi.cls(0,0)   ' ? 1 ? -> cls(fg,bg)

    cpl := hdmi.getCharPerLine()
    lines := hdmi.getNumberLines()

    hdmi.outtextxycg(0,0,string("mode"),  TC_WHITE, TC_BLACK)
    hdmi.outtextxycg(0,16,string("cpl"), TC_BRIGHT | TC_BLACK, TC_BLACK)'
    hdmi.outtextxycg(0,32,string("lines"), TC_BRIGHT | TC_BLACK, TC_BLACK)
    hdmi.outtextxycg(0,48,string("--ctr"), TC_WHITE, TC_GRAY)
    hdmi.outtextxycg(64,0,hdmi.inttostr(currMode), TC_BRIGHT | TC_RED, TC_BLACK)
    hdmi.outtextxycg(64,16,hdmi.inttostr(cpl), TC_BRIGHT | TC_RED, TC_BLACK)
    hdmi.outtextxycg(64,32,hdmi.inttostr(lines), TC_BRIGHT | TC_RED, TC_BLACK)

    x := 0
    y := 64
    fg := 0
    repeat 16
        byte [@nbrAscii] := (fg > 9) ? fg + $41 - 10 : fg + $30
        bg := (fg == 0) ? TC_WHITE : TC_BLACK
        hdmi.outtextxycg(x,y,@colorText,fg,bg)     ' blue
        y += 16
        fg += 1
    ' blue
    ' green
    ' red
    ' violet
    ' orange

    fg := 1
    x := 0
    repeat 12
        hdmi.outtextxycg(x,y,@hzBarsText,fg,bg)     ' blue
        fg += 1
        x += 8*10

    repeat
        ctr++
        'hdmi.waitvbl(40)
        ' cls(fg,bg)
        hdmi.outtextxycg(64,48,hdmi.inttostr(ctr), TC_BRIGHT | TC_RED, TC_BLACK)


{
    repeat ' stop here

    'hdmi.setfontfamily(4)

    modeIdx := 0
    repeat
        currMode := long [@displayModes][modeIdx++]
        if currMode == 0
            quit

        hdmi.setmode(currMode)
        hdmi.waitvbl(10)

        cpl := hdmi.getCharPerLine()
        lines := hdmi.getNumberLines()
        buflen := hdmi.getBufferLength()
        buf_ptr := hdmi.getBufferPtr()

        hdmi.cls(0,0)
        hdmi.outtextxycg(0,0,string("Bmode"),3,0)
        hdmi.outtextxycg(0,16,string("cpl"),3,0)'
        hdmi.outtextxycg(0,32,string("buf_ptr"),3,0)
        hdmi.outtextxycg(0,48,string("buflen"),3,0)
        hdmi.outtextxycg(0,64,string("lines"),3,0)
        hdmi.outtextxycg(64,0,hdmi.inttostr(currMode),2,0)
        hdmi.outtextxycg(64,16,hdmi.inttostr(cpl),2,0)
        hdmi.outtextxycg(64,32,hdmi.inttostr(buf_ptr),2,0)
        hdmi.outtextxycg(64,48,hdmi.inttostr(buflen),2,0)
        hdmi.outtextxycg(64,64,hdmi.inttostr(lines),2,0)
        hdmi.waitvbl(200)

        'repeat  ' only do 1st ieration and stop
}
CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
