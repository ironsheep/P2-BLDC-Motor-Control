'' =================================================================================================
''
''   File....... test_pasm_snips.spin2
''   Purpose.... Demonstrate working snippets of pasm2
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Mar 2022
''   Updated.... 7 Mar 2022
''
'' =================================================================================================

CON { timing }

  CLK_FREQ = 270_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock

CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

OBJ { our Motor(s) }

    user        :   "isp_bldc_motor_userconfig"     ' driver configuration
    'tvDebug :   "isp_hdmi_debug"    ' the single BLDC motor
    'wheel   :   "isp_bldc_motor"    ' the single BLDC motor
    distConv    :   "isp_dist_utils"                ' distance conversion utils

DAT
    tStr            byte    "TRUE",0
    fStr            byte    "false",0
    circInMM_x10    long    0
    tickInMM_x10    long    0


PUB main() | bResult, nLHS, nRHS, pStr, tgtIncr, drvIncr, rampUp, drvState, outDrvState, outDrvIncr, rampDn
'' DEMO Run Snippets

    circInMM_x10 := trunc(distConv.floatCircInMMforDiaInInchFloat(user.MOTOR_DIA_IN_INCH) *. 10.0)
    tickInMM_x10 := circInMM_x10 / 90

    debug("* ", sdec_long(circInMM_x10), sdec_long(tickInMM_x10))

    stopAfterDistance(32, DDU_MM)
    stopAfterDistance(12, DDU_CM)
    stopAfterDistance(15, DDU_IN)
    stopAfterDistance(3, DDU_FT)
    stopAfterDistance(2, DDU_M)
    debug(" ")
    stopAfterRotation(22, DRU_HALL_TICKS)
    stopAfterRotation(45, DRU_DEGREES)
    stopAfterRotation(3, DRU_ROTATIONS)
    debug(" ")
    getDistance(DDU_MM, 6)
    getDistance(DDU_CM, 21)
    getDistance(DDU_IN, 67)
    getDistance(DDU_FT, 159)
    getDistance(DDU_M, 350)
    getDistance(DDU_MI, 565_000)
    getDistance(DDU_KM, 530_000)

{
    debug("* checks for same sign:")
    nLHS := -2
    nRHS := +5
    bResult := isSameSign(nLHS, nRHS)
    showResult(bResult, nLHS, nRHS)
    ' start our HDMI debug output
    nLHS := -60
    nRHS := -85
    bResult := isSameSign(nLHS, nRHS)
    showResult(bResult, nLHS, nRHS)

    nLHS := +1
    nRHS := +7
    bResult := isSameSign(nLHS, nRHS)
    showResult(bResult, nLHS, nRHS)

    nLHS := +1
    nRHS := -8
    bResult := isSameSign(nLHS, nRHS)
    showResult(bResult, nLHS, nRHS)

    debug(" ")
    debug("* checks for LHS is slower when same sign:")
    nLHS := -60
    nRHS := -85  ' larger
    bResult := isLhsSlower(nLHS, nRHS)
    showResult(bResult, nLHS, nRHS)
    ' start our HDMI debug output
    nLHS := -85  ' larger
    nRHS := -60
    bResult := isLhsSlower(nLHS, nRHS)
    showResult(bResult, nLHS, nRHS)

    nLHS := +1
    nRHS := +7  ' larger
    bResult := isLhsSlower(nLHS, nRHS)
    showResult(bResult, nLHS, nRHS)

    nLHS := +8  ' larger
    nRHS := +1
    bResult := isLhsSlower(nLHS, nRHS)
    showResult(bResult, nLHS, nRHS)
'}
{
    debug(" ")
    debug("* ramp up to FWD speed")
    tgtIncr := 20_000
    drvIncr := 0
    rampUp := 3300
    drvState := DCS_SPIN_UP
    repeat
        outDrvState, outDrvIncr := spinUp(tgtIncr, drvIncr, drvState, rampUp)
        showRampResult(tgtIncr, outDrvIncr, drvIncr, outDrvState, rampUp, drvState)
        drvState := outDrvState
        drvIncr := outDrvIncr
    until drvState == DCS_AT_SPEED
    debug("- Worked?  FWD SPIN-UP to AT-SPEED!")

    debug(" ")
    debug("* ramp up to REV speed")
    tgtIncr := -20_000
    drvIncr := 0
    rampUp := 3300
    drvState := DCS_SPIN_UP
    repeat
        outDrvState, outDrvIncr := spinUp(tgtIncr, drvIncr, drvState, rampUp)
        showRampResult(tgtIncr, outDrvIncr, drvIncr, outDrvState, rampUp, drvState)
        drvState := outDrvState
        drvIncr := outDrvIncr
    until drvState == DCS_AT_SPEED
    debug("- Worked?  REV SPIN-UP to AT-SPEED!")

    debug(" ")
    debug("* ramp down from FWD speed")
    tgtIncr := 0
    drvIncr := 20_000
    rampDn := 3300
    drvState := DCS_SPIN_DN
    repeat
        outDrvState, outDrvIncr := spinDn(tgtIncr, drvIncr, drvState, rampDn)
        showRampResult(tgtIncr, outDrvIncr, drvIncr, outDrvState, rampDn, drvState)
        drvState := outDrvState
        drvIncr := outDrvIncr
    until drvState == DCS_STOPPED
    debug("- Worked?  FWD SPIN-DN from AT-SPEED to STOPPED!")

    debug(" ")
    debug("* ramp down from REV speed")
    tgtIncr := 0
    drvIncr := -20_000
    rampDn := 3200
    drvState := DCS_SPIN_DN
    repeat
        outDrvState, outDrvIncr := spinDn(tgtIncr, drvIncr, drvState, rampDn)
        showRampResult(tgtIncr, outDrvIncr, drvIncr, outDrvState, rampDn, drvState)
        drvState := outDrvState
        drvIncr := outDrvIncr
    until drvState == DCS_STOPPED
    debug("- Worked?  REV SPIN-DN from AT-SPEED to STOPPED!")
'}
    debug("* DONE")
    repeat      ' HALT here


PUB getDistance(eDistanceUnits, posTrkHallTicks) : nDistanceInUnits | fMMpTick, fValue
'' Returns the distance in {distanceUnits} [DDU_MM, DDU_CM, DDU_IN, DDU_FT, DDU_M, DDU_KM, DDU_MI] travelled by this motor since last reset
    fMMpTick := float(circInMM_x10) /. 90.0 /. 10.0
    case eDistanceUnits
        DDU_MM:
            nDistanceInUnits := trunc(float(posTrkHallTicks) *. fMMpTick)
        DDU_CM:
            nDistanceInUnits := trunc(float(posTrkHallTicks) *. fMMpTick /. 10.0)
        DDU_IN:
            fValue := distConv.fMm2inFloat(float(posTrkHallTicks) *. fMMpTick)
            nDistanceInUnits := trunc(fValue +. 0.5)    ' rounded
        DDU_FT:
            fValue := distConv.fMm2inFloat(float(posTrkHallTicks) *. fMMpTick)
            nDistanceInUnits := trunc(fValue /. 12.0 +. 0.5)    ' in FT, rounded
        DDU_M:
            fValue := float(posTrkHallTicks) *. fMMpTick
            nDistanceInUnits := trunc(fValue /. 1000.0)    ' in M
        DDU_MI:
            fValue := distConv.fMm2inFloat(float(posTrkHallTicks) *. fMMpTick)
            nDistanceInUnits := trunc(fValue /. 5280.0 /. 12.0)    ' in MI
        DDU_KM:
            fValue := float(posTrkHallTicks) *. fMMpTick
            nDistanceInUnits := trunc(fValue /. 1000.0 /. 1000.0)    ' in kM
        other:
            debug("! ERROR: invalid distanceUnits Value:", udec_long(eDistanceUnits))
            abort
    debug("- getDistance(", sdec_long(eDistanceUnits), sdec_long(posTrkHallTicks), ") ->", sdec_long(nDistanceInUnits))

CON

    ' Driver Distance-Units Enum: (Millimeters, Centimeters, Inches, Feet, Meters, Kilometers, Miles)
    #0, DDU_Unknown, DDU_MM, DDU_CM, DDU_IN, DDU_FT, DDU_M, DDU_KM, DDU_MI

    ' Driver Rotation-Units Enum:
    #0, DRU_Unknown, DRU_HALL_TICKS, DRU_DEGREES, DRU_ROTATIONS

PUB stopAfterRotation(nRotationCount, eRotationUnits) | motorStopHallTicks
'' Stops the motor after it reaches {rotationCount} of {rotationUnits} [DRU_HALL_TICKS, DRU_DEGREES, or DRU_ROTATIONS].
'' USE WITH:  driveAtPower()
'' Will ABORT if {rotationCount} < 1
    if nRotationCount < 1
        debug("! ERROR: invalid RotationCount Value:", udec_long(nRotationCount), " - must be > 0!")
        ' FIXME: UNDONE should be more than ticks needed for spin-up/down ramps!!!
        abort

    ' FIXME: UNDONE convert this to use runtime values based on user specified wheel size ( we assume wheel is 90 tics! )

    ' FIXME: UNDONE remove # ticks for spin-up/down ramps!!!

    ' convert rotation info to ticks (will stop at ticks limit)
    motorStopHallTicks := 0
    case eRotationUnits
        DRU_HALL_TICKS:
            motorStopHallTicks := nRotationCount
        DRU_DEGREES:
            ' ticks = degrees / 4
            motorStopHallTicks := nRotationCount / 4
        DRU_ROTATIONS:
            ' ticks = rotations * 90
            motorStopHallTicks := nRotationCount * 90
        other:
            debug("! ERROR: invalid rotationUnits Value:", udec_long(eRotationUnits))
            abort
    debug("- stopAfterRotation(", sdec_long(nRotationCount), sdec_long(eRotationUnits), ") ->", sdec_long(motorStopHallTicks))

PUB stopAfterDistance(nDistance, eDistanceUnits) | fValue, motorStopHallTicks
'' Stops the motor after either it reaches {distance} specified in {distanceUnits} [DDU_MM, DDU_CM, DDU_IN, DDU_FT, DDU_M].
'' USE WITH:  driveAtPower()
'' Will ABORT if {distance} < 1
    if nDistance < 1
        debug("! ERROR: invalid Distance Value:", udec_long(nDistance), " - must be > 0!")
        ' FIXME: UNDONE should be more than ticks needed for spin-up/down ramps!!!
        abort

    ' FIXME: UNDONE convert this to use runtime values based on user specified wheel size ( we assume wheel is 90 tics! )

    ' FIXME: UNDONE remove time needed for spin-up/down ramps!!!


    tickInMM_x10 := circInMM_x10 / 90
    ' convert distance to ticks (will stop at ticks limit)
    case eDistanceUnits
        DDU_MM:
            motorStopHallTicks := (nDistance * 10) / tickInMM_x10
        DDU_CM:
            motorStopHallTicks := (nDistance * 10 * 10) / tickInMM_x10
        DDU_IN:
            fValue := distConv.fIn2mm(nDistance)
            motorStopHallTicks := trunc(fValue *. 10.0) / tickInMM_x10
        DDU_FT:
            fValue := distConv.fIn2mm(nDistance * 12)
            motorStopHallTicks := trunc(fValue *. 10.0) / tickInMM_x10
        DDU_M:
            motorStopHallTicks := (nDistance * 100 * 10) / tickInMM_x10
        other:
            debug("! ERROR: invalid distanceUnits Stop Value:", udec_long(eDistanceUnits))
            abort

    debug("- stopAfterDistance(", sdec_long(nDistance), sdec_long(eDistanceUnits), ") ->", sdec_long(motorStopHallTicks))

PRI showResult(result, lhs, rhs) | pStr
    pStr := (result) ? @tStr : @fStr
    debug("  - lt=", sdec_long_(lhs), ", rt=", sdec_long_(rhs), " => ", zstr_(pStr))

PRI isSameSign(lhs, rhs) : result
' are LHS and RHS of same sign?
    org
            mov     result, #0
            testb   lhs, #31  wc  ' find dual - signs
            testb   rhs, #31  andc
    if_c    mov     result, #1  wz
            testbn  lhs, #31  wc  ' find dual + signs
            testbn  rhs, #31  andc
    if_c    mov     result, #1
    end
    result := (result == 0) ? false: true

PRI isLhsSlower(lhs, rhs) : result
' is LHS smaller then RHS?
    org
            mov     result, #0
            testb   lhs, #31    wc
    if_c    jmp     #.sloChkNeg
.sloChkPos
            cmps    lhs, rhs    wc
    if_c    mov     result, #1        ' CY=1: lhs is smaller
            jmp     #.sloFinal
.sloChkNeg
            cmps    lhs, rhs    wc
    if_nc   mov     result, #1        ' CY=1: lhs is smaller
.sloFinal
    end

    result := (result == 0) ? false: true

CON

    '  DCS_STOPPED          - motor is stopped
    '  DCS_SPIN_UP          - motor is ramping up to speed, then will be at AT_SPEED
    '  DCS_AT_SPEED         - motor is holding at speed
    '  DCS_SPIN_DN          - motor is stopping, then will be at STOPPED
    '  DCS_SLOWING_DN       - motor is slowing down (just a speed change), then will be at AT_SPEED
    '  DCS_SLOW_TO_CHG      - motor is slowing down to change direction, then will be SPEEDING_UP
    '
    #0, DCS_Unknown, DCS_STOPPED, DCS_SPIN_UP, DCS_AT_SPEED, DCS_SPIN_DN, DCS_SLOWING_DN, DCS_SLOW_TO_CHG

PRI showRampResult(tgtIncre, inDrvIncr, prevDrvIncr, inState, nRampUp, prevState) | pOld, pNew
    if inDrvIncr <> prevDrvIncr
        debug("  drvIncr (", sdec_long_(prevDrvIncr), ") -> (", sdec_long_(inDrvIncr), ")")
    if inState <> prevState
        pOld := stringForDriveState(prevState)
        pNew := stringForDriveState(inState)
        debug("  drvState [", zstr_(pOld), "] -> [", zstr_(pNew), "]")

PRI spinUp(tgtIncre, inDrvIncr, inState, nRampUp) : outState, outIncre
    outState := inState
    outIncre := inDrvIncr
    org
                    ' do next UP adjustment or set at-speed
                testb   tgtIncre, #31               wc  ' Q: moving FWD or REV? (CY=REV)
    if_c        jmp     #.haveRev
                adds    outIncre, nRampUp              ' FWD: increase increment (speeding up)
                cmps    tgtIncre, outIncre          wc  ' Q: Did we exceed target?
                jmp     #.lastTest
    .haveRev
                subs    outIncre, nRampUp              ' REV: decrease increment (speeding up)
                cmps    outIncre, tgtIncre          wc  ' Q: Did we exceed target?
    .lastTest
    if_c        mov     outIncre, tgtIncre              ' yes, reset to target!
                cmps    tgtIncre, outIncre          wz  ' Q: Are we at target? (compare again to handle both cases)
    if_z        mov     outState, #DCS_AT_SPEED       ' yes, show we got here!
    end

PRI spinDn(tgtIncre, inDrvIncr, inState, nRampDn) : outState, outIncre | nZero
    outState := inState
    outIncre := inDrvIncr
    nZero := 0
    'debug("spinDn: ", uhex_long(tgtIncre))

                org
                testb   inDrvIncr, #31               wc  ' Q: moving FWD or REV? (CY=REV)
    if_c        jmp     #.haveRDnRev
                subs    outIncre, nRampDn              ' FWD: decrease increment (slowing down)
                cmps    outIncre, #0                wcz
    if_nc_and_nz jmp    #.lastRDnExit
                jmp     #.lastRDnzero
.haveRDnRev
                adds    outIncre, nRampDn              ' REV: increase increment, toward zero (slowing down)
                cmps    outIncre, #0                wc
    if_c        jmp    #.lastRDnExit
.lastRDnzero
                sub     outIncre, outIncre              ' set to zero
                mov     outState, #DCS_STOPPED        ' report that we are stopped
                ' if we are to freewheel the motor let's float all drive pins
.lastRDnExit
                end

DAT

    strUnk      byte    "Unknown",0
    strBad      byte    "??bad??",0
    strStopped  byte    "STOPPED",0
    strSpinUp   byte    "SPIN_UP",0
    strAtSpeed  byte    "AT_SPEED",0
    strSpinDn   byte    "SPIN_DN",0
    strSlowDn   byte    "SLOWING_DN",0
    strSlow2Chg byte    "SLOW_TO_CHG",0

PRI stringForDriveState(nDrvState) :pInterpStr
    case nDrvState
        DCS_Unknown:
            pInterpStr := @strUnk
        DCS_STOPPED:
            pInterpStr := @strStopped
        DCS_SPIN_UP:
            pInterpStr := @strSpinUp
        DCS_AT_SPEED:
            pInterpStr := @strAtSpeed
        DCS_SPIN_DN:
            pInterpStr := @strSpinDn
        DCS_SLOWING_DN:
            pInterpStr := @strSlowDn
        DCS_SLOW_TO_CHG:
            pInterpStr := @strSlow2Chg
        other:
            pInterpStr := @strBad

CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
