'' =================================================================================================
''
''   File....... demo_single_motor.spin2
''   Purpose.... Demonstrate control of a single BLDC Motor
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Feb 2022
''   Updated.... 9 Feb 2022
''
'' =================================================================================================

CON { timing }

  CLK_FREQ = 270_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock

CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

OBJ { our Motor(s) }

    user    :   "isp_bldc_motor_userconfig"     ' driver configuration
    tvDebug :   "isp_hdmi_debug"    ' the single BLDC motor
    wheel   :   "isp_bldc_motor"    ' the single BLDC motor

PUB main() | nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars, motorCog, senseCog, basePin, voltage
'' DEMO Driving a single wheeled platform

    ' start our HDMI debug output
    tvDebug.start()
    basePin := wheel.validBasePinForChoice(user.ONLY_MOTOR_BASE)
    voltage := wheel.validVoltageForChoice(user.DRIVE_VOLTAGE)

    if basePin <> wheel.INVALID_PIN_BASE and voltage <> wheel.INVALID_VOLTAGE
        ' start our single motor driver
        motorCog := wheel.start(basePin, voltage)
        'tvDebug.reportMotorCog(motorCog)

        ' for single motor let's start the single motor sense task
        senseCog := wheel.startSenseCog()

        nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars := wheel.getDebugData()
        debug("* Received: ", udec(nGroups), uhex_long(pGroupTitles), uhex_long(pGroupNames), uhex_long(pGroupVarCts), uhex_long(pGroupVars))
        'waitms(500)
        'tvDebug.writeMessageToLog(string("Got vars"))
        'waitus(500)

        tvDebug.registerDisplay(nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars)
        'waitms(500)
        'tvDebug.writeMessageToLog(string("Sent vars"))
        'waitms(500)
'{ - testing NEW Control Method -
        ' ensure motor is ready be commanded
        waitUntilMotorReady()

        ' now drive!
        wheel.driveAtPower(50)                  ' FWD at 30% pwr
        wheel.stopAfterTime(15, wheel.DTU_SEC)  ' hold at speed for 15 Sec

        waitUntilMotorDone()

        wheel.driveAtPower(-50)                 ' REV at 30% pwr
        wheel.stopAfterTime(15, wheel.DTU_SEC)  ' hold at speed for 15 Sec

        waitUntilMotorDone()
'}
       ' just run the Chip's go() for now

        '   single motor debug apps
        'wheel.TestMotorRampUpHoldDn()          ' basic test

        ' FOR CHARACTERIZATION
        'wheel.findFaultAtVoltage()              ' find extremes
        ' FOR CHARACTERIZATION

        ' SPECIAL for hardware failure diagnosis
        'wheel.testMotorNoFault()               ' hold at speed no break on fault - to use scope
        ' SPECIAL for hardware failure diagnosis

        ' TBA  let's add a drive loop

        ' turn off our motor drivers
        wheel.stop()

PRI waitUntilMotorReady()
    if wheel.isReady() == false
        debug("* wait motor ready...")
        repeat
            if wheel.isReady()
                quit
            else
                waitms(2)
        debug("* Motor ready, let's drive!")


PRI waitUntilMotorDone()
    if wheel.isStopped() == false
        debug("* wait until motor finishes...")
        repeat
            if wheel.isStopped()
                quit
            else
                waitms(2)
        debug("* Motor finished!")

CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
