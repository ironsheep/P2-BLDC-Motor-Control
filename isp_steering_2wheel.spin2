'' =================================================================================================
''
''   File....... isp_steering_2wheel.spin2
''   Purpose.... Object providing control interface for stearing a twin-bldc-motor platform
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Feb 2022
''   Updated.... 9 Feb 2022
''
'' =================================================================================================
CON { forward our interface constants }

  ' board connection Enum
    PINS_P0_P15     = ltWheel.PINS_P0_P15
    PINS_P16_P31    = ltWheel.PINS_P16_P31
    PINS_P32_P47    = ltWheel.PINS_P32_P47

    ' Driver Supported Voltages Enum
    '  Lipo battery sizes: 2s-7.4v, 3s-11.1v, 4s-14.8v, 5s-18.5v, 6s-22.2v, 7s-25.9v
    PWR_6V      = ltWheel.PWR_6V
    PWR_7p4V    = ltWheel.PWR_7p4V
    PWR_11p1V   = ltWheel.PWR_11p1V
    PWR_12V     = ltWheel.PWR_12V
    PWR_14p8V   = ltWheel.PWR_14p8V
    PWR_18p5V   = ltWheel.PWR_18p5V
    PWR_22p2V   = ltWheel.PWR_22p2V
    PWR_24V     = ltWheel.PWR_24V

  ' Driver Distance-Units Enum
    DDU_Unknown     = ltWheel.DDU_Unknown
    DDU_IN          = ltWheel.DDU_IN
    DDU_MM          = ltWheel.DDU_MM
    DDU_CM          = ltWheel.DDU_CM
    DDU_FT          = ltWheel.DDU_FT
    DDU_M           = ltWheel.DDU_M

  ' Driver Rotation-Units Enum
    DRU_Unknown     = ltWheel.DRU_Unknown
    DRU_DEGREES     = ltWheel.DRU_DEGREES
    DRU_ROTATIONS   = ltWheel.DRU_ROTATIONS
    DRU_HALL_TICKS  = ltWheel.DRU_HALL_TICKS

  ' Driver Time-Unit Enum
    DTU_Unknown     = ltWheel.DTU_Unknown
    DTU_MILLISEC    = ltWheel.DTU_MILLISEC
    DTU_SEC         = ltWheel.DTU_SEC

  ' Driver Status Enum
    DS_Unknown      = ltWheel.DS_Unknown
    DS_MOVING       = ltWheel.DS_MOVING
    DS_HOLDING      = ltWheel.DS_HOLDING
    DS_OFF          = ltWheel.DS_OFF

CON { test pins for LA measurement }

    ' PIN_56 - PIN_63
    TEST_BASE_PIN = 56
    TEST_ALL_PINS = TEST_BASE_PIN addpins 7
    TEST_PIN_SNS_LOOP = TEST_BASE_PIN + 0       ' LA grey
    TEST_PIN_SNS_LP_ACTV = TEST_BASE_PIN + 1       ' LA red


OBJ { our Motors }

    ltWheel     :   "isp_bldc_motor"    ' left wheel drive
    rtWheel     :   "isp_bldc_motor"    ' right wheel drive
    user        :   "isp_bldc_motor_userconfig"     ' driver configuration
    distConv    :   "isp_dist_utils"                ' distance conversion utils


PUB null()

'' This is not a top-level object

PUB start(leftBasePin, rightBasePin, driveVoltage) : ok
'' Start our drive cogs connected to our left and right motor control pin-sets
    ticks1ms   := (clkfreq / 1_000)
    ticks1us   := (clkfreq / 1_000_000)
    ticks125ms := ticks1ms * 125

    circInMM_x10 := distConv.circInMMforDiaInInchFloat(user.MOTOR_DIA_IN_INCH)
    tickInMM_x10 := circInMM_x10 / 90


    if clkfreq <> 270_000_000
        debug("!! ERROR bad CLOCK value")
        repeat ' halt here

    ltWheel.start(leftBasePin, driveVoltage)
    rtWheel.start(rightBasePin, driveVoltage)
    rtWheel.forwardIsReverse()

    ok := senseCog := cogspin(NEWCOG, taskPostionSense(), @taskStack) + 1
    if senseCog == 0    ' did fail?
        debug("!! ERROR filed to start Position Sense task")

PUB stop()
'' Stop our left/right drive and Sense cogs and release allocated pins
    if senseCog     ' stop motor reads
        cogstop(senseCog - 1)
        senseCog := 0

    ltWheel.stop()
    rtWheel.stop()

PUB setAcceleration(rate)
'' Limit Acceleration to {rate}
    ltWheel.setAcceleration(rate)
    rtWheel.setAcceleration(rate)

PUB setMaxSpeed(speed)
'' 	Limit top-speed to {speed}
    ltWheel.setMaxSpeed(speed)
    rtWheel.setMaxSpeed(speed)

PUB setMaxSpeedForDistance(speed)
'' Limit top-speed of driveDistance() operations to {speed}
    ltWheel.setMaxSpeedForDistance(speed)
    rtWheel.setMaxSpeedForDistance(speed)

PUB calibrate()
'' have motor drivers determine fixed-offset constants
    ltWheel.calibrate()
    rtWheel.calibrate()

PUB holdAtStop(bEnable)
'' Informs the motor drivers to actively hold postiion (bEnable=true) or coast (bEnable=false) at end of motion
    ltWheel.holdAtStop(bEnable)
    rtWheel.holdAtStop(bEnable)

PUB resetTracking()
'' Resets the position tracking values returned by getDistance() and getRotations()
''  Effectively: use current postion as home from now on
    ltWheel.resetTracking()
    rtWheel.resetTracking()

CON { --- Subsystem Control --- }

PUB driveDirection(power, direction) | ltPower, rtPower
'' Control the speed and direction of your robot using the {power} and {direction} inputs.
'' Turns both motors on at {power, [(-100) to 100]} but adjusted by {direction, [(-100) to 100]}.
'' AFFECTED BY: setAcceleration(), setMaxSpeed(), holdAtStop()
    ' calculate effective power based on direction
    ltPower, rtPower := calcPowerForDirection(power, direction)

    ' now tell our motor of their own power
    ltWheel.driveAtPower(ltPower)
    rtWheel.driveAtPower(rtPower)

PUB driveForDistance(leftDistance, rightDistance, eDistanceUnits)
'' Control the forward direction or rate of turn of your robot using the {leftDistance} and {rightDistance} inputs.
'' Turn both motors on then turn them off again when either reaches the specified distance {leftDistance} or
''  {rightDistance}, where {*distance} is in {distanceUnits} [DDU_IN, DDU_FT, DDU_CM, or DDU_M].
'' AFFECTED BY: setAcceleration(), setMaxSpeedForDistance(), holdAtStop()
    ltWheel.driveForDistance(leftDistance, eDistanceUnits)
    rtWheel.driveForDistance(rightDistance, eDistanceUnits)

PUB driveAtPower(leftPower, rightPower)
'' Control the speed and direction of your robot using the {leftPower} and {rightPower} inputs.
'' Turns left motor on at {leftPower} and right at {rightPower}. Where {*Power} are in the range [(-100) to 100].
'' AFFECTED BY: setAcceleration(), setMaxSpeed(), holdAtStop()
    ltWheel.driveAtPower(leftPower)
    rtWheel.driveAtPower(rightPower)

PUB stopAfterRotation(nRotationCount, eRotationUnits)
'' Stops both motors, after either of the motors reaches {rotationCount} of {rotationUnits} [DRU_HALL_TICKS, DRU_DEGREES, or DRU_ROTATIONS].
'' USE WITH: driveDirection(), drive()
'' USE WITH:  driveAtPower()
'' Will ABORT if {rotationCount} < 1
    if nRotationCount < 1
        debug("! ERROR: invalid RotationCount Value:", udec_long(nRotationCount), " - must be > 0!")
        ' FIXME: UNDONE should be more than ticks needed for spin-up/down ramps!!!
        abort

    ' FIXME: UNDONE convert this to use runtime values based on user specified wheel size ( we assume wheel is 90 tics! )

    ' FIXME: UNDONE remove # ticks for spin-up/down ramps!!!

    ' convert rotation info to ticks (will stop at ticks limit)
    motorStopHallTicks := 0
    case eRotationUnits
        DRU_HALL_TICKS:
            motorStopHallTicks := nRotationCount
        DRU_DEGREES:
            ' ticks = degrees / 4
            motorStopHallTicks := nRotationCount / 4
        DRU_ROTATIONS:
            ' ticks = rotations * 90
            motorStopHallTicks := nRotationCount * 90
        other:
            debug("! ERROR: invalid rotationUnits Value:", udec_long(eRotationUnits))
            abort

'' Stops both motors, after either of the motors reaches {distance} specified in {distanceUnits} [DDU_IN or DDU_MM].
'' USE WITH: driveDirection(), drive()
PUB stopAfterDistance(nDistance, eDistanceUnits) | fValue
'' Stops the motors after one of them reaches {distance} specified in {distanceUnits} [DDU_MM, DDU_CM, DDU_IN, DDU_FT, DDU_M].
'' USE WITH:  driveAtPower()
'' Will ABORT if {distance} < 1
    if nDistance < 1
        debug("! ERROR: invalid Distance Value:", udec_long(nDistance), " - must be > 0!")
        ' FIXME: UNDONE should be more than ticks needed for spin-up/down ramps!!!
        abort

    ' FIXME: UNDONE convert this to use runtime values based on user specified wheel size ( we assume wheel is 90 tics! )

    ' FIXME: UNDONE remove time needed for spin-up/down ramps!!!

    ' convert distance to ticks (will stop at ticks limit)
    case eDistanceUnits
        DDU_MM:
            motorStopHallTicks := (nDistance * 10) / tickInMM_x10
        DDU_CM:
            motorStopHallTicks := (nDistance * 10 * 10) / tickInMM_x10
        DDU_IN:
            fValue := distConv.fIn2mm(nDistance)
            motorStopHallTicks := trunc(fValue *. 10.0) / tickInMM_x10
        DDU_FT:
            fValue := distConv.fIn2mm(nDistance * 12)
            motorStopHallTicks := trunc(fValue *. 10.0) / tickInMM_x10
        DDU_M:
            motorStopHallTicks := (nDistance * 100 * 10) / tickInMM_x10
        other:
            debug("! ERROR: invalid distanceUnits Stop Value:", udec_long(eDistanceUnits))
            abort

'' Stops both motors, after either of the motors reaches {distance} specified in {distanceUnits} [DDU_IN or DDU_MM].
''USE WITH: driveDirection(), drive()
PUB stopAfterTime(nTime, eTimeUnits) | timeNow
'' Stops the motors after {time} specified in {timeUnits} [DTU_MILLISEC or DTU_SEC] has elapsed.
'' USE WITH:  driveAtPower()
'' Will ABORT if {time} < 1
    if nTime < 1
        debug("! ERROR: invalid nTime Value:", udec_long(nTime), " - must be > 0!")
        ' FIXME: UNDONE should be more than time needed for spin-up/down ramps!!!
        abort

    case eTimeUnits
        DTU_MILLISEC:
        DTU_SEC:
        other:
            debug("! ERROR: invalid timeUnits Value:", udec_long(eTimeUnits))
            abort

    ' FIXME: UNDONE remove time needed for spin-up/down ramps!!!

    if eTimeUnits == DTU_SEC
        timeNow := getms()
        motorStopMSecs := timeNow + (nTime * 1_000)
    else
        timeNow := getms()
        motorStopMSecs := timeNow + nTime

    if motorStopMSecs > 0
        debug("* stop motor at ", udec_long(motorStopMSecs), ", now: ", udec_long(timeNow))


PUB stopMotors()
'' Stops both motors, killing any motion that was still in progress
'' AFFECTED BY:holdAtStop()
    ltWheel.stopMotor()
    rtWheel.stopMotor()

PUB emergencyCutoff()
'' EMERGENCY-Stop - Immediately stop both motors, killing any motion that was still in progress
    ltWheel.emergencyCutoff()
    rtWheel.emergencyCutoff()


CON { --- Subsystem Status --- }

PUB getDistance(eDistanceUnits) : leftDistanceInUnits, rightDistanceInUnits
'' Returns the distance in {distanceUnits} [DDU_IN or DDU_MM] travelled by each motor since last reset
    leftDistanceInUnits := ltWheel.getDistance(eDistanceUnits)
    rightDistanceInUnits := rtWheel.getDistance(eDistanceUnits)

PUB getRotationCount(eRotationUnits) : leftRotationCount, rightRotationCount
'' Returns accumulated {*RotationCount} in {rotationUnits} [DRU_DEGREES, DRU_ROTATIONS], since last reset, for each of the motors.
    leftRotationCount := ltWheel.getRotationCount(eRotationUnits)
    rightRotationCount := rtWheel.getRotationCount(eRotationUnits)

PUB getPower() : leftPower, rightPower
'' Returns the last specified power value [-100 thru +100] for each of the motors (will be zero if the motor is stopped).
    leftPower := ltWheel.getPower()
    rightPower := rtWheel.getPower()

PUB getCurrent() : nLtAmps, nLtWatts, nRtAmps, nRtWatts
'' Returns the latest current sense values for each motor
    nLtAmps, nLtWatts := ltWheel.getCurrent()
    nRtAmps, nRtWatts := rtWheel.getCurrent()

PUB getStatus() : eLeftStatus, eRightStatus
'' Returns status of motor drive state for each motor: enumerated constant: DS_MOVING, DS_HOLDING or DS_OFF
    eLeftStatus := ltWheel.getStatus()
    eRightStatus := rtWheel.getStatus()

PUB getMaxSpeed() : nSpeed
'' Returns the last specified {maxSpeed}
    ' NOTE: they both contain same value so return only right-wheel value
    'nSpeed := ltWheel.getMaxSpeed()  ' return last specified user value
    nSpeed := rtWheel.getMaxSpeed()  ' return last specified user value

PUB getMaxSpeedForDistance() : nSpeed4dist
'' Returns the last specified {maxSpeedForDistance}
    ' NOTE: they both contain same value so return only right-wheel value
    'nSpeed4dist := ltWheel.getMaxSpeed()  ' return last specified user value
    nSpeed4dist := rtWheel.getMaxSpeed()  ' return last specified user value

PUB clearEmergency()
'' remove emergency override
' used by wheels*.spin2 methods
    ltWheel.clearEmergency()
    rtWheel.clearEmergency()
    debug("--------clear EMERGENCY--------")

CON { --- PRIVATE Utility Methods --- }

PRI calcPowerForDirection(power, direction) : ltPower, rtPower | bIsLeft, absPower, absDir, limitPwr, limitDir
' determine porportional power based on direction
    limitPwr :=  -100 #> power <# 100
    limitDir :=  -100 #> direction <# 100
    ltPower := rtPower := limitPwr
    if limitDir <> 0
        bIsLeft := (limitDir < 0) ? true :false
        absDir := abs(limitDir)
        ltPower := (bIsLeft) ? (absDir * limitPwr) / 100 : ((100 - absDir) * limitPwr) / 100
        rtPower := (bIsLeft) ? ((100 - absDir) * limitPwr) / 100 : (absDir * limitPwr) / 100

    debug("* calcPowerForDirection(", sdec_long(power), ", ", sdec_long(direction), ") -> ", sdec_long(ltPower), sdec_long(rtPower))

PUB isReady() : bState
'' Return T/F where T means the both motor cogs are running
    bState := ltWheel.isReady() and rtWheel.isReady()

PUB isStopped() : bState
'' Return T/F where T means the both motors are stopped
    bState := ltWheel.isStopped() and rtWheel.isStopped()

PUB isStarting() : bState
'' Return T/F where T means the either motor is spinning up
    bState := ltWheel.isStarting() or rtWheel.isStarting()

CON { -- TASK position tracking -- }

  STACK_SIZE_LONGS = 48
  WINDOW_SIZE = 5

VAR { time values & arrays }

    long    ticks1ms
    long    ticks1us
    long    ticks125ms

    long    senseCog

    long    ltCountsWindow[WINDOW_SIZE]
    long    rtCountsWindow[WINDOW_SIZE]
    long    taskStack[STACK_SIZE_LONGS]

VAR { Data for Motor Position Tracking }

    long    newCntsInSec
    long    ltWinIndex
    long    ltWinEntryCt
    long    ltWindowSum
    long    rtWinIndex
    long    rtWinEntryCt
    long    rtWindowSum
    '  --------------------------
    long    ltPosTrkHallTicks
    long    rtPosTrkHallTicks
    long    deltaTicks
    long    priorPos
    long    circInMM_x10
    long    tickInMM_x10


    '  Position Tracking vars
    long    motorStopHallTicks
    long    motorStopMSecs


PRI taskPostionSense() | senseStartTicks, posThis8th, fValue, fFps, timeNow, eStopCtr
' TASK: every 1/8 Sec (8Hz) read motor pos and calculate RPM and countOf90ths/Sec
    pinlow(TEST_PIN_SNS_LOOP)
    pinlow(TEST_PIN_SNS_LP_ACTV)

    eStopCtr := 0

    repeat
        ' if just starting up (or MOTOR FAULT), reset our tracker
        if ltWheel.getDriveState() == ltWheel.DCS_FAULTED or senseStartTicks == 0
            longfill(@ltCountsWindow, 0, WINDOW_SIZE) ' zero our window accum
            ltWinEntryCt := ltWindowSum := ltWinIndex := 0
            ltPosTrkHallTicks := 0

        if rtWheel.getDriveState() == rtWheel.DCS_FAULTED or senseStartTicks == 0
            longfill(@rtCountsWindow, 0, WINDOW_SIZE) ' zero our window accum
            rtWinEntryCt := rtWindowSum := rtWinIndex := 0
            rtPosTrkHallTicks := 0

        senseStartTicks := getct()
        pintoggle(TEST_PIN_SNS_LOOP)        ' set HI
        pintoggle(TEST_PIN_SNS_LP_ACTV)     ' start of active side
        pintoggle(TEST_PIN_SNS_LOOP)        ' set low   - start of loop

        ' ------------------------------------------
        ' PROCESS left motor
        '
        newCntsInSec := distanceIn90ths(ltWheel.getRawHallTicks())  ' Read the next sensor value
        ltWindowSum -= LONG[@ltCountsWindow][ltWinIndex]            ' Remove the oldest entry from the sum
        long [@ltCountsWindow][ltWinIndex] := newCntsInSec          ' place the newest reading into the window
        ltWindowSum += newCntsInSec                                 ' Add the newest reading to the sum
        ltWinIndex := (ltWinIndex + 1) +// WINDOW_SIZE              ' Increment the index, and wrap to 0 if it exceeds the window size
        if ltWinEntryCt < WINDOW_SIZE                               ' incr number of samples in sum until is window size
            ltWinEntryCt++

'        cntsInSec := (ltWindowSum / ltWinEntryCt) * 8               ' moving average, scaled
        posThis8th := ltWindowSum / ltWinEntryCt
        ltPosTrkHallTicks += posThis8th

        ' ------------------------------------------
        ' PROCESS left motor
        '
        newCntsInSec := distanceIn90ths(rtWheel.getRawHallTicks())  ' Read the next sensor value
        rtWindowSum -= LONG[@rtCountsWindow][rtWinIndex]            ' Remove the oldest entry from the sum
        long [@rtCountsWindow][rtWinIndex] := newCntsInSec          ' place the newest reading into the window
        rtWindowSum += newCntsInSec                                 ' Add the newest reading to the sum
        rtWinIndex := (rtWinIndex + 1) +// WINDOW_SIZE              ' Increment the index, and wrap to 0 if it exceeds the window size
        if rtWinEntryCt < WINDOW_SIZE                               ' incr number of samples in sum until is window size
            rtWinEntryCt++

'        cntsInSec := (rtWindowSum / rtWinEntryCt) * 8               ' moving average, scaled
        posThis8th := rtWindowSum / rtWinEntryCt
        rtPosTrkHallTicks += posThis8th

        ' if user set time/distance to stop then stop if we are past the time or distance
        if motorStopMSecs > 0
            timeNow := getms()
            if timeNow > motorStopMSecs
                stopMotors()
                motorStopMSecs := 0 ' and clear user request
        elseif motorStopHallTicks > 0
            if ltPosTrkHallTicks > motorStopHallTicks or rtPosTrkHallTicks > motorStopHallTicks
                stopMotors()
                motorStopHallTicks := 0 ' and clear user request

        pintoggle(TEST_PIN_SNS_LP_ACTV)    ' end of active side

        ' iff driver reports e-stop then clear the emergency stop request
        '  user will request it again if needed
        ' NOTE: we leave e_stop set for at least 1/4 second before clearing!
        if isEmergency()
            eStopCtr++
        elseif (ltWheel.isEmergency() or rtWheel.isEmergency()) && eStopCtr > 1
            clearEmergency()
            eStopCtr := 0

        deltaTicks := getct() - senseStartTicks

        ' code uses about 1_880 ticks. This is little over 9 uS  @200MHz clock
        '   wait remainder of 125 mSec before next sample
        waitct(senseStartTicks + ticks125ms)    ' wait to create "sense" time-base

PRI isEmergency() : bEmergencyState
' return T/F where T means one or both wheels are in emergency cutoff state
    bEmergencyState := ltWheel.isEmergency()
    if not bEmergencyState
        bEmergencyState := rtWheel.isEmergency()
    if bEmergencyState
        debug("--------WHEEL in EMERGENCY!!--------")



PRI MAX(a,b) : nMax
' return max of a or b
    nMax := (a > b) ? a : b

PRI distanceIn90ths(newPos) : n90ths
    if newPos == priorPos
        n90ths := 0
    elseif newPos < 0
        ' handle pos negative case
        if priorPos < 0
            '  -7 -> -9 = abs(-9) - abs(-7) = abs(2) = 2
            '  -11 -> -9 = abs(-9) - abs(-11) = abs(-2) = 2
            n90ths := abs(abs(newPos) - abs(priorPos))
        else
            '  9 -> -9 = 18 = abs(9) + abs(-9) = 18
            n90ths := abs(newPos) + abs(priorPos)
    else
        ' handle pos positive case
        if priorPos < 0
            ' -9 -> 6 = 6 + abs(-9) = 15
            ' -3 -> 6 = 6 + abs(-3) = 9
            n90ths := newPos + abs(priorPos)
        else
            ' 9 -> 6 = 6 - 9 = abs(-3) = 3
            ' 9 -> 12 = 12 - 9 = abs(3) = 3
            n90ths := abs(newPos - priorPos)
    priorPos := newPos


CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
