'' =================================================================================================
''
''   File....... test_motor_char.spin2
''   Purpose.... Characterize a new motor at given voltage
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Feb 2022
''   Updated.... 9 Jul 2022
''
'' =================================================================================================

CON { timing }

  CLK_FREQ = 270_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock

    ' SPECIAL for LOGGING on RPi
'{
    DEBUG_PIN_TX = 1
    DEBUG_PIN_RX = 0
'}

CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

CON { application io pins }

    ' describe where things are attached to our JonnyMac eval board

    NUM_PAD_SW1     = 32
    NUM_PAD_SW2     = 33
    NUM_PAD_SW3     = 34
    NUM_PAD_SW4     = 35

    JOYSTICK_SW     = 40    ' grn
    JOYSTICK_Y_AXIS = 41    ' yel
    JOYSTICK_X_AXIS = 42    ' org

    HDMI_BASE_PIN       = tvDebug.PINS_P8_P15

    MOTOR_BASE_PIN       = user.ONLY_MOTOR_BASE


    NOT_SET = -1

OBJ { our Motor(s) }

    user        :   "isp_bldc_motor_userconfig"     ' driver configuration
    tvDebug     :   "isp_hdmi_debug"         ' HDMI debug object
    wheel       :   "isp_bldc_motor"        ' the single BLDC motor

DAT { run-time condition vars }

    bUseHDMI    LONG   TRUE       ' set to TRUE to enable HDMI use/output

    hall        LONG    0
    h           LONG    0
    j           LONG    0
    k           LONG    0
    fault       LONG    FALSE

    bAbortLoop  LONG    FALSE

    nGroups         LONG    0
    pGroupTitles    LONG    0
    pGroupNames     LONG    0
    pGroupVarCts    LONG    0
    pGroupVars      LONG    0

PUB main() | motorCog, senseCog, basePin, voltage, motor, limitValue, stepSize, stopVal, bNextLoop, bDidFault, subPass, failSpd
'' DEMO Driving a single wheeled platform

    ' start our HDMI debug output
    if bUseHDMI
        basePin := tvDebug.validBasePinForChoice(HDMI_BASE_PIN)
        if basePin <> tvDebug.INVALID_PIN_BASE
            tvDebug.start(basePin)


    ' validate user settings/choicess
    '  do NOT start motor unless all are legit!
    basePin := wheel.validBasePinForChoice(MOTOR_BASE_PIN)
    voltage := wheel.validVoltageForChoice(user.DRIVE_VOLTAGE)
    motor := wheel.validMotorForChoice(user.MOTOR_TYPE)

    if basePin <> wheel.INVALID_PIN_BASE and voltage <> wheel.INVALID_VOLTAGE and motor <> wheel.INVALID_MOTOR
        ' start our single motor driver
        motorCog := wheel.start(basePin, voltage)
        'tvDebug.reportMotorCog(motorCog)

        ' for single motor let's start the single motor sense task
        senseCog := wheel.startSenseCog()

        if bUseHDMI
            nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars := wheel.getDebugData()
            debug("* Received: ", udec(nGroups), uhex_long(pGroupTitles), uhex_long(pGroupNames), uhex_long(pGroupVarCts), uhex_long(pGroupVars))

            tvDebug.registerDisplay(nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars)

        showPowerSetting(voltage)

        ' just don't draw current at stop
        wheel.holdAtStop(false)

        wheel.setMaxSpeed(100)  ' override 75% with 100% for these tests
        wheel.resetTracking()

        ' couple of loops:
        '  find 100_000_000 limit [100_000_000 to 900_000_000 step 100_000_000] -> result100s
        '  find 10_000_000 limit [result100s - (10_000_000 * 10) to result100s step 10_000_000] -> result10s
        '  find 1_000_000 limit [result10s - (1_000_000 * 10) to result10s step 1_000_000] -> result1s
        '  find 500_000 limit [result1s - (500_000 * 10) to result1s step 500_000] -> result
        passNbr := 1
        stepSize := 100_000_000
        stopVal := 900_000_000
        limitValue := 100_000_000
        repeat
            bDidFault, failSpd := searchSpeedValues(limitValue, stopVal, stepSize)
            debug("* ", sdec(bDidFault), udec(failSpd))

            debug(" --- ")
            ' setup for next inner loop
            if stepSize > 1_000_000
                stepSize := stepSize / 10
            elseif stepSize > 500_000
                stepSize := stepSize / 2
            else
                ' where done!
                ' emit:                 maxFwdIncreAtPwr := 407_000_000      ' 100% anything above yields RPM 2840.0, cts/Sec 1136

                debug("* quit: last digit checked")
                debug("  ")
                debug("    maxFwdIncreAtPwr := ", udec_long(failSpd), "   ' 100% anything above yields RPM ", udec_(highestRPM), ", cts/sec ", udec_(highestTics))
                debug("  ")
                quit

            'if (stepSize * 10) >= limitValue
            '    debug("* quit: limit exceeded")
            '    quit

            stopVal := failSpd
            limitValue := stopVal - (stepSize * 10)
            wheel.testResetMaxValues()
            wheel.resetTracking()
            passNbr++

        ' TBA  let's add a reverse drive loop

        debug("* END TEST: holding for 30 secs...")
        waitms(30000)   ' 30 seconds, then stop

        ' turn off our motor drivers
        wheel.stop()

PRI searchSpeedValues(fromSpd, toSpd, stepSpd) : bDidFault, goodSpd | nbrSteps, midStep, midSpd
' search left or right half of this range
    nbrSteps := (toSpd - fromSpd) / stepSpd
    highestRPM := NOT_SET
    midStep := nbrSteps / 2
    if nbrSteps & $01 == 0
        midStep++   ' if even move to upper middle step
    midSpd := fromSpd + ((midStep - 1) * stepSpd)
    debug("   ")
    debug("* BINARY pass(", udec_(passNbr), ") from: ", udec_(fromSpd), ", stop: ", udec_(toSpd), ", step: ", udec_(stepSpd), udec(midSpd))
    bDidFault := evalSpeed(midSpd)
    if bDidFault
        bDidFault, goodSpd := evalRange(fromSpd, midSpd, stepSpd)
    else
        bDidFault, goodSpd := evalRange(midSpd, toSpd, stepSpd)

PRI evalSpeed(testSpd) : bDidFault | endMaxRPM, endMaxTics
' test this speed to see if would fail
    debug("* TEST pass(", udec_(passNbr++), ")", udec(testSpd))
    clearFault()
    wheel.testSetLimit(testSpd)
    driveForwardToFail()
    bDidFault, endMaxRPM, endMaxTics := reportEndCondition()
    if bDidFault
        clearFault()
    debug("   ")

PRI evalRange(fromSpd, toSpd, stepSpd) : bDidFault, failSpd | limitValue, endMaxRPM, endMaxTics, bBadStart, tryCt
' search range for failure
    clearFault()
    debug("* START pass(", udec_(passNbr), ") curr: ", udec_(fromSpd), ", stop: ", udec_(toSpd), ", step: ", udec_(stepSpd))
    repeat limitValue from fromSpd to toSpd step stepSpd
        wheel.testSetLimit(limitValue)
        'wheel.resetTracking()
        repeat 2
            clearFault()
            bBadStart := driveForwardToFail()
            if not bBadStart
                'debug("* good start")
                quit
            else
                debug("*E BAD start! trying again?")

        if bBadStart
            debug("*E failed to startup motor!  Abort")
            quit

        'debug("- start done...")

        bDidFault, endMaxRPM, endMaxTics := reportEndCondition()
        if not bDidFault
            ' setup for next value in this loop
            if highestRPM <> endMaxRPM
                ' have diff value, set as first
                highestRPM := endMaxRPM
                highestTics := endMaxTics
                repeatCt := 1
                debug("* -NEW1st! pass(", udec_(passNbr++), ") rpm: ", udec_(highestRPM))
            else
                repeatCt++
                if repeatCt > 1 ' abort after 2nd occurrnce of same value
                    debug("* -THIRD is same! pass(", udec_(passNbr++), ") rpm: ", udec_(highestRPM))
                    failSpd := limitValue
                    quit

            ' or exit if done
            if limitValue == toSpd
                failSpd := limitValue
                quit
            else
                limitValue += stepSpd
                debug("* -NEXT pass(", udec_(passNbr++), ") curr: ", udec_(limitValue))
        else
            ' faulted! found break, just exit
            failSpd := limitValue
            'debug("**  hold forever for eval...")
            'repeat ' hold here for evaluation
            clearFault()
            quit

VAR
    ' work values
    LONG    minX
    LONG    minY
    LONG    maxX
    LONG    maxY
    LONG    passNbr
    LONG    highestRPM
    LONG    highestTics
    LONG    repeatCt

DAT

passCt    LONG    0

PRI clearFault() | bDidFault
    wheel.resetTracking()
    wheel.testResetMaxValues()

    if wheel.isFaulted()
        debug("S clearFault()")
        wheel.testResetFault()

PRI reportEndCondition() : bDidFault, endMaxRPM, endMaxTics
    ' just finished pass which ended in NOT fault or fault
    '  report max RPM and max Tics
    '  report fault or not
    endMaxRPM, endMaxTics, bDidFault := wheel.testGetResults()
    debug("* RPT: ", udec(endMaxRPM), udec(endMaxTICs), sdec(bDidFault))
    debug("  ")

PRI driveForwardToFail() : bBadStart | bDidFault
    bBadStart := FALSE
    bDidFault := waitUntilMotorReady()
    if not bDidFault
        ' now drive!
        wheel.stopAfterTime(15, wheel.DTU_SEC)      ' set to hold at speed for 15 Sec
        wheel.driveAtPower(100)                      ' now go FWD at 100% pwr

        bDidFault, bBadStart := waitUntilMotorDone()

    else
        debug("*E motor not ready")


PRI driveReverseToFail() : bBadStart | bDidFault
    bBadStart := FALSE
    bDidFault := waitUntilMotorReady()
    if not bDidFault
        ' now drive!
        wheel.stopAfterTime(15, wheel.DTU_SEC)      ' set to hold at speed for 15 Sec
        wheel.driveAtPower(-100)                      ' now go FWD at 100% pwr

        bDidFault, bBadStart := waitUntilMotorDone()

    else
        debug("*E motor not ready")


PRI waitUntilMotorReady() : bDidFault
    bDidFault := FALSE
    if wheel.isReady() == false
        'debug("* wait motor ready...")
        repeat
            _, _, bDidFault := wheel.testGetResults()
            if wheel.isReady()
                quit
            elseif bDidFault
                debug("*E Motor NOT Ready? FAULT!")
                quit
            else
                waitms(2)

    'if not bDidFault
    '    debug("* Motor ready, let's drive!")


PRI waitUntilMotorDone() : bDidFault, bBadStart
    bDidFault := FALSE
    bBadStart := FALSE
    if not wheel.isTurning()
         debug("* wait until motor starts...")
         repeat
            _, _, bDidFault := wheel.testGetResults()
            if wheel.isTurning()
                quit
            elseif bDidFault
                bBadStart := TRUE
                debug("*E NOT turning? Start ended w/FAULT!")
                quit
            else
                waitms(2)

    if not bDidFault and wheel.isStopped() == false
        debug("* wait until motor finishes...")
        repeat
            _, _, bDidFault := wheel.testGetResults()
            if wheel.isStopped()
                quit
            elseif bDidFault
                debug("*E NOT Stopped?  wait Finish ended w/FAULT!")
                quit
            else
                waitms(2)

    if not bDidFault
        debug("* Motor stopped!")

PRI showPowerSetting(ePower)
    CASE ePower
        wheel.PWR_6p0V:
            debug("* PWR - 6.0V")
        wheel.PWR_7p4V:
            debug("* PWR - 7.4V")
        wheel.PWR_11p1V:
            debug("* PWR - 11.1V")
        wheel.PWR_12p0V:
            debug("* PWR - 12.0V")
        wheel.PWR_14p8V:
            debug("* PWR - 14.8V")
        wheel.PWR_18p5V:
            debug("* PWR - 18.5V")
        wheel.PWR_22p2V:
            debug("* PWR - 22.2V")
        wheel.PWR_24p0V:
            debug("* PWR - 24.0V")
        OTHER:
            debug("* PWR unknown value!!")

CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
