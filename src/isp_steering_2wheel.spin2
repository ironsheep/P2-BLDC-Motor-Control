'' =================================================================================================
''
''   File....... isp_steering_2wheel.spin2
''   Purpose.... Object providing control interface for steering a twin-bldc-motor platform
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Feb 2022
''   Updated.... 21 Jul 2022
''
'' =================================================================================================
CON { forward our interface constants }

  ' board connection Enum
    MOTOR_TYPE     = user.MOTOR_TYPE

  ' board connection Enum
    PINS_P0_P15     = ltWheel.PINS_P0_P15
    PINS_P16_P31    = ltWheel.PINS_P16_P31
    PINS_P32_P47    = ltWheel.PINS_P32_P47

    ' Driver Supported Voltages Enum
    '  Lipo battery sizes: 2s-7.4v, 3s-11.1v, 4s-14.8v, 5s-18.5v, 6s-22.2v, 7s-25.9v
    PWR_6p0V      = ltWheel.PWR_6p0V
    PWR_7p4V    = ltWheel.PWR_7p4V
    PWR_11p1V   = ltWheel.PWR_11p1V
    PWR_12p0V     = ltWheel.PWR_12p0V
    PWR_14p8V   = ltWheel.PWR_14p8V
    PWR_18p5V   = ltWheel.PWR_18p5V
    PWR_22p2V   = ltWheel.PWR_22p2V
    PWR_24p0V     = ltWheel.PWR_24p0V
    PWR_25p9V     = ltWheel.PWR_25p9V

  ' Driver Distance-Units Enum
    DDU_Unknown     = ltWheel.DDU_Unknown
    DDU_IN          = ltWheel.DDU_IN
    DDU_MM          = ltWheel.DDU_MM
    DDU_CM          = ltWheel.DDU_CM
    DDU_FT          = ltWheel.DDU_FT
    DDU_M           = ltWheel.DDU_M
    DDU_KM          = ltWheel.DDU_KM
    DDU_MI          = ltWheel.DDU_MI

  ' Driver Rotation-Units Enum
    DRU_Unknown     = ltWheel.DRU_Unknown
    DRU_DEGREES     = ltWheel.DRU_DEGREES
    DRU_ROTATIONS   = ltWheel.DRU_ROTATIONS
    DRU_HALL_TICKS  = ltWheel.DRU_HALL_TICKS

  ' Driver Time-Unit Enum
    DTU_Unknown     = ltWheel.DTU_Unknown
    DTU_MILLISEC    = ltWheel.DTU_MILLISEC
    DTU_SEC         = ltWheel.DTU_SEC

  ' Driver Status Enum
    DS_Unknown      = ltWheel.DS_Unknown
    DS_MOVING       = ltWheel.DS_MOVING
    DS_HOLDING      = ltWheel.DS_HOLDING
    DS_OFF          = ltWheel.DS_OFF

  ' Driver State Enum
    DCS_Unknown     = ltWheel.DCS_Unknown
    DCS_STOPPED     = ltWheel.DCS_STOPPED
    DCS_SPIN_UP     = ltWheel.DCS_SPIN_UP
    DCS_AT_SPEED    = ltWheel.DCS_AT_SPEED
    DCS_SPIN_DN     = ltWheel.DCS_SPIN_DN
    DCS_SLOW_TO_CHG = ltWheel.DCS_SLOW_TO_CHG
    DCS_FAULTED     = ltWheel.DCS_FAULTED
    DCS_ESTOP       = ltWheel.DCS_ESTOP

    ' return value when user makes bad choice
    INVALID_MOTOR       = ltWheel.INVALID_MOTOR

    ' return value when user makes bad choice
    INVALID_PIN_BASE    = ltWheel.INVALID_PIN_BASE

    ' return value when user makes bad choice
    INVALID_VOLTAGE     = ltWheel.INVALID_VOLTAGE

    ' return value when user makes bad choice
    INVALID_DET_MODE     = ltWheel.INVALID_DET_MODE

CON { test pins for LA measurement }

{
    ' PIN_56 - PIN_63
    TEST_BASE_PIN = 56
    TEST_PINS_ALL = TEST_BASE_PIN addpins 7
    TEST_PIN_SNS_LOOP = TEST_BASE_PIN + 0       ' LA grey
    TEST_PIN_SNS_LP_ACTV = TEST_BASE_PIN + 1       ' LA red
'}

OBJ { our Motors }

    ltWheel     :   "isp_bldc_motor"                    ' left wheel drive
    rtWheel     :   "isp_bldc_motor"                    ' right wheel drive
    user        :   "isp_bldc_motor_userconfig"         ' driver configuration
    distConv    :   "isp_dist_utils"                    ' distance conversion utils

PUB null()

'' This is not a top-level object

PUB start(leftBasePin, rightBasePin, driveVoltage, leftDetectMode, rightDetectMode) : ok
'' Start our drive cogs connected to our left and right motor control pin-sets
    ticks1ms   := (clkfreq / 1_000)
    ticks1us   := (clkfreq / 1_000_000)
    ticks125ms := ticks1ms * 125

    circInMM_x10 := distConv.circInMMforDiaInInchFloat(user.WHEEL_DIA_IN_INCH)
    if circInMM_x10 <> 0
        if user.MOTOR_TYPE == user.MOTR_6_5_INCH
            tickInMM_x10 := circInMM_x10 / 90
    else
        tickInMM_x10 := 0

    ' iff HDMI is needed, then we need this!
    'if clkfreq <> 270_000_000
    '    debug("!! ERROR bad CLOCK value")
    '    repeat ' halt here

    ltWheel.start(leftBasePin, driveVoltage, leftDetectMode)
    ltWheel.testSetMotorId(@"ltMot")
    rtWheel.start(rightBasePin, driveVoltage, rightDetectMode)
    rtWheel.testSetMotorId(@"rtMot")
    rtWheel.forwardIsReverse()

    ' init user tracking vars
    motorStopHallTicks := 0
    motorStopMSecs := 0
    rqstPower := 0
    rqstLtPower := 0
    rqstRtPower := 0
    rqstDirection := 0
    userCutoff := FALSE
    notUsed := 0

    ok := senseCog := cogspin(NEWCOG, taskPostionSense(), @taskStack) + 1
    if senseCog == 0    ' did fail?
        debug("!! ERROR filed to start Position Sense task")

PUB stop()
'' Stop our left/right drive and Sense cogs and release allocated pins
    if senseCog     ' stop motor reads
        cogstop(senseCog - 1)
        senseCog := 0

    ltWheel.stop()
    rtWheel.stop()

PUB setAcceleration(rate)
'' NOT WORKING: Limit Acceleration to {rate} where {rate} is [??? - ???] mm/s squared (default is ??? mm/s squared)
    ltWheel.setAcceleration(rate)
    rtWheel.setAcceleration(rate)

PUB setMaxSpeed(speed)
'' Limit top-speed to {speed}
    ltWheel.setMaxSpeed(speed)
    rtWheel.setMaxSpeed(speed)

PUB setMaxSpeedForDistance(speed)
'' Limit top-speed of driveDistance() operations to {speed}
    ltWheel.setMaxSpeedForDistance(speed)
    rtWheel.setMaxSpeedForDistance(speed)

PUB calibrate()
'' NOT WORKING: (we may need this?)
'' have motor drivers determine fixed-offset constants
    ltWheel.calibrate()
    rtWheel.calibrate()

PUB holdAtStop(bEnable)
'' Informs the motor drivers to actively hold position (bEnable=true) or coast (bEnable=false) at end of motion
    ltWheel.holdAtStop(bEnable)
    rtWheel.holdAtStop(bEnable)

PUB resetTracking()
'' Resets the position tracking values returned by getDistance() and getRotations()
''  Effectively: use current position as home from now on
    resetLtWindowAccumulator()
    resetRtWindowAccumulator()

CON { --- Subsystem Control --- }

PUB driveDirection(power, direction) | ltPower, rtPower
'' Control the speed and direction of your robot using the {power} and {direction} inputs.
'' Turns both motors on at {power, [(-100) to 100]} but adjusted by {direction, [(-100) to 100]}.
'' AFFECTED BY: setAcceleration(), setMaxSpeed(), holdAtStop()
    ' calculate effective power based on direction
    rqstPower := power
    rqstDirection := direction
    rqstLtPower, rqstRtPower := calcPowerForDirection(power, direction)

    ' now tell our motor of their own power
    ltWheel.driveAtPower(rqstLtPower)
    rtWheel.driveAtPower(rqstRtPower)

PUB driveForDistance(leftDistance, rightDistance, eDistanceUnits)
'' Control the forward direction or rate of turn of your robot using the {leftDistance} and {rightDistance} inputs.
'' Turn both motors on then turn them off again when either reaches the specified distance {leftDistance} or
''  {rightDistance}, where {*distance} is in {distanceUnits} [DDU_IN, DDU_FT, DDU_CM, or DDU_M].
'' AFFECTED BY: setAcceleration(), setMaxSpeedForDistance(), holdAtStop()
    ltWheel.driveForDistance(leftDistance, eDistanceUnits)
    rtWheel.driveForDistance(rightDistance, eDistanceUnits)

PUB driveAtPower(leftPower, rightPower)
'' Control the speed and direction of your robot using the {leftPower} and {rightPower} inputs.
'' Turns left motor on at {leftPower} and right at {rightPower}. Where {*Power} are in the range [(-100) to 100].
'' AFFECTED BY: setAcceleration(), setMaxSpeed(), holdAtStop()
    rqstLtPower := leftPower
    rqstRtPower := rightPower

    ltWheel.driveAtPower(rqstLtPower)
    rtWheel.driveAtPower(rqstRtPower)

PUB stopAfterRotation(nRotationCount, eRotationUnits) | degreesPerTic, ticsPerRotation
'' Stops both motors, after either of the motors reaches {rotationCount} of {rotationUnits} [DRU_HALL_TICKS, DRU_DEGREES, or DRU_ROTATIONS].
'' USE WITH: driveDirection(), drive()
'' USE WITH:  driveAtPower()
'' Will ABORT if {rotationCount} < 1
    if nRotationCount < 1
        debug("! ERROR: invalid RotationCount Value:", udec_long(nRotationCount), " - must be > 0!")
        ' FIXME: UNDONE should be more than ticks needed for spin-up/down ramps!!!
        abort

    degreesPerTic, ticsPerRotation := ltWheel.hallTicInfoForMotor()

    ' convert rotation info to ticks (will stop at ticks limit)
    motorStopHallTicks := 0
    case eRotationUnits
        DRU_HALL_TICKS:
            motorStopHallTicks := nRotationCount
        DRU_DEGREES:
            ' ticks = degrees / 4
            motorStopHallTicks := nRotationCount / degreesPerTic
        DRU_ROTATIONS:
            ' ticks = rotations * 90
            motorStopHallTicks := nRotationCount * ticsPerRotation
        other:
            debug("! ERROR: invalid rotationUnits Value:", udec_long(eRotationUnits))
            abort


'' Stops both motors, after either of the motors reaches {distance} specified in {distanceUnits} [DDU_IN or DDU_MM].
'' USE WITH: driveDirection(), drive()
PUB stopAfterDistance(nDistance, eDistanceUnits) | fValue
'' Stops the motors after one of them reaches {distance} specified in {distanceUnits} [DDU_MM, DDU_CM, DDU_IN, DDU_FT, DDU_M].
'' USE WITH:  driveAtPower()
'' Will ABORT if {distance} < 1
    if nDistance < 1
        debug("! ERROR: invalid Distance Value:", udec_long(nDistance), " - must be > 0!")
        ' FIXME: UNDONE should be more than ticks needed for spin-up/down ramps!!!
        abort

    ' if user configured wheel-diameter is 0.0 then tickInMM_x10 is 0
    ' if so, abort this method as we can't do this!
    if tickInMM_x10 == 0
        debug("! ERROR: distance calcs not supported as wheel dia. is ZERO!!")
        abort

    ' convert distance to ticks (will stop at ticks limit)
    case eDistanceUnits
        DDU_MM:
            motorStopHallTicks := (nDistance * 10) / tickInMM_x10
        DDU_CM:
            motorStopHallTicks := (nDistance * 10 * 10) / tickInMM_x10
        DDU_IN:
            fValue := distConv.fIn2mm(nDistance)
            motorStopHallTicks := trunc(fValue *. 10.0) / tickInMM_x10
        DDU_FT:
            fValue := distConv.fIn2mm(nDistance * 12)
            motorStopHallTicks := trunc(fValue *. 10.0) / tickInMM_x10
        DDU_M:
            motorStopHallTicks := (nDistance * 100 * 10) / tickInMM_x10
        other:
            debug("! ERROR: invalid distanceUnits Stop Value:", udec_long(eDistanceUnits))
            abort

'' Stops both motors, after either of the motors reaches {distance} specified in {distanceUnits} [DDU_IN or DDU_MM].
'' USE WITH: driveDirection(), drive()
PUB stopAfterTime(nTime, eTimeUnits) | timeNow
'' Stops the motors after {time} specified in {timeUnits} [DTU_MILLISEC or DTU_SEC] has elapsed.
'' USE WITH:  driveAtPower()
'' Will ABORT if {time} < 1
    if nTime < 1
        debug("! ERROR: invalid nTime Value:", udec_long(nTime), " - must be > 0!")
        ' FIXME: UNDONE should be more than time needed for spin-up/down ramps!!!
        abort

    case eTimeUnits
        DTU_MILLISEC:
        DTU_SEC:
        other:
            debug("! ERROR: invalid timeUnits Value:", udec_long(eTimeUnits))
            abort

    if eTimeUnits == DTU_SEC
        timeNow := getms()
        motorStopMSecs := timeNow + (nTime * 1_000)
    else
        timeNow := getms()
        motorStopMSecs := timeNow + nTime

    if motorStopMSecs > 0
        debug("* stop motor at ", udec_long(motorStopMSecs), ", now: ", udec_long(timeNow))

PUB stopMotors()
'' Stops both motors, killing any motion that was still in progress
'' AFFECTED BY:holdAtStop()
    rqstPower := rqstLtPower := rqstRtPower := 0
    ltWheel.stopMotor()
    rtWheel.stopMotor()

PUB emergencyCutoff()
'' EMERGENCY-Stop - Immediately stop both motors, killing any motion that was still in progress
    rqstPower := rqstLtPower := rqstRtPower := 0
    userCutoff := TRUE
    ltWheel.emergencyCutoff()
    rtWheel.emergencyCutoff()

PUB clearEmergency()
'' Remove emergency override allowing motors to be driven again
' used by wheels*.spin2 methods
    userCutoff := FALSE
    ltWheel.clearEmergency()
    rtWheel.clearEmergency()
    debug("--------clear EMERGENCY--------")


CON { --- Subsystem Status --- }

PUB getDistance(eDistanceUnits) : leftDistanceInUnits, rightDistanceInUnits
'' Returns the distance in {distanceUnits} [DDU_MM, DDU_CM, DDU_IN, DDU_FT, DDU_M, DDU_KM, DDU_MI] travelled by each motor since last reset
    debug("- gdi ", sdec_long(ltPosTrkHallTicks), sdec_long(rtPosTrkHallTicks))
    leftDistanceInUnits := convertDistance(ltPosTrkHallTicks, eDistanceUnits)
    rightDistanceInUnits := convertDistance(rtPosTrkHallTicks, eDistanceUnits)

PRI convertDistance(nValue, eDistanceUnits) : nDistanceInUnits | fMMpTick, fValue
' Returns the distance in {distanceUnits} [DDU_MM, DDU_CM, DDU_IN, DDU_FT, DDU_M, DDU_KM, DDU_MI] travelled by this motor since last reset
    nDistanceInUnits := 0
    if circInMM_x10 <> 0
        fMMpTick := float(circInMM_x10) /. 90.0 /. 10.0
        case eDistanceUnits
            DDU_MM:
                nDistanceInUnits := trunc(float(nValue) *. fMMpTick)
            DDU_CM:
                nDistanceInUnits := trunc(float(nValue) *. fMMpTick /. 10.0)
            DDU_IN:
                fValue := distConv.fMm2inFloat(float(nValue) *. fMMpTick)
                nDistanceInUnits := trunc(fValue +. 0.5)    ' rounded
            DDU_FT:
                fValue := distConv.fMm2inFloat(float(nValue) *. fMMpTick)
                nDistanceInUnits := trunc(fValue /. 12.0 +. 0.5)    ' in FT, rounded
            DDU_M:
                fValue := float(nValue) *. fMMpTick
                nDistanceInUnits := trunc(fValue /. 1000.0)    ' in M
            DDU_MI:
                fValue := distConv.fMm2inFloat(float(nValue) *. fMMpTick)
                nDistanceInUnits := trunc(fValue /. 5280.0 /. 12.0)    ' in MI
            DDU_KM:
                fValue := float(nValue) *. fMMpTick
                nDistanceInUnits := trunc(fValue /. 1000.0 /. 1000.0)    ' in kM
    else
        debug("! ERROR: distance calcs not supported as wheel dia. is ZERO!!")


PUB getRotationCount(eRotationUnits) : leftRotationCount, rightRotationCount
'' Returns accumulated {*RotationCount} in {rotationUnits} [DRU_DEGREES, DRU_ROTATIONS], since last reset, for each of the motors.
    debug("- grc ", sdec_long(ltPosTrkHallTicks), sdec_long(rtPosTrkHallTicks))
    leftRotationCount := convertRotationCount(ltPosTrkHallTicks, eRotationUnits)
    rightRotationCount := convertRotationCount(rtPosTrkHallTicks, eRotationUnits)

PRI convertRotationCount(nValue, eRotationUnits) : rotationCount | degreesPerTic, ticsPerRotation
' Returns accumulated {rotationCount} in {rotationUnits} [DRU_DEGREES, DRU_ROTATIONS, or DRU_HALL_TICKS], since last reset, for this motor.
    rotationCount := -1

    degreesPerTic, ticsPerRotation := ltWheel.hallTicInfoForMotor()

    case eRotationUnits
        DRU_HALL_TICKS:
            rotationCount := nValue
        DRU_DEGREES:
            ' degrees = ticks * 15, 4
            rotationCount := nValue * degreesPerTic
        DRU_ROTATIONS:
            ' rotations = ticks / 24, 90
            rotationCount := nValue / ticsPerRotation

PUB getPower() : leftPower, rightPower
'' Returns the last specified power value [-100 thru +100] for each of the motors (will be zero if the motor is stopped).
    leftPower := ltWheel.getPower()
    rightPower := rtWheel.getPower()

PUB getCurrent() : nLtAmps, nLtWatts, nRtAmps, nRtWatts
'' Returns the latest current sense values for each motor
    nLtAmps, nLtWatts := ltWheel.getCurrent()
    nRtAmps, nRtWatts := rtWheel.getCurrent()

PUB getStatus() : eLeftStatus, eRightStatus
'' Returns status of motor drive state for each motor: enumerated constant: DS_MOVING, DS_HOLDING or DS_OFF
    eLeftStatus := ltWheel.getStatus()
    eRightStatus := rtWheel.getStatus()

PRI getDriverState() : eLeftState, eRightState
' Returns status of motor-driver state for each motor: enumerated constants: DCS_*
    eLeftState := ltWheel.getDriverState()
    eRightState := rtWheel.getDriverState()

DAT { fault tracking }

ltFaultSeenMS    long  0
rtFaultSeenMS    long  0

PRI getFaultStatus() : bLeftStatus, bRightStatus | bLeftSignal, bRightSignal
' Returns status of motor-driver fault-state for each motor: T/F
    bLeftStatus := ltWheel.isFaulted()
    bRightStatus := rtWheel.isFaulted()

    bLeftSignal := ltWheel.isFaultSignal()
    bRightSignal := rtWheel.isFaultSignal()

    ' if fault appears then let it stay for 3*1000 mSec
    ' . after that, clear it

    if bLeftSignal == TRUE and ltFaultSeenMS == 0
        ltFaultSeenMS := getms() + 3000
        debug(" -------------- LtMotr See FAULT! --------------")
    elseif bLeftSignal == TRUE and ltFaultSeenMS <> 0 and getms() > ltFaultSeenMS
        debug(" -------------- LtMotr Cleared FAULT --------------")
        ltWheel.clearFaultSignal()
        ltFaultSeenMS := 0

    if bRightSignal == TRUE and rtFaultSeenMS == 0
        rtFaultSeenMS := getms() + 3000
        debug(" -------------- RtMotr See FAULT! --------------")
    elseif bRightSignal == TRUE and rtFaultSeenMS <> 0 and getms() > rtFaultSeenMS
        debug(" -------------- RtMotr Cleared FAULT --------------")
        rtWheel.clearFaultSignal()
        rtFaultSeenMS := 0

PUB getMaxSpeed() : nSpeed
'' Returns the last specified {maxSpeed}
    ' NOTE: they both contain same value so return only right-wheel value
    'nSpeed := ltWheel.getMaxSpeed()  ' return last specified user value
    nSpeed := rtWheel.getMaxSpeed()  ' return last specified user value

PUB getMaxSpeedForDistance() : nSpeed4dist
'' Returns the last specified {maxSpeedForDistance}
    ' NOTE: they both contain same value so return only right-wheel value
    'nSpeed4dist := ltWheel.getMaxSpeed()  ' return last specified user value
    nSpeed4dist := rtWheel.getMaxSpeed()  ' return last specified user value

PUB getLeftDebugData() : nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars
'' Return pointers to HDMI-debug data structures for LEFT motor-object instance
    nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars := ltWheel.getDebugData()

PUB getRightDebugData() : nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars
'' Return pointers to HDMI-debug data structures for LEFT motor-object instance
    nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars := rtWheel.getDebugData()

CON { --- PUBLIC Utility Methods --- }

PUB validBasePinForChoice(userBasePin) : legalBasePin
'' VALIDATE users' base-pin choice returns legalBasePin or INVALID_PIN_BASE
    legalBasePin := ltWheel.validBasePinForChoice(userBasePin)

PUB validVoltageForChoice(userVoltage) : legalVoltage
'' VALIDATE users' voltage choice returns legalVoltage or INVALID_VOLTAGE
    legalVoltage := ltWheel.validVoltageForChoice(userVoltage)

PUB validMotorForChoice(userMotor) : legalMotor
'' VALIDATE users' motor choice returns legalMotor or INVALID_MOTOR
    legalMotor := ltWheel.validMotorForChoice(userMotor)

PUB validDetectModeForChoice(userDetMode) : legalMode
'' VALIDATE users' detection mode choice returns legalMode or INVALID_DET_MODE
    legalMode := ltWheel.validDetectModeForChoice(userDetMode)

CON { --- PRIVATE Utility Methods --- }

PRI calcPowerForDirection(power, direction) : ltPower, rtPower | bIsLeft, absPower, absDir, limitPwr, limitDir
' determine porportional power based on direction
    limitPwr :=  -100 #> power <# 100
    limitDir :=  -100 #> direction <# 100
    ltPower := rtPower := limitPwr
    if limitDir <> 0
        bIsLeft := (limitDir < 0) ? true :false
        absDir := abs(limitDir)
        ltPower := (bIsLeft) ? (absDir * limitPwr) / 100 : ((100 - absDir) * limitPwr) / 100
        rtPower := (bIsLeft) ? ((100 - absDir) * limitPwr) / 100 : (absDir * limitPwr) / 100

    debug("* calcPowerForDirection(", sdec_long(power), ", ", sdec_long(direction), ") -> ", sdec_long(ltPower), sdec_long(rtPower))

PUB isReady() : bState
'' Return T/F where T means the both motor cogs are running
    bState := ltWheel.isReady() and rtWheel.isReady()

PUB isStopped() : bState
'' Return T/F where T means the both motors are stopped
    bState := ltWheel.isStopped() and rtWheel.isStopped()

PUB isStarting() : bState
'' Return T/F where T means the either motor is spinning up
    bState := ltWheel.isStarting() or rtWheel.isStarting()

PUB isTurning() : bState
'' Return T/F where T means the either motor is rotating
    bState := ltWheel.isTurning() or rtWheel.isTurning()

CON { -- TASK position tracking -- }

    STACK_SIZE_LONGS = 64 ' WARNING! we exceed stack at 48!

    ' at 125 ms
    SENSE_LOOP_HZ = 8

    HALL_WINDOW_SIZE = SENSE_LOOP_HZ

VAR { time values & arrays }

    long    ticks1ms
    long    ticks1us
    long    ticks125ms

    long    senseCog

    long    taskStack[STACK_SIZE_LONGS]

VAR { Data for Motor Position Tracking }

    ' summing sense values at 1/8 sec period
    LONG    ltHallCountsWindow[HALL_WINDOW_SIZE]
    LONG    ltHallWinIndex
    LONG    ltHallWinEntryCt
    LONG    ltHallCntsIn8thSec
    LONG    ltHallWindowSum

    LONG    rtHallCountsWindow[HALL_WINDOW_SIZE]
    LONG    rtHallWinIndex
    LONG    rtHallWinEntryCt
    LONG    rtHallCntsIn8thSec
    LONG    rtHallWindowSum

    long    ltPosTrkHallTicks
    long    rtPosTrkHallTicks
    long    deltaTicks
    long    priorLtPos
    long    priorRtPos
    long    circInMM_x10
    long    tickInMM_x10
    '  --------------------------
    long    hallCntsIn8thSec

    ' USER REQUESTS
    '  Position Tracking vars
    long    motorStopHallTicks
    long    motorStopMSecs
    '  Drive vars
    long    rqstPower
    long    rqstDirection
    long    rqstLtPower
    long    rqstRtPower
    long    userCutoff

    long    notUsed

PRI resetLtWindowAccumulator()
    longfill(@ltHallCountsWindow, 0, HALL_WINDOW_SIZE) ' zero our window accum
    ltHallWinEntryCt := ltHallWindowSum := ltHallWinIndex := 0
    ltPosTrkHallTicks := 0

PRI resetRtWindowAccumulator()
    longfill(@rtHallCountsWindow, 0, HALL_WINDOW_SIZE) ' zero our window accum
    rtHallWinEntryCt := rtHallWindowSum := rtHallWinIndex := 0
    rtPosTrkHallTicks := 0

CON

   LEFT_WHEEL = TRUE
   RIGHT_WHEEL = FALSE

PRI taskPostionSense() | senseStartTicks, timeNow, eStopCtr
' TASK: every 1/8 Sec (8Hz) read motor pos and calculate RPM and countOf90ths/Sec
    'pinlow(TEST_PIN_SNS_LOOP)
    'pinlow(TEST_PIN_SNS_LP_ACTV)

    eStopCtr := 0
    resetLtWindowAccumulator()
    resetRtWindowAccumulator()
    priorLtStatus := priorRtStatus := -1

    repeat
        ' if just starting up (or MOTOR FAULT), reset our tracker
        if ltWheel.getDriverState() == DCS_FAULTED or ltWheel.getDriverState() == DCS_ESTOP or senseStartTicks == 0
            resetLtWindowAccumulator()

        if rtWheel.getDriverState() == DCS_FAULTED or rtWheel.getDriverState() == DCS_ESTOP or senseStartTicks == 0
            resetRtWindowAccumulator()

        showDriveStatesOnChange()

        senseStartTicks := getct()
        'pintoggle(TEST_PIN_SNS_LOOP)        ' set HI
        'pintoggle(TEST_PIN_SNS_LP_ACTV)     ' start of active side
        'pintoggle(TEST_PIN_SNS_LOOP)        ' set low   - start of loop

        ' ------------------------------------------
        ' PROCESS left motor
        '
        hallCntsIn8thSec := distanceIn90ths(ltWheel.getRawHallTicks(), LEFT_WHEEL)  ' Read the next sensor value
        ltHallWindowSum -= LONG[@ltHallCountsWindow][ltHallWinIndex]            ' Remove the oldest entry from the sum
        long [@ltHallCountsWindow][ltHallWinIndex] := hallCntsIn8thSec          ' place the newest reading into the window
        ltHallWindowSum += hallCntsIn8thSec                                     ' Add the newest reading to the sum
        ltHallWinIndex := (ltHallWinIndex + 1) +// HALL_WINDOW_SIZE             ' Increment the index, and wrap to 0 if it exceeds the window size
        if ltHallWinEntryCt < HALL_WINDOW_SIZE                                  ' incr number of samples in sum until is window size
            ltHallWinEntryCt++

        ltPosTrkHallTicks += hallCntsIn8thSec

        ltWheel.updateSenseData(hallCntsIn8thSec, ltHallWindowSum)

        ' ------------------------------------------
        ' PROCESS right motor
        '
        hallCntsIn8thSec := distanceIn90ths(rtWheel.getRawHallTicks(), RIGHT_WHEEL)  ' Read the next sensor value
        rtHallWindowSum -= LONG[@rtHallCountsWindow][rtHallWinIndex]            ' Remove the oldest entry from the sum
        long [@rtHallCountsWindow][rtHallWinIndex] := hallCntsIn8thSec          ' place the newest reading into the window
        rtHallWindowSum += hallCntsIn8thSec                                     ' Add the newest reading to the sum
        rtHallWinIndex := (rtHallWinIndex + 1) +// HALL_WINDOW_SIZE             ' Increment the index, and wrap to 0 if it exceeds the window size
        if rtHallWinEntryCt < HALL_WINDOW_SIZE                                  ' incr number of samples in sum until is window size
            rtHallWinEntryCt++

        rtPosTrkHallTicks += hallCntsIn8thSec

        rtWheel.updateSenseData(hallCntsIn8thSec, rtHallWindowSum)
        ' ------------------------------------------
        ' EVALUATE any motor stop requests

        ' if user set time/distance to stop then stop if we are past the time or distance
        if motorStopMSecs > 0
            timeNow := getms()
            if timeNow > motorStopMSecs
                stopMotors()
                motorStopMSecs := 0 ' and clear user request
        elseif motorStopHallTicks > 0
            if ltPosTrkHallTicks > motorStopHallTicks or rtPosTrkHallTicks > motorStopHallTicks
                stopMotors()
                motorStopHallTicks := 0 ' and clear user request

        'pintoggle(TEST_PIN_SNS_LP_ACTV)    ' end of active side

        ' ------------------------------------------
        ' iff driver reports e-stop then clear the emergency stop request
        '  user will request it again if needed
        ' NOTE: we leave e_stop set for at least 1/4 second before clearing!
        if isEmergency()
            eStopCtr++
        elseif (ltWheel.isEmergency() or rtWheel.isEmergency()) && eStopCtr > 1
            clearEmergency()
            eStopCtr := 0

        ' keep track of runtime for this sensor loop (for debug, HDMI, etc.)
        deltaTicks := getct() - senseStartTicks

        ' code uses about 1_880 ticks. This is little over 9 uS  @200MHz clock
        '   wait remainder of 125 mSec before next sample
        waitct(senseStartTicks + ticks125ms)    ' wait to create "sense" time-base

PRI isEmergency() : bEmergencyState
' return T/F where T means one or both wheels are in emergency cutoff state
    bEmergencyState := ltWheel.isEmergency()
    if not bEmergencyState
        bEmergencyState := rtWheel.isEmergency()
    if bEmergencyState
        debug("--------WHEEL in EMERGENCY!!--------")

PUB showDriveStates()
'' for TESTING dump curr drive states
    reportMotorStatus()
    reportDrvStatus()
    reportFaultStatus()

PRI reportDrvStatus() | ltState, rtState
    ltState, rtState := getDriverState()
    showDriverState(ltState, @"ltMot")
    showDriverState(rtState, @"rtMot")

PRI reportMotorStatus() | ltStatus, rtStatus
    ltStatus, rtStatus := getStatus()
    showStatus(ltStatus, @"ltMot")
    showStatus(rtStatus, @"rtMot")

PRI reportFaultStatus() | bLeftStatus, bRightStatus
    bLeftStatus, bRightStatus := getFaultStatus()
    showFaultStatus(bLeftStatus, @"ltMot", false)       ' false = only show if faulted
    showFaultStatus(bRightStatus, @"rtMot", false)

PRI showDriveStatesOnChange()
    reportDrvStatusOnChange()
    reportMotorStatusOnChange()
    reportMotorFaultOnChange()

PRI reportDrvStatusOnChange() | ltState, rtState
    ltState, rtState := getDriverState()
    if priorLtState <> ltState
        showDriverState(ltState, @"ltMot")
        priorLtState := ltState

    if priorRtState <> rtState
        showDriverState(rtState, @"rtMot")
        priorRtState := rtState

PRI reportMotorStatusOnChange() | ltStatus, rtStatus
    ltStatus, rtStatus := getStatus()
    if priorLtStatus <> ltStatus
        showStatus(ltStatus, @"ltMot")
        priorLtStatus := ltStatus

    if priorRtStatus <> rtStatus
        showStatus(rtStatus, @"rtMot")
        priorRtStatus := rtStatus

PRI reportMotorFaultOnChange() | bLeftStatus, bRightStatus
    bLeftStatus, bRightStatus := getFaultStatus()
    if priorLtFault <> bLeftStatus
        showFaultStatus(bLeftStatus, @"ltMot", true)       ' force output
        priorLtFault := bLeftStatus

    if priorRtFault <> bRightStatus
        showFaultStatus(bRightStatus, @"rtMot", true)
        priorRtFault := bRightStatus

DAT { debug strings }

    dsUnknown       BYTE    "dsUnk",0
    dsMOVING        BYTE    "dsMov",0
    dsHOLDING       BYTE    "dsHld",0
    dsOFF           BYTE    "dsOff",0
    dsOther         BYTE    "?ds0x"
    dsOtherVal      BYTE    "00-[CODE]?",0

    dcsUnknown      BYTE    "dcsUnk",0
    dcsSTOPPED      BYTE    "dcsSTOPPED",0
    dcsSPIN_UP      BYTE    "dcsSPIN_UP",0
    dcsAT_SPEED     BYTE    "dcsAT_SPEED",0
    dcsSPIN_DN      BYTE    "dcsSPIN_DN",0
    dcsSLOW_TO_CHG  BYTE    "dcsSLOW_TO_CHG",0
    dcsFAULTED      BYTE    "dcsFAULTED",0
    dcsESTOP        BYTE    "dcsESTOP",0
    dcsOther        BYTE    "?dcs0x"
    dcsOtherVal     BYTE    "00-[CODE]?",0

    pStatVal        LONG    0
    priorLtStatus   LONG    -1
    priorRtStatus   LONG    -1
    priorLtState    LONG    -1
    priorRtState    LONG    -1
    priorLtFault   LONG    -3
    priorRtFault   LONG    -3


PRI showDriverState(eState, pMsg)
    case eState
        DCS_Unknown:
            pStatVal := @dcsUnknown
        DCS_STOPPED:
            pStatVal := @dcsSTOPPED
        DCS_SPIN_UP:
            pStatVal := @dcsSPIN_UP
        DCS_AT_SPEED:
            pStatVal := @dcsAT_SPEED
        DCS_SPIN_DN:
            pStatVal := @dcsSPIN_DN
        DCS_SLOW_TO_CHG:
            pStatVal := @dcsSLOW_TO_CHG
        DCS_FAULTED:
            pStatVal := @dcsFAULTED
        DCS_ESTOP:
            pStatVal := @dcsESTOP
        other:
            placeAsciiDigits(@dcsOtherVal, eState)
            pStatVal := @dcsOther
    debug("- STATE ", zstr_(pMsg), ": ", zstr_(pStatVal))

PRI showStatus(eStatus, pMsg)
    case eStatus
        DS_Unknown:
            pStatVal := @dsUnknown
        DS_MOVING:
            pStatVal := @dsMOVING
        DS_HOLDING:
            pStatVal := @dsHOLDING
        DS_OFF:
            pStatVal := @dsOFF
        other:
            placeAsciiDigits(@dsOtherVal, eStatus)
            pStatVal := @dsOther
    debug("- STATUS ", zstr_(pMsg), ": ", zstr_(pStatVal))

PRI showFaultStatus(bStatus, pMsg, bForceOutput)
    if bStatus == true
        debug("- FAULT! ", zstr_(pMsg))
    elseif bStatus == false and bForceOutput == true
        debug("- no FAULT ", zstr_(pMsg))

PRI placeAsciiDigits(pStrBytes, byt) | hiNyb, lowNyb
        hiNyb := byt & $f0 >> 4 + $30
        if hiNyb > $39
            hiNyb += 7
        lowNyb := byt & $0f      + $30
        if lowNyb > $39
            lowNyb += 7
        BYTE [pStrBytes][0] := hiNyb
        BYTE [pStrBytes][1] := lowNyb


PRI MAX(a,b) : nMax
' return max of a or b
    nMax := (a > b) ? a : b

PRI distanceIn90ths(newPos, bIsLeftWheel) : n90ths | priorPos
    priorPos := (bIsLeftWheel) ? priorLtPos : priorRtPos
    if newPos == priorPos
        n90ths := 0
    elseif newPos < 0
        ' handle pos negative case
        if priorPos < 0
            '  -7 -> -9 = abs(-9) - abs(-7) = abs(2) = 2
            '  -11 -> -9 = abs(-9) - abs(-11) = abs(-2) = 2
            n90ths := abs(abs(newPos) - abs(priorPos))
        else
            '  9 -> -9 = 18 = abs(9) + abs(-9) = 18
            n90ths := abs(newPos) + abs(priorPos)
    else
        ' handle pos positive case
        if priorPos < 0
            ' -9 -> 6 = 6 + abs(-9) = 15
            ' -3 -> 6 = 6 + abs(-3) = 9
            n90ths := newPos + abs(priorPos)
        else
            ' 9 -> 6 = 6 - 9 = abs(-3) = 3
            ' 9 -> 12 = 12 - 9 = abs(3) = 3
            n90ths := abs(newPos - priorPos)
{
    if priorPos <> newPos
        if bIsLeftWheel
            debug("di90s-LT: ", sdec_long(newPos), sdec_long(priorPos), sdec_long(n90ths))
        else
            debug("di90s-RT: ", sdec_long(newPos), sdec_long(priorPos), sdec_long(n90ths))
'}
    if bIsLeftWheel
        priorLtPos := newPos
    else
        priorRtPos := newPos

CON { --- HDMI Debug Support --- }

CON { Constants for HDMI Debug }

    DBG_GROUPS_CT = 1
    DBG_MAX_VARS_IN_GROUP = 7

VAR { Data Structure for HDMI Debug }

    LONG    pTitlesAr[DBG_GROUPS_CT + 1]    ' first value is max vars
    LONG    pVarCtAr[DBG_GROUPS_CT]
    LONG    pNamesAr[DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP]
    LONG    pValsAr[DBG_GROUPS_CT*DBG_MAX_VARS_IN_GROUP]

DAT { Literals for HDMI Debug }

showHDMIDebug   LONG    FALSE

' user stearing data
'---+-----------+---+---+---+-------------------+---+---+---+---+---+-----------+
nameTitle1      BYTE    "Steering",0
name10          BYTE    "power",0
name11          BYTE    "direc.",0
name12          BYTE    "ltPwr",0
name13          BYTE    "rtPwr",0
name14          BYTE    "stpTck",0
name15          BYTE    "stpmSec",0
name16          BYTE    "Cutoff",0
nextAddr1
dataLen1        LONG    @nextAddr1 - @nameTitle1

PRI loadDisplayList() | nGrpOffset, nValsGrpOffset, nVarsInGroup
' do internal one-time setup of driver debug data
    nGrpOffset := 0
    nVarsInGroup := 7
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle1
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
    ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name10
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name11
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name12
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name13
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name14
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name15
    LONG[@pNamesAr][nValsGrpOffset + 6] := @name16
    LONG[@pValsAr][nValsGrpOffset + 0] := @rqstPower
    LONG[@pValsAr][nValsGrpOffset + 1] := @rqstDirection
    LONG[@pValsAr][nValsGrpOffset + 2] := @rqstLtPower
    LONG[@pValsAr][nValsGrpOffset + 3] := @rqstRtPower
    LONG[@pValsAr][nValsGrpOffset + 4] := @motorStopHallTicks
    LONG[@pValsAr][nValsGrpOffset + 5] := @motorStopMSecs
    LONG[@pValsAr][nValsGrpOffset + 6] := @userCutoff

    ' tell our table size to reader
    nGrpOffset := 1
    LONG[@pTitlesAr][nGrpOffset] := DBG_MAX_VARS_IN_GROUP

PUB getDebugData() : nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars | tmpAbsPtr
'' Return pointers to HDMI-debug data structures for this motor-object instance
    loadDisplayList()
    nGroups := DBG_GROUPS_CT
    pGroupTitles := @pTitlesAr         ' pStr = long[pTitlesAr][grpIdx]
    pGroupVarCts := @pVarCtAr          ' nNbrGrpVars = long[pVarCtAr][grpIdx]
    pGroupNames := @pNamesAr           ' pGrpNameAr = long[pNamesAr][grpIdx], pVarName = long[pNameAr][varIdx]  where varIdx is from 0 to nNbrGrpVars - 1
    pGroupVars := @pValsAr             ' pGrpLongVar = long[pValsAr][grpIdx][varIdx]  where varIdx is from 0 to nNbrGrpVars - 1
    if showHDMIDebug
        debug("* -------------")
        debug("* NAMEs SOURCE1: ", uhex_long(@nameTitle1), uhex_byte_array(@nameTitle1, dataLen1))
        debug("* -------------")
        debug("* Steer DL title: ", uhex_long(@pTitlesAr), uhex_long_array(@pTitlesAr, DBG_GROUPS_CT + 1))
        debug("* Steer DL VarCt: ", uhex_long(@pVarCtAr), uhex_long_array(@pVarCtAr, DBG_GROUPS_CT))
        debug("* Steer DL Names: ", uhex_long(@pNamesAr), uhex_long_array(@pNamesAr, DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP))
        debug("* Steer DL Values: ", uhex_long(@pValsAr), uhex_long_array(@pValsAr, DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP))
        debug("* -------------")
        debug("* Steer PARM values: ", uhex_long(@nGroups), uhex_long_array(@nGroups, 5))
        debug("* -------------")
        debug("* Steer Sent: ", udec(nGroups), uhex_long(pGroupTitles), uhex_long(pGroupNames), uhex_long(pGroupVarCts), uhex_long(pGroupVars))
        debug("* =============")



CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
