'' =================================================================================================
''
''   File....... isp_bldc_motor.spin2
''   Purpose.... Object providing control interface for a single BLDC motor
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Feb 2022
''   Updated.... 21 Jul 2022
''
'' =================================================================================================

CON { Public Interface Constants }

    ' Names of supported Motors
    #0, MOTR_6_5_INCH, MOTR_DOCO_4KRPM
    ' return value when user makes bad choice
    INVALID_MOTOR = -1

    '  ID where the P2 Eval Motor Board is plugged in (Enum)
    '    (Names of supported PinGroups)
    #0[16], PINS_P0_P15, PINS_P16_P31, PINS_P32_P47
    ' return value when user makes bad choice
    INVALID_PIN_BASE = -1

    ' Names of supported voltages
    '  Lipo battery sizes: 2s-7.4v, 3s-11.1v, 4s-14.8v, 5s-18.5v, 6s-22.2v, 7s-25.9v
    #0, PWR_Unknown, PWR_6p0V, PWR_7p4V, PWR_11p1V, PWR_12p0V, PWR_14p8V, PWR_18p5V, PWR_22p2V, PWR_24p0V
    ' return value when user makes bad choice
    INVALID_VOLTAGE = -1

    VALUE_NOT_SET = -1

    ' Driver Distance-Units Enum: (Millimeters, Centimeters, Inches, Feet, Meters, Kilometers, Miles)
    #0, DDU_Unknown, DDU_MM, DDU_CM, DDU_IN, DDU_FT, DDU_M, DDU_KM, DDU_MI

    ' Driver Rotation-Units Enum:
    #0, DRU_Unknown, DRU_HALL_TICKS, DRU_DEGREES, DRU_ROTATIONS

    ' Driver Time-Unit Enum:
    #0, DTU_Unknown, DTU_MILLISEC, DTU_SEC

    ' Driver Status Enum:
    #10, DS_Unknown, DS_MOVING, DS_HOLDING, DS_OFF

    ' Driver Control Stop-State Enum:
    #0, SM_Unknown, SM_FLOAT, SM_BRAKE


OBJ { objects / constants included by this object }

    user        :   "isp_bldc_motor_userconfig"     ' driver configuration
    distConv    :   "isp_dist_utils"                ' distance conversion utils

CON { test pins for LA measurement }

' -----------------------------------
' Logic Analyzer Instrumentation Code
' -----------------------------------
'{
    ' PIN_40 - PIN_47 - general LA header
    TEST_BASE_PIN = 40
    TEST_ALL_PINS = TEST_BASE_PIN addpins 7
    TEST_PIN_SENSE_LP = TEST_BASE_PIN + 0           ' LA ch0
    TEST_PIN_DRIVE_LP = TEST_BASE_PIN + 1           ' LA ch1
    TEST_PIN_MOTR_CTL_LP = TEST_BASE_PIN + 2        ' LA ch2
    TEST_PIN_DRIVE_LP2 = TEST_BASE_PIN + 3          ' LA ch3
    TEST_PIN_LP_TOGL = TEST_BASE_PIN + 4           ' LA ch4
    TEST_PIN_UNKNOWN = TEST_BASE_PIN + 5           ' LA ch4
'}
'{
    ' PIN 48, 49 our rot/360 R/P Sensor
    TEST_BASE2_PIN = 48
    TEST_ALL2_PINS = TEST_BASE2_PIN addpins 1
    TEST_PIN_RP_SNS1 = TEST_BASE2_PIN + 0
    TEST_PIN_RP_SNS2 = TEST_BASE2_PIN + 1
'}

DAT { misc time constants }
    ' time constants based on CPU freq
    ticks1ms    LONG    0                     '
    ticks1us    LONG    0                     '
    ticks10us   long    0                     '
    ticks10p23us  long    0                     '
    ticks15p36us long 0
    ticks20us   long    0                     '
    ticks24us   long    0                     '
    ticks50us   long    0                     '
    ticks500us  long    0                     ' 2 kHz
    ticks125ms  long    0                       ' 8 Hz
'    ticks31p25ms long   0                       ' 32 Hz
'    ticks15p625ms long   0                      ' 64 Hz
'    ticks7p813ms long   0                      ' 128 Hz
'    ticks750us  long    0                     '
'    ticks800us  long    0                     '

PUB null()

'' This is not a top-level object

PUB start(eMotorBasePin, eMotorVoltage) : ok | legalBase, fwdDegrees, revDegrees, ofsDegr, vFrame
'' Specify motor control board connect location for this motor and start the driver
        ' setup runtime constants
    ticks1ms   := (CLKFREQ / 1_000)
    ticks1us   := (CLKFREQ / 1_000_000)
    ticks10us  := (ticks1ms * 10) / 1_000
    ticks15p36us  := (ticks1ms * 1536) / 100_000
    ticks10p23us  := (ticks1ms * 1033) / 100_000
    ticks20us  := (ticks1ms * 20) / 1_000
    ticks24us  := (ticks1ms * 24) / 1_000
    ticks50us  := (ticks1ms * 50) / 1_000
    ticks500us := (ticks1ms * 500) / 1_000  ' phrased this way for better result
'    ticks750us := (ticks1ms * 750) / 1_000  '
'    ticks800us := (ticks1ms * 800) / 1_000  '
    ticks125ms := ticks1ms * 125
'    ticks31p25ms := (ticks1ms * 3125) / 100
'    ticks15p625ms := ((ticks31p25ms + 1) / 2) + 1
'    ticks7p813ms := ((ticks15p625ms + 1) / 2) + 1

    ' set up debug variables
    useDebug := FALSE
    showHDMIDebug := FALSE

    bResetSenseData := FALSE

    targetAngle := $FFFFFFFF    ' set to not used! (other values only used during testing)

    case user.MOTOR_TYPE
      MOTR_DOCO_4KRPM:
        ' 15 degrees per tic
        degrPerTic := 15
        hallTicsPerRotation := 24
      other:
        ' 4 degrees per tic
        degrPerTic := 4
        hallTicsPerRotation := 90

    fwdDegrees, revDegrees := offsetsForMotor(user.MOTOR_TYPE)
    offset_fwd  := fwdDegrees frac 360
    offset_rev  := revDegrees frac 360

    debug("MOT: ", udec(fwdDegrees), uhex_long(offset_fwd))
    debug("     ", udec(revDegrees), uhex_long(offset_rev))

    ' new build up our hall angle table for specific motor
    if user.MOTOR_TYPE == MOTR_6_5_INCH
        longmove(@hall_angles, @hltbAngles, 16)
    else
        longmove(@hall_angles, @hltbAngl4k, 16)

    ' new build up our position increment table for specific motor
    if user.MOTOR_TYPE == MOTR_6_5_INCH
        bytemove(@deltas, @deltas65, 64)
    else
        bytemove(@deltas, @deltas4k, 64)

' average is middle plus deflection for forward or reverse
'  responsiveness of motor to desire
'  middle value is angular diff and motor postion relative to hall position
'  deflection is direction and speed dependent

    ' setup driver parameters based on clock rate
    charge_time := ticks1us
    dead_gap    := (ticks1us * 260) / 1_000 ' (was OFFSET) 260 of these made into "value nS"
    pwm_limit   := (FRAME / 2) - (dead_gap  / 2)        'PWM duty hard limit 1/2 freq of PWM
    vFrame := FRAME
    ' .. and set up rest
    'offset_fwd  := 20 frac 360              ' 96 frac 360 (Doug's motor)
    'offset_rev  := 340 frac 360             ' 228 frac 360 (Doug's motor)
' orig higher power code used this
    duty_min    := 100 << 4 #> (dead_gap / 2) << 4
'    duty_min    := dead_gap << 4 #> dead_gap << 4
' Chip'snew code adjusted this, why?
'    duty_min    := 200 << 4 #> dead_gap << 4
    duty_max    := (pwm_limit  << 4) / 2 <# pwm_limit << 4      ' ok
    'duty_max    := ((pwm_limit  << 4) / 4) * 3 <# pwm_limit << 4    ' BAD
    'duty_max    := ((pwm_limit  << 4) / 8) * 5 <# pwm_limit << 4    ' BAD
' orig higher power code used this
    duty_up     := 18
    duty_dn     := 4
' Chip'snew code adjusted this, why?
'    duty_up     := 8   ' this drops our top-end power by 45%
'    duty_dn     := 2
    cfg_ctcks   := ticks500us               ' drive control loop period
    motr_ctcks  := ticks10p23us             ' motor control loop period
    stop_mode   := SM_FLOAT                 ' enum: [SM_FLOAT, SM_BRAKE]
    e_stop      := FALSE
    ' NOTES: 220410 -  at 18.5v 50_000 seems to fault a lot on gravel surface (i'm switching) to 40_000 and PWR_14p8V to see if motors stay operational
    ' NOTES: 220410 -  at 14.8V 40_000 seems to fault a lot on gravel surface (i'm switching) to 10_000 and PWR_14p8V to see if motors stay operational (5_000 dog slow)
    ' NOTES: 220413 -  at 14.8V 10_000 better on gravel surface  but too slow a ramp to 15_000 and PWR_14p8V to see if motors stay operational
    ' 50_000 for 12v & 18_5v
    ramp_fast   := 50_000                   ' 50k angle increment: add/sub this every 500 uSec to ramp up to speed, or ramp down to zer
    'ramp_slo    := 8_000                    ' 6.5 8k angle decrement: add/sub this every 500 uSec to ramp up from zero (slower initial ramp so we don't fault)
    ramp_slo    := 12_000                    ' 8k angle decrement: add/sub this every 500 uSec to ramp up from zero (slower initial ramp so we don't fault)

    motorIsReversed := FALSE    ' by default our motor direction is not reversed
    fault := FALSE

    ' init status variables
    loop_ticks := 0
    minDrvTics := 65535
    drv_state := DCS_Unknown

    maxSpeed := 75            ' [1-100] default 75
    maxSpeed4dist := 75      ' [1-100] default 75

    ' preset HDMI Monitor values
    tvMaxMmPerSec_x10 := 0
    tvMaxFps_x10 := 0
    tvMaxMPH_x10 := 0
    tvMaxkPH_x10 := 0

    userSelectedVolts := VALUE_NOT_SET    ' ensure we don't drive motor unles we know the users' voltage!

    debug("* init values ", udec_long(dead_gap), udec_long(pwm_limit), udec_long(vFrame), udec_long(duty_min), udec_long(duty_max))
    debug("*      values ", udec_long(duty_up), udec_long(duty_dn), udec_long(cfg_ctcks), udec_long(motr_ctcks))

    circInMM_x10 := distConv.circInMMforDiaInInchFloat(user.WHEEL_DIA_IN_INCH)
    if circInMM_x10 <> 0
        if user.MOTOR_TYPE == MOTR_6_5_INCH
            tickInMM_x10 := circInMM_x10 / 90
    else
        tickInMM_x10 := 0

    confgurePowerLimits(user.DRIVE_VOLTAGE)

    ' ensure we only use legal values
    legalBase := eMotorBasePin
    CASE eMotorBasePin
        PINS_P0_P15 :
        PINS_P16_P31 :
        PINS_P32_P47 :
        OTHER :
            legalBase := INVALID_PIN_BASE

    ' if legal base-pin then start cog
    if legalBase <> INVALID_PIN_BASE
        pinbase := legalBase        ' record base pin number
        params_ptr := @offset_fwd   ' point to driver variables
        setTargetAccel(0)           ' do NOT move at startup

        ok := motorCog := coginit(NEWCOG, @driver, @pinbase) + 1
        if motorCog == 0    ' did fail?
            debug("!! ERROR filed to start Motor Control task")
        else
            debug("* Motor COG #", sdec_(motorCog- 1))


PUB startSenseCog() : ok
'' Start the single motor sense task (tracks position of motor, distance traveled, etc.)
    ok := senseCog := cogspin(NEWCOG, taskPostionSense(), @taskStack) + 1
    if senseCog == 0    ' did fail?
        debug("!! ERROR filed to start Position Sense task")

PUB stop()
'' Stop cogs and release pins assigned to this motor

    if motorCog     ' stop motor drive
        cogstop(motorCog - 1)
        motorCog := 0

    ' Bottom 8 pins are sensed, top 8 are driven, so clear only the top 8
    pinclear(pinbase+8 addpins 7)

    if senseCog     ' stop motor reads
        cogstop(senseCog - 1)
        senseCog := 0

VAR { * user request values * }

    LONG    userSelectedVolts     ' remember the value specified by the user
    ' limits based on user voltage
    LONG    minFwdIncreAtPwr
    LONG    maxFwdIncreAtPwr
    LONG    minRevIncreAtPwr
    LONG    maxRevIncreAtPwr
    ' user max speeds
    LONG    maxSpeed            ' [1-100] default 75
    LONG    maxSpeed4dist       ' [1-100] default 75
    ' stop point in time based on passing mSec or tick counts
    LONG    motorStopMSecs      ' stop motor when we've passed this time in milliseconds
    LONG    motorStopHallTicks  ' stop motor when we've passed this tick count
    LONG    motorPower          ' remember last power requested
    LONG    motorIsReversed     ' T/F where T means we need to flip direction: FWD <-> REV
    ' debug control variables
    LONG    useDebug
    LONG    showHDMIDebug

    ' values specific to user selected motor
    LONG    degrPerTic
    LONG    hallTicsPerRotation


PUB setAcceleration(rate)
'' NOT WORKING: Limit Acceleration to {rate} where {rate} is [??? - ???] mm/s squared (default is ??? mm/s squared)

PUB setMaxSpeed(speed) | limitSpeed
'' Limit top-speed to {speed} where {speed} is [1 to 100]  (default is 75)
    limitSpeed :=  1 #> speed <# 100
    if limitSpeed <> speed
        debug("! WARNING: driveAtPower() speed out of range (corrected):", udec_long(speed), " - must be [1 to 100]")
    debug("setMaxSpeed() ", udec_long(limitSpeed))
    maxSpeed := limitSpeed      ' remember user value

PUB setMaxSpeedForDistance(speed) | limitSpeed4dist
'' Limit top-speed of driveDistance() operations to {speed} where {speed} is [1 to 100]  (default is 75)
    limitSpeed4dist :=  1 #> speed <# 100
    if limitSpeed4dist <> speed
        debug("! WARNING: driveAtPower() speed out of range (corrected):", udec_long(speed), " - must be [1 to 100]")
    debug("setMaxSpeedForDistance() ", udec_long(limitSpeed4dist))
    maxSpeed4dist := limitSpeed4dist      ' remember user value

PUB calibrate()
'' NOT WORKING: (we may need this?)
'' have motor drivers determine fixed-offset constants

PUB holdAtStop(bEnable)
'' Informs the motor control cog to actively hold position (bEnable=true) or coast (bEnable=false) at end of motion
    stop_mode := (bEnable) ? SM_BRAKE : SM_FLOAT

PUB resetTracking()
'' Resets the position tracking values returned by getDistance() and getRotations()
    posTrkHallTicks := 0    ' reset all of our trackers (they are incremented in sensor loop)
    waitms(200) ' values will clear in 125ms

PUB moveShaftToAngle(desiredAngle)
'' TEST: force motor to specific angle
    if targetAngle == $ffffffff
        targetAngle := desiredAngle
        debug("MOT: move to ", sdec(targetAngle))
    else
        debug("MOT: busy!!")

CON { --- Subsystem Control --- }

PUB driveForDistance(distance, distanceUnits)
'' Control the forward direction of this motor using the {distance} and {distanceUnits} inputs.
'' Turn the motor on then turn it off again after it reaches the specified {distance} in {distanceUnits} [DDU_IN, DDU_CM, DDU_FT or DDU_M].
'' AFFECTED BY:  setAcceleration(), setMaxSpeedForDistance(), holdAtStop()
    stopAfterDistance(distance, distanceUnits)
    driveAtPower(maxSpeed4dist)

PUB driveAtPower(power) | limitPwr, motorIncre, correctedPower
'' Control the speed and direction of this motor using the {power, [(-100) to 100]} input.
'' Turns the motor on at {power}.
'' AFFECTED BY:  setAcceleration(), setMaxSpeed(), holdAtStop()
    limitPwr :=  -100 #> power <# 100
    if limitPwr <> power
        debug("! WARNING: driveAtPower() power out of range (corrected):", udec_long(power), " - must be [-100 to +100]")
    debug("-MOT- driveAtPower() ", sdec_long(limitPwr), udec_long(ramp_fast), udec_long(ramp_slo))
    if limitPwr < 0
        ' handle reverse speed
        if limitPwr < 0 - maxSpeed
            limitPwr := 0 - maxSpeed    ' cap at max speed in reverse
    else
        ' handle forward speed
        if limitPwr > maxSpeed
            limitPwr := maxSpeed    ' cap at max speed forward
    motorPower := limitPwr
    correctedPower := (motorIsReversed) ? 0 - limitPwr : limitPwr
    motorIncre := incrementForPower(correctedPower)
    setTargetAccel(motorIncre)
    debug("-MOT- driveAtPower() EXIT ")

PUB stopAfterRotation(nRotationCount, eRotationUnits)
'' Stops the motor after it reaches {rotationCount} of {rotationUnits} [DRU_HALL_TICKS, DRU_DEGREES, or DRU_ROTATIONS].
'' USE WITH:  driveAtPower()
'' Will ABORT if {rotationCount} < 1
    if nRotationCount < 1
        debug("! ERROR: invalid RotationCount Value:", udec_long(nRotationCount), " - must be > 0!")
        ' FIXME: UNDONE should be more than ticks needed for spin-up/down ramps!!!
        abort

    ' convert rotation info to ticks (will stop at ticks limit)
    motorStopHallTicks := 0
    case eRotationUnits
        DRU_HALL_TICKS:
            motorStopHallTicks := nRotationCount
        DRU_DEGREES:
            ' ticks = degrees / 4 (6.5")
            motorStopHallTicks := nRotationCount / degrPerTic
        DRU_ROTATIONS:
            ' ticks = rotations * 90 (6.5")
            motorStopHallTicks := nRotationCount * hallTicsPerRotation
        other:
            debug("! ERROR: invalid rotationUnits Value:", udec_long(eRotationUnits))
            abort

PUB stopAfterDistance(nDistance, eDistanceUnits) | fValue
'' Stops the motor after either it reaches {distance} specified in {distanceUnits} [DDU_MM, DDU_CM, DDU_IN, DDU_FT, DDU_M].
'' USE WITH:  driveAtPower()
'' Will ABORT if {distance} < 1
    if nDistance < 1
        debug("! ERROR: invalid Distance Value:", udec_long(nDistance), " - must be > 0!")
        ' FIXME: UNDONE should be more than ticks needed for spin-up/down ramps!!!
        abort

    if user.WHEEL_DIA_IN_INCH == 0.0
        debug("! ERROR: stopAfterDistance() not supported when wheel dia. is unknown!")
        abort

    ' convert distance to ticks (will stop at ticks limit)
    case eDistanceUnits
        DDU_MM:
            motorStopHallTicks := (nDistance * 10) / tickInMM_x10
        DDU_CM:
            motorStopHallTicks := (nDistance * 10 * 10) / tickInMM_x10
        DDU_IN:
            fValue := distConv.fIn2mm(nDistance)
            motorStopHallTicks := trunc(fValue *. 10.0) / tickInMM_x10
        DDU_FT:
            fValue := distConv.fIn2mm(nDistance * 12)
            motorStopHallTicks := trunc(fValue *. 10.0) / tickInMM_x10
        DDU_M:
            motorStopHallTicks := (nDistance * 100 * 10) / tickInMM_x10
        other:
            debug("! ERROR: invalid distanceUnits Stop Value:", udec_long(eDistanceUnits))
            abort

PUB stopAfterTime(nTime, eTimeUnits) | timeNow
'' Stops the motor, after {time} specified in {timeUnits} [DTU_MILLISEC or DTU_SEC] has elapsed.
'' USE WITH:  driveAtPower()
'' Will ABORT if {time} < 1
    if nTime < 1
        debug("! ERROR: invalid nTime Value:", udec_long(nTime), " - must be > 0!")
        ' FIXME: UNDONE should be more than time needed for spin-up/down ramps!!!
        abort

    case eTimeUnits
        DTU_MILLISEC:
        DTU_SEC:
        other:
            debug("! ERROR: invalid timeUnits Value:", udec_long(eTimeUnits))
            abort

    if eTimeUnits == DTU_SEC
        timeNow := getms()
        motorStopMSecs := timeNow + (nTime * 1_000)
    else
        timeNow := getms()
        motorStopMSecs := timeNow + nTime

    if motorStopMSecs > 0
        debug("* stop motor at ", udec_long(motorStopMSecs), ", now: ", udec_long(timeNow))

PUB stopMotor()
'' Stops the motor, killing any motion that was still in progress
''  AFFECTED BY:holdAtStop()
    setTargetAccel(0)

PUB emergencyCutoff()
'' EMERGENCY-Stop - Immediately stop motor, killing any motion that was still in progress
    e_stop := TRUE
    setTargetAccel(0)
    debug("-- EMERGENCY STOP --")

PUB clearEmergency()
'' clear EMERGENCY-Stop - remove the need to stop!
    e_stop := FALSE
    debug("-- EMERGENCY -- CLEARED --")

PUB forwardIsReverse()
'' Call when we have two motors and one of them needs to be reversed
    motorIsReversed := TRUE

CON { --- Subsystem Status --- }

PUB getDistance(eDistanceUnits) : nDistanceInUnits | fMMpTick, fValue
'' Returns the distance in {distanceUnits} [DDU_MM, DDU_CM, DDU_IN, DDU_FT, DDU_M, DDU_KM, DDU_MI] travelled by this motor since last reset
    nDistanceInUnits := 0
    ' if we know the wheel diameter, then calculate value and return it
    if user.WHEEL_DIA_IN_INCH <> 0.0
        fMMpTick := float(circInMM_x10) /. 90.0 /. 10.0
        case eDistanceUnits
            DDU_MM:
                nDistanceInUnits := trunc(float(posTrkHallTicks) *. fMMpTick)
            DDU_CM:
                nDistanceInUnits := trunc(float(posTrkHallTicks) *. fMMpTick /. 10.0)
            DDU_IN:
                fValue := distConv.fMm2inFloat(float(posTrkHallTicks) *. fMMpTick)
                nDistanceInUnits := trunc(fValue +. 0.5)    ' rounded
            DDU_FT:
                fValue := distConv.fMm2inFloat(float(posTrkHallTicks) *. fMMpTick)
                nDistanceInUnits := trunc(fValue /. 12.0 +. 0.5)    ' in FT, rounded
            DDU_M:
                fValue := float(posTrkHallTicks) *. fMMpTick
                nDistanceInUnits := trunc(fValue /. 1000.0)    ' in M
            DDU_MI:
                fValue := distConv.fMm2inFloat(float(posTrkHallTicks) *. fMMpTick)
                nDistanceInUnits := trunc(fValue /. 5280.0 /. 12.0)    ' in MI
            DDU_KM:
                fValue := float(posTrkHallTicks) *. fMMpTick
                nDistanceInUnits := trunc(fValue /. 1000.0 /. 1000.0)    ' in kM
            other:
                debug("! ERROR: invalid distanceUnits Value:", udec_long(eDistanceUnits))
                abort

PUB getRotationCount(eRotationUnits) : rotationCount
'' Returns accumulated {rotationCount} in {rotationUnits} [DRU_DEGREES, DRU_ROTATIONS, or DRU_HALL_TICKS], since last reset, for this motor.
    rotationCount := -1
    case eRotationUnits
        DRU_HALL_TICKS:
            rotationCount := posTrkHallTicks
        DRU_DEGREES:
            ' degrees = ticks * 4 (6.5" wheel)
            rotationCount := posTrkHallTicks * degrPerTic
        DRU_ROTATIONS:
            ' rotations = ticks / 90 (6.5" wheel)
            rotationCount := posTrkHallTicks / hallTicsPerRotation
        other:
            debug("! ERROR: invalid rotationUnits Value:", udec_long(eRotationUnits))
            abort

PUB getPower() : nPower
'' Returns the last specified power value [-100 thru +100] for motor (will be zero if the motor is stopped).
    nPower := motorPower

PUB getCurrent() : nAmps, nWatts
'' Returns the latest current sense values
    nAmps := sense_i
    nWatts := 0

PUB getMaxSpeed() : nSpeed
'' Returns the last specified {maxSpeed}
    nSpeed := maxSpeed  ' return last specified user value

PUB getMaxSpeedForDistance() : nSpeed4dist
'' Returns the last specified {maxSpeedForDistance}
    nSpeed4dist := maxSpeed4dist  ' return last specified user value

PUB getStatus() : eStatus
'' Returns status of motor drive state for this motor: enumerated constant: DS_Unknown, DS_MOVING, DS_HOLDING, or DS_OFF
    if isStopped()
        if stop_mode == SM_BRAKE
            eStatus := DS_HOLDING
        elseif stop_mode == SM_FLOAT
            eStatus := DS_OFF
    elseif isReady()
        eStatus := DS_MOVING
    else
        eStatus := DS_Unknown

PUB getDriverState() : eDrvrState
'' Return Enum [DCS_*] value representing state of driver
    eDrvrState := drv_state

PUB getRawHallTicks() : nPos
'' Return the raw driver-maintained tick count
    nPos := pos

PUB isReady() : bState
'' Return T/F where T means the motor cog is running
    bState := (drv_state <> DCS_Unknown) ? true : false

PUB isStopped() : bState
'' Return T/F where T means the motor is stopped
    bState := (drv_state == DCS_STOPPED) ? true : false

PUB isFaulted() : bState
'' Return T/F where T means the motor has faulted
    bState := (drv_state == DCS_FAULTED) ? true : false

PUB isStarting() : bState
'' Return T/F where T means the motor is spinning up
    'bState := (drv_state == DCS_SPIN_UP or drv_state == DCS_AT_SPEED) ? true : false
    bState := (drv_state == DCS_SPIN_UP) ? true : false
    'if not bState
    '    debug("MOT not at spin_up but at ", udec(drv_state))

PUB isTurning() : bState
'' Return T/F where T means the motor is rotating
    bState := isReady() and not isStopped() and not isFaulted() and not isEmergency()

PUB isEmergency() : bState
'' Return T/F where T means the motor is emergency-stopped
    bState := (drv_state == DCS_ESTOP) ? true : false


CON { --- PUBLIC Utility Methods --- }

PUB validBasePinForChoice(userBasePin) : legalBasePin
'' VALIDATE users' base-pin choice returns legalBasePin or INVALID_PIN_BASE
    legalBasePin := userBasePin
    CASE userBasePin
        PINS_P0_P15 :
        PINS_P16_P31 :
        PINS_P32_P47 :
        OTHER :
            legalBasePin := INVALID_PIN_BASE

PUB validVoltageForChoice(userVoltage) : legalVoltage
'' VALIDATE users' voltage choice returns legalVoltage or INVALID_VOLTAGE
    legalVoltage := userVoltage
    if user.MOTOR_TYPE == MOTR_DOCO_4KRPM
        CASE userVoltage
            PWR_7p4V:
            PWR_11p1V:
            PWR_12p0V:
            PWR_14p8V:
            PWR_18p5V:
            PWR_22p2V:
            PWR_24p0V:
            ' NOTE 6.0V is not legal for this motor
            ' NOTE 25.9V is not legal for this motor
            OTHER:
                legalVoltage := INVALID_VOLTAGE
    else
        CASE userVoltage
            PWR_6p0V:
            PWR_7p4V:
            PWR_11p1V:
            PWR_12p0V:
            PWR_14p8V:
            PWR_18p5V:
            PWR_22p2V:
            PWR_24p0V:
            OTHER:
                legalVoltage := INVALID_VOLTAGE
    debug("*VAL* ", sdec_long(legalVoltage))

PUB validMotorForChoice(userMotor) : legalMotor
'' VALIDATE users' motor choice returns legalMotor or INVALID_MOTOR
    legalMotor := userMotor
    CASE userMotor
        MOTR_6_5_INCH:
        MOTR_DOCO_4KRPM:
        OTHER:
            legalMotor := INVALID_MOTOR
    debug("*VAL* ", sdec_long(legalMotor))

CON { --- TEST-USE ONLY Methods --- }

PUB testSetLimit(newMaxLimit)
'' TEST set override limit so we can characterize motor
    maxFwdIncreAtPwr := newMaxLimit
    maxRevIncreAtPwr := 0 - newMaxLimit
    minFwdIncreAtPwr := 0
    minRevIncreAtPwr := 0
    debug("MOT: new limits: ", sdec(maxFwdIncreAtPwr), sdec(maxRevIncreAtPwr))

PUB testSetFwdRevOffsets(newOfsDegr, bFwdIsInverse) | fwdDegrees, revDegrees
'' TEST set offsets so we can characterize motor current draw
    if bFwdIsInverse
        ' forward is the inverse of reverse (ex. docoEng.com motor)
        fwdDegrees := 360 - newOfsDegr
        revDegrees := newOfsDegr
    else
        ' reverse is the inverse of forward (ex. 6.5" wheel motor)
        fwdDegrees := newOfsDegr
        revDegrees := 360 - fwdDegrees

    offset_fwd  := fwdDegrees frac 360
    offset_rev  := revDegrees frac 360
    debug("MOT:  ", sdec(fwdDegrees), uhex_long(offset_fwd))
    debug(" (tst)", sdec(revDegrees), uhex_long(offset_rev))

PUB testGetResults() : nMaxRPM, maxTics, bDidFault
'' TEST return results of test pass
    nMaxRPM := maxRpm
    maxTics := tvMaxCntsInSec
    bDidFault := fault
    'debug("MOT: result: ", udec(nMaxRPM), udec(maxTics), sdec(bDidFault))

PUB testResetFault() | bDidFault
'' TEST reset our fault indicator that we tripped during test
    if fault
        setTargetAccel(0)
        fault := FALSE
        waitms(30) ' values will clear in 20ms but leave extra time to occur
        if not isStopped()
            debug("MOT: wait until motor resets...")
            repeat
                if isStopped()
                    quit
                else
                    waitms(2)
            if fault
                debug("* WAIT-fault-reset ended still-FAULT!")
    else
        debug("mE testResetFault() NOT faulted!?")

PUB testResetMaxValues()
'' TEST reset our fault indicator that we tripped during test
    bResetSenseData := TRUE
    waitms(200) ' values will clear in 125ms


PRI map(inValue, inMin, inMax, outMin, outMax) : nResult | slope
' Maps inValue in range inMin..inMax to new value in range outMin..outMax
    nResult := 0
    if inValue <> 0
        if (inValue > 0)
            ' treat positive values out-of-bounds
            if (inValue <= inMin)
                nResult := outMin
            elseif (inValue >= inMax)
                nResult :=  outMax
        elseif (inValue < 0)
            ' treat negative values out-of-bounds
            if (inValue >= inMin)
                nResult := outMin
            elseif (inValue <= inMax)
                nResult :=  outMax
        ' NOT  out-of-bounds, so scale the inValue
        if nResult == 0
            slope := (outMax - outMin) / (inMax - inMin)
            nResult := outMin + slope * (inValue - inMin)
    'debug("- map() ", sdec_long(inValue - inMin), sdec_long(inMin) , sdec_long(inMax), sdec_long(inMax - inMin))
    'debug("-       ", sdec_long(slope), sdec_long(outMin) , sdec_long(outMax), sdec_long(outMax - outMin))
    'debug("- map() ", sdec_long(inValue) , " --> ", sdec_long(nResult))

PRI incrementForPower(nUserPower) : nMotorIncre
' translate -100 to +100 value to Incre value needed by motor
    if userSelectedVolts == VALUE_NOT_SET
        abort

    if nUserPower < 0
        ' map REV request
        nMotorIncre := map(nUserPower, -1, -100, minRevIncreAtPwr, maxRevIncreAtPwr)
    elseif nUserPower > 0
        ' map FWD request
        nMotorIncre := map(nUserPower, +1, +100, minFwdIncreAtPwr, maxFwdIncreAtPwr)
    else
        ' this is a STOP request
        nMotorIncre := 0    ' stop!

PRI offsetsForMotor(eMotorType) : fwdDegrees, revDegrees | ofsDegr
    case eMotorType
      MOTR_DOCO_4KRPM:
        ' NOTES:
        ' 15 degrees per tic so +- 15 is our offset?
        if user.DRIVE_VOLTAGE == PWR_7p4V
            ofsDegr := 53   ' 52-54 best, 55 fault?!
        elseif user.DRIVE_VOLTAGE == PWR_11p1V
            ofsDegr := 53   ' 52-54 best, 55 fault?!
        elseif user.DRIVE_VOLTAGE == PWR_12p0V
            ofsDegr := 53   ' 52-54 best
        elseif user.DRIVE_VOLTAGE == PWR_14p8V
            ofsDegr := 54   ' 52-54 best
        elseif user.DRIVE_VOLTAGE == PWR_18p5V
            ofsDegr := 43   ' 41-43 best
        elseif user.DRIVE_VOLTAGE == PWR_22p2V
            ofsDegr := 54   ' 51-54 best
        elseif user.DRIVE_VOLTAGE == PWR_24p0V
            ofsDegr := 55   ' 52-56 best
        else
            ofsDegr := 52
        fwdDegrees := 360 - ofsDegr                 ' 0 is bad > 2A!
        'revDegrees := 310 ' 360 - fwdDegrees - 10  ' 360 - 60 '  360 - fwdDegrees
        revDegrees := ofsDegr                       ' vs. using 360?
      other:
        ' 4 degrees per tic, offset was actually 5 tics!
        '  or 20 degrees (0.0556 of rotation)
        ofsDegr := 20
        fwdDegrees := ofsDegr
        revDegrees := 360 - fwdDegrees

PRI confgurePowerLimits(userVoltage) | selectedPower
' set up our motor drive limits based upon the user configured Voltage selection
    selectedPower := validVoltageForChoice(userVoltage)
    debug("* ENTRY CFG ", sdec_long(selectedPower))
    if selectedPower == INVALID_VOLTAGE
        abort

    userSelectedVolts := VALUE_NOT_SET  ' preset
    minFwdIncreAtPwr := VALUE_NOT_SET
    maxFwdIncreAtPwr := VALUE_NOT_SET
    minRevIncreAtPwr := VALUE_NOT_SET
    maxRevIncreAtPwr := VALUE_NOT_SET

    if user.MOTOR_TYPE == MOTR_DOCO_4KRPM
        CASE selectedPower
            PWR_6p0V:
                ' doesn't/barely spin(s)
            PWR_7p4V:
                ' maxFwdIncreAtPwr := 282_000_000     ' newDrv Characterized: 100% anything above yields RPM 1_882, cts/sec 753
                maxFwdIncreAtPwr := 282_000_000     ' 100% anything above yields RPM 1640.0, cts/Sec 656, @0.11A
                maxRevIncreAtPwr := -282_000_000    ' 100% anything above yields RPM 1640.0, cts/Sec 656, @0.13A
                ' minFwdIncreAtPwr := 544_628         ' v+ Characterized: 100% anything lower yields NO rotation
            PWR_11p1V:
                ' maxFwdIncreAtPwr := 336_000_000     ' v+ Characterized: 100% anything above yields RPM 2_340, cts/sec 936
                ' maxFwdIncreAtPwr := 154_000_000     ' newDrv Characterized: 100% anything above yields RPM 4_294_967_295, cts/sec 441
                maxFwdIncreAtPwr := 335_000_000     ' 100% anything above yields RPM 2340.0, cts/Sec 936, @0.097A
                maxRevIncreAtPwr := -335_000_000    ' 100% anything above yields RPM 2340.0, cts/Sec 936, @0.102A
            PWR_12p0V:
                ' maxFwdIncreAtPwr := 335_000_000     ' newDrv Characterized: 100% anything above yields RPM 2_242, cts/sec 897
                ' maxFwdIncreAtPwr := 343_000_000     ' newDrv Characterized: 100% anything above yields RPM 2_295, cts/sec 918 : occ. fails
                maxFwdIncreAtPwr := 335_000_000     ' 100% anything above yields RPM 2060.0, cts/Sec 824, @0.074A
                maxRevIncreAtPwr := -335_000_000    ' 100% anything above yields RPM 2060.0, cts/Sec 824, @0.082A
                'minFwdIncreAtPwr := 544_628          ' v+ Characterized: 100% anything lower yields NO rotation
            PWR_14p8V:
                ' maxFwdIncreAtPwr := 296_000_000   ' v+ Characterized: 100% anything above yields RPM 2_060, cts/sec 824
                ' maxFwdIncreAtPwr := 344_500_000   ' v+ Characterized: 100% anything above yields RPM 2_400, cts/sec 960
                maxFwdIncreAtPwr := 344_500_000     ' 100% anything above yields RPM 2400.0!, cts/Sec 960, @0.6A
                maxRevIncreAtPwr := -344_500_000    ' 100% anything above yields RPM 2400.0!, cts/Sec 960, @0.6A
            PWR_18p5V:
                ' maxFwdIncreAtPwr := 296_000_000   ' v+ Characterized: 100% anything above yields RPM 2_060, cts/sec 824
                ' maxFwdIncreAtPwr := 379_500_000   ' v+ Characterized: 100% anything above yields RPM 2_640, cts/sec 1056 @0.7A fwd & rev (latest code changes but still above reliable)
                maxFwdIncreAtPwr := 377_500_000      ' 100% anything above yields RPM 2640.0, cts/Sec 1056, @0.6A
                maxRevIncreAtPwr := -377_500_000     ' 100% anything above yields RPM 2640.0, cts/Sec 1056, @0.7A
            PWR_22p2V:
                ' maxFwdIncreAtPwr := 372_500_000   ' v+ Characterized: 100% anything above yields RPM 2_600, cts/sec 1_040
                ' maxFwdIncreAtPwr := 370_000_000   ' v+ Characterized: 100% anything above yields RPM 2_580, cts/sec 1_032 (latest code changes but still above reliable)
                maxFwdIncreAtPwr := 370_000_000      ' 100% anything above yields RPM 2580.0, cts/Sec 1032, @0.620A
                maxRevIncreAtPwr := -370_000_000     ' 100% anything above yields RPM 2580.0, cts/Sec 1032, @0.4A
            PWR_24p0V:
                ' maxFwdIncreAtPwr := 372_500_000   ' v+ Characterized: 100% anything above yields RPM 2_600, cts/sec 1_040
                ' maxFwdIncreAtPwr := 380_000_000   ' v+ Characterized: 100% anything above yields RPM 2_660, cts/sec 1_064 (latest code changes but still above reliable)
                maxFwdIncreAtPwr := 380_000_000      ' 100% anything above yields RPM 2660.0, cts/Sec 1064, @0.620A
                maxRevIncreAtPwr := -380_000_000     ' 100% anything above yields RPM 2660.0, cts/Sec 1064, @0.640A
            other:
                debug("*???* Unknown: ", sdec_long(selectedPower))
                abort   ' SHOULD NEVER get here!
    else
        CASE selectedPower
            PWR_6p0V:
            PWR_7p4V:
            PWR_11p1V:
                maxFwdIncreAtPwr := 90_000_000      ' anything above yields RPM 165.3, cts/Sec 248 (until fault at 170.6 256)
                maxRevIncreAtPwr := -90_000_000     ' anything above yields RPM 165.3, cts/Sec 248 (until fault at 170.6 256)
            PWR_12p0V:
                maxFwdIncreAtPwr := 97_000_000      ' anything above yields RPM 181.3, cts/Sec 272 (until fault at 186.6 280)
                maxRevIncreAtPwr := -97_000_000     ' anything above yields RPM 181.3, cts/Sec 272 (until fault at 186.6 280)
            PWR_14p8V:
                maxFwdIncreAtPwr := 120_000_000     ' anything above yields RPM 224.0, cts/Sec 336 (until fault at 229.8 344)
                maxRevIncreAtPwr := -120_000_000    ' anything above yields RPM 224.0, cts/Sec 336 (until fault at 229.8 344)
            PWR_18p5V:
                maxFwdIncreAtPwr := 147_000_000     ' anything above yields RPM 272.0, cts/Sec 408 (until fault at 277.3 416)
                maxRevIncreAtPwr := -147_000_000    ' anything above yields RPM 272.0, cts/Sec 408 (until fault at 277.3 416)
            PWR_22p2V:
                maxFwdIncreAtPwr := 172_000_000     ' anything above yields RPM 320.0, cts/Sec 480 (until fault at 325.3 480)
                maxRevIncreAtPwr := -172_000_000    ' anything above yields RPM 320.0, cts/Sec 480 (until fault at 325.3 480)
            PWR_24p0V:
                maxFwdIncreAtPwr := 172_000_000     ' FAKE above yields RPM 320.0, cts/Sec 480 (until fault at 325.3 480)
                maxRevIncreAtPwr := -172_000_000    ' FAKE above yields RPM 320.0, cts/Sec 480 (until fault at 325.3 480)
            other:
                debug("*???* Unknown: ", sdec_long(selectedPower))
                abort   ' SHOULD NEVER get here!

    if maxFwdIncreAtPwr <> VALUE_NOT_SET
        userSelectedVolts := selectedPower
        minFwdIncreAtPwr := 544_628           ' anything below yields NO rotation
        minRevIncreAtPwr := 0 - minFwdIncreAtPwr
    debug("* EXIT 2 CFG ", sdec_long(userSelectedVolts))

PRI setTargetAccel(nTgtIncr)
    targetIncre := nTgtIncr
    debug("-MOT- ", sdec_long(targetIncre))
    tvTargetIncreInM := nTgtIncr / 10_000

DAT { --- MOTOR TYPE TABLES --- }

' These table represent contants for use in BLDC pasm driver
'  tables specific to a given motor are copied into pasm driver image
'  before the driver is started
'
' old bit shift up by 3 then new bits
'   old is outer index
'   new is inner index
deltas65    BYTE    0, 0, 0, 0, 0, 0, 0, 0  ' Hall-effect-sensor position deltas from (old<<3 | new)
            BYTE    0, 0, 0,-1, 0, 1, 0, 0
            BYTE    0, 0, 0, 1, 0, 0,-1, 0
            BYTE    0, 1,-1, 0, 0, 0, 0, 0
            BYTE    0, 0, 0, 0, 0,-1, 1, 0
            BYTE    0,-1, 0, 0, 1, 0, 0, 0
            BYTE    0, 0, 1, 0,-1, 0, 0, 0
            BYTE    0, 0, 0, 0, 0, 0, 0, 0

deltas4k    BYTE    0, 0, 0, 0, 0, 0, 0, 0  ' old=0 - Hall-effect-sensor position deltas from (old<<3 | new)
            BYTE    0, 0, 0,-1, 0, 1, 0, 0  ' old=1
            BYTE    0, 0, 0, 1, 0, 0,-1, 0  ' old=2
            BYTE    0, 1,-1, 0, 0, 0, 0, 0  ' old=3
            BYTE    0, 0, 0, 0, 0,-1, 1, 0  ' old=4
            BYTE    0,-1, 0, 0, 1, 0, 0, 0  ' old=5
            BYTE    0, 0, 1, 0,-1, 0, 0, 0  ' old=6
            BYTE    0, 0, 0, 0, 0, 0, 0, 0  ' old=7

'   amount of rotation within hall cycle - 6.5" wheel
hltbAngles  LONG    0           '-%000- can't happen forward-direction table
            LONG    0 frac 6    '%001
            LONG    4 frac 6    '%010
            LONG    5 frac 6    '%011
            LONG    2 frac 6    '%100
            LONG    1 frac 6    '%101
            LONG    3 frac 6    '%110
            LONG    0           '-%111- can't happen

hltbAngle2  LONG    0           '-%000- can't happen - reverse-direction table
            LONG    5 frac 6    '%001
            LONG    3 frac 6    '%010
            LONG    4 frac 6    '%011
            LONG    1 frac 6    '%100
            LONG    0 frac 6    '%101
            LONG    2 frac 6    '%110
            LONG    0           '-%111- can't happen


'   amount of rotation within hall cycle - docoEng.com 4kRPM, 24V
hltbAngl4k  LONG    0           '-%000- can't happen - forward-direction table
            LONG    5 frac 6    '%001
            LONG    3 frac 6    '%010
            LONG    4 frac 6    '%011
            LONG    1 frac 6    '%100
            LONG    0 frac 6    '%101
            LONG    2 frac 6    '%110
            LONG    0           '-%111- can't happen

hltbAngl4k2 LONG    0           '-%000- can't happen - reverse-direction table
            LONG    0 frac 6    '%001
            LONG    4 frac 6    '%010
            LONG    5 frac 6    '%011
            LONG    2 frac 6    '%100
            LONG    1 frac 6    '%101
            LONG    3 frac 6    '%110
            LONG    0           '-%111- can't happen

CON { --- HDMI Debug Support --- }

CON { Constants for HDMI Debug }

    DBG_GROUPS_CT = 3
    DBG_MAX_VARS_IN_GROUP = 7

VAR { * Data Structure for HDMI Debug * }

    LONG    pTitlesAr[DBG_GROUPS_CT + 1]    ' first value is max vars
    LONG    pVarCtAr[DBG_GROUPS_CT]
    LONG    pNamesAr[DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP]
    LONG    pValsAr[DBG_GROUPS_CT*DBG_MAX_VARS_IN_GROUP]

DAT { Literals for HDMI Debug }

' motor drive data
    nameTitle1  BYTE    "Motor Drive",0
    name10      BYTE    "hall",0
    name11      BYTE    "pos",0
    name12      BYTE    "duty",0
    name13      BYTE    "err",0
    name14      BYTE    "loopTicks",0
    name15      BYTE    "state",0
    name16      BYTE    "FAULT",0
    nextAddr1
    dataLen1     LONG    @nextAddr1 - @nameTitle1

' motor sense data
    nameTitle2  BYTE    "Motor Sense",0
    name20      BYTE    "RPM 10ths",0
    name21      BYTE    "RPM",0
    name22      BYTE    "cnts/sec",0
    name23      BYTE    "delta",0
    name24      BYTE    "Amp",0
    name25      BYTE    "maxAmp",0
    name26      BYTE    "RPMb10ths",0
    nextAddr2
    dataLen2     LONG    @nextAddr2 - @nameTitle2

' motor rate  data
    nameTitle3  BYTE    "Motor Rate(.1)",0
    name30      BYTE    "RPM",0
    name31      BYTE    "cnts/sec",0
    name32      BYTE    "f/s",0
    name33      BYTE    "MPH",0
    name34      BYTE    "kM/H",0
    name35      BYTE    "mm/s",0
    name36      BYTE    "Angl/10k",0
    nextAddr3
    dataLen3     LONG    @nextAddr3 - @nameTitle3

PRI loadDisplayList() | nGrpOffset, nValsGrpOffset, nVarsInGroup
' do internal one-time setup of driver debug data
    nGrpOffset := 0
    nVarsInGroup := 7
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle1
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
    ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name10
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name11
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name12
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name13
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name14
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name15
    LONG[@pNamesAr][nValsGrpOffset + 6] := @name16
    LONG[@pValsAr][nValsGrpOffset + 0] := @hall
    LONG[@pValsAr][nValsGrpOffset + 1] := @pos
    LONG[@pValsAr][nValsGrpOffset + 2] := @duty
    LONG[@pValsAr][nValsGrpOffset + 3] := @err
    LONG[@pValsAr][nValsGrpOffset + 4] := @loop_ticks
    LONG[@pValsAr][nValsGrpOffset + 5] := @drv_state
    LONG[@pValsAr][nValsGrpOffset + 6] := @fault

    nGrpOffset := 1
    nVarsInGroup := 7
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle2
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
     ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP ' mult by vars in prior group
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name20
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name21
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name22
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name23
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name24
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name25
    LONG[@pNamesAr][nValsGrpOffset + 6] := @name26
    LONG[@pValsAr][nValsGrpOffset + 0] := @tvRpm_x10
    LONG[@pValsAr][nValsGrpOffset + 1] := @rpm
    LONG[@pValsAr][nValsGrpOffset + 2] := @cntsInSec
    LONG[@pValsAr][nValsGrpOffset + 3] := @deltaTicks
    LONG[@pValsAr][nValsGrpOffset + 4] := @sense_i
    LONG[@pValsAr][nValsGrpOffset + 5] := @tvMaxSenseI
    LONG[@pValsAr][nValsGrpOffset + 6] := @tv360rpm_x10

    nGrpOffset := 2
    nVarsInGroup := 7
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle3
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
     ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP ' mult by vars in prior group
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name30
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name31
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name32
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name33
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name34
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name35
    LONG[@pNamesAr][nValsGrpOffset + 6] := @name36
    LONG[@pValsAr][nValsGrpOffset + 0] := @maxRpm
    LONG[@pValsAr][nValsGrpOffset + 1] := @tvMaxCntsInSec
    LONG[@pValsAr][nValsGrpOffset + 2] := @tvMaxFps_x10
    LONG[@pValsAr][nValsGrpOffset + 3] := @tvMaxMPH_x10
    LONG[@pValsAr][nValsGrpOffset + 4] := @tvMaxkPH_x10
    LONG[@pValsAr][nValsGrpOffset + 5] := @tvMaxMmPerSec_x10
    LONG[@pValsAr][nValsGrpOffset + 6] := @tvTargetIncreInM

    ' tell our table size to reader
    nGrpOffset := 3
    LONG[@pTitlesAr][nGrpOffset] := DBG_MAX_VARS_IN_GROUP

PUB getDebugData() : nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars | tmpAbsPtr
'' Return pointers to HDMI-debug data structures for this motor-object instance
    loadDisplayList()
    nGroups := DBG_GROUPS_CT
    pGroupTitles := @pTitlesAr         ' pStr = long[pTitlesAr][grpIdx]
    pGroupVarCts := @pVarCtAr          ' nNbrGrpVars = long[pVarCtAr][grpIdx]
    pGroupNames := @pNamesAr           ' pGrpNameAr = long[pNamesAr][grpIdx], pVarName = long[pNameAr][varIdx]  where varIdx is from 0 to nNbrGrpVars - 1
    pGroupVars := @pValsAr             ' pGrpLongVar = long[pValsAr][grpIdx][varIdx]  where varIdx is from 0 to nNbrGrpVars - 1
    if showHDMIDebug
        debug("* -------------")
        debug("* MOTR DAT values: ", uhex_long(@hall), uhex_long_array(@hall, 4))
        debug("* MOTR VAR values: ", uhex_long(@tvRpm_x10), uhex_long_array(@tvRpm_x10, 4))
        debug("* NAMEs SOURCE1: ", uhex_long(@nameTitle1), uhex_byte_array(@nameTitle1, dataLen1))
        debug("* NAMEs SOURCE2: ", uhex_long(@nameTitle2), uhex_byte_array(@nameTitle2, dataLen2))
        debug("* NAMEs SOURCE3: ", uhex_long(@nameTitle3), uhex_byte_array(@nameTitle3, dataLen3))
        debug("* -------------")
        debug("* MOTR DL title: ", uhex_long(@pTitlesAr), uhex_long_array(@pTitlesAr, DBG_GROUPS_CT + 1))
        debug("* MOTR DL VarCt: ", uhex_long(@pVarCtAr), uhex_long_array(@pVarCtAr, DBG_GROUPS_CT))
        debug("* MOTR DL Names: ", uhex_long(@pNamesAr), uhex_long_array(@pNamesAr, DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP))
        debug("* MOTR DL Values: ", uhex_long(@pValsAr), uhex_long_array(@pValsAr, DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP))
        debug("* -------------")
        debug("* MOTR PARM values: ", uhex_long(@nGroups), uhex_long_array(@nGroups, 5))
        debug("* -------------")
        debug("* MOTR Sent: ", udec(nGroups), uhex_long(pGroupTitles), uhex_long(pGroupNames), uhex_long(pGroupVarCts), uhex_long(pGroupVars))
        debug("* =============")


CON { -- TASK position tracking -- }
' Sense Constants
    ' at 125 ms
    SENSE_LOOP_HZ = 8
    ' at 31.25 ms
    'SENSE_LOOP_HZ = 32
        ' at 15.625 ms
    'SENSE_LOOP_HZ = 64
    ' at 7.813 ms
    'SENSE_LOOP_HZ = 128

  STACK_SIZE_LONGS = 48
  R360_WINDOW_SIZE = 5
  HALL_WINDOW_SIZE = SENSE_LOOP_HZ

VAR { * sense buffer and stack arrays * }
    LONG    taskStack[STACK_SIZE_LONGS]
    LONG    bResetSenseData

    ' summing sense values at 1/8 sec period
    LONG    hallCountsWindow[SENSE_LOOP_HZ]
    LONG    hallWinIndex
    LONG    hallWinEntryCt
    LONG    hallCntsIn8thSec
    LONG    hallWindowSum
    ' summing 360 sensor values at 1 sec period
    LONG    r360CountsWindow[R360_WINDOW_SIZE]
    LONG    r360WinIndex
    LONG    r360WinEntryCt
    LONG    r360degrPerSec
    LONG    r360WindowSum

PRI resetWindowAccumulators()
' reset our window accumulator data
    longfill(@hallCountsWindow, 0, HALL_WINDOW_SIZE) ' zero our windowed accum
    longfill(@r360CountsWindow, 0, R360_WINDOW_SIZE) ' zero our windowed accum
    hallWinEntryCt := hallWindowSum := hallWinIndex := 0
    r360WinEntryCt := r360WindowSum := r360WinIndex := 0
    r360degrPerSec := hallCntsIn8thSec := 0

PRI taskPostionSense() | senseStartTicks, fValue, fFps, timeNow, eStopCtr,  loopCtr
' TASK: every 1/8 Sec (8Hz) read motor posn and calculate RPM and countOf90ths/Sec

    eStopCtr := tvMaxRpmIn10ths := tvMaxCntsInSec := tvMaxMmPerSec_x10 := tvMaxSenseI := 0
    prioro8thSecPos := pos  ' reset by adopting current value
    r360degrPerSec := tv360rpm_x10 := tv360rpm := 0
    r360WinEntryCt := r360WindowSum := r360WinIndex := 0

    ' -----------------------------------
    ' Logic Analyzer Instrumentation Code
    ' -----------------------------------
'{
    pinlow(TEST_PIN_SENSE_LP)

    ' configure our R/P sensor pins
    pinfloat(TEST_ALL2_PINS)    ' set to inputs
    ' configure for quadrature A+B X=run continuous, reset Y
    pinstart(TEST_PIN_RP_SNS1, P_QUADRATURE | P_PLUS1_B, 0, 0)
    'pinhigh(TEST_PIN_RP_SNS1)     ' enable
'}

    repeat
        loopCtr++
        ' if just starting up (or MOTOR FAULT), reset our tracker
        if drv_state == DCS_FAULTED or senseStartTicks == 0 or bResetSenseData
            resetWindowAccumulators()
            tvMaxFps_x10 := tvMaxMPH_x10 := tvMaxkPH_x10 := 0
            tvMaxRpmIn10ths := tvMaxCntsInSec := tvMaxMmPerSec_x10 := 0
            tv360rpm_x10 := tv360rpm := 0
            prioro8thSecPos := pos  ' reset by adopting current value
            posTrkHallTicks := 0
            tvMaxSenseI := 0
            eStopCtr := 0
            if bResetSenseData
                bResetSenseData := FALSE

        senseStartTicks := getct()

    ' -----------------------------------
    ' Logic Analyzer Instrumentation Code
    ' -----------------------------------
'{
        pinhigh(TEST_PIN_SENSE_LP)
'}

        hallCntsIn8thSec := absDistanceInTics(pos, prioro8thSecPos) ' Read the next sensor value
        prioro8thSecPos := pos                              ' save prior

    ' -----------------------------------
    ' Logic Analyzer Instrumentation Code
    ' -----------------------------------
'{
        ' accum our fast & slow windowed values
        if loopCtr +// SENSE_LOOP_HZ == 0             ' once every second compute slow cts in case we are slow
            ' ---------------------------------------------------------------------------------
            ' Capture 360 Sensor data
            '
            r360degrPerSec := abs(rqpin(TEST_PIN_RP_SNS1) sar 2)  ' divide by 4 to get degrees
            'debug("MTR: ", sdec(r360degrPerSec))
            ' reset reader
            pinfloat(TEST_PIN_RP_SNS1)    ' set to input
            pinhigh(TEST_PIN_RP_SNS1)     ' set to output

            r360WindowSum -= LONG[@r360CountsWindow][r360WinIndex]          ' Remove the oldest entry from the sum
            long [@r360CountsWindow][r360WinIndex] := r360degrPerSec      ' place the newest reading into the window
            r360WindowSum += r360degrPerSec                           ' Add the newest reading to the sum
            r360WinIndex := (r360WinIndex + 1) +// R360_WINDOW_SIZE          ' Increment the index, and wrap to 0 if it exceeds the window size
            if r360WinEntryCt < R360_WINDOW_SIZE                         ' incr number of samples in sum until is window size
                r360WinEntryCt++

            'tv360rpm_x10 := ((r360WindowSum / r360WinEntryCt) * 60) / 36
            tv360rpm_x10 := (r360degrPerSec * 60) / 36
            tv360rpm := tv360rpm_x10 / 10
            '
            ' ---------------------------------------------------------------------------------
'}

        ' accum our windowed values
        hallWindowSum -= LONG[@hallCountsWindow][hallWinIndex]          ' Remove the oldest entry from the sum
        long [@hallCountsWindow][hallWinIndex] := hallCntsIn8thSec      ' place the newest reading into the window
        hallWindowSum += hallCntsIn8thSec                           ' Add the newest reading to the sum
        hallWinIndex := (hallWinIndex + 1) +// HALL_WINDOW_SIZE          ' Increment the index, and wrap to 0 if it exceeds the window size
        if hallWinEntryCt < HALL_WINDOW_SIZE                         ' incr number of samples in sum until is window size
            hallWinEntryCt++
        cntsInSec := hallWindowSum          ' moving average, scaled
        posTrkHallTicks += hallCntsIn8thSec

        tvRpm_x10 := ((cntsInSec * 60) * 10) / hallTicsPerRotation
        rpm := tvRpm_x10 / 10

        tvMaxRpmIn10ths := MAX(tvRpm_x10, tvMaxRpmIn10ths)
        maxRpm := tvMaxRpmIn10ths / 10
        tvMaxCntsInSec := MAX(cntsInSec, tvMaxCntsInSec)

        tvMaxSenseI := MAX(sense_i, tvMaxSenseI)

        if user.MOTOR_TYPE == MOTR_6_5_INCH
            ' pos is in hall-steps of 4Degr each.
            ' circumference of wheel is in mm x10
            '   degrees of rotation is cntsInSec * 4
            '   number of rotations is degrees / 360
            '   dist in mm is (circInMM_x10 * rotations) / 10
            mmPerSec_x10 := (((cntsInSec * 4) * circInMM_x10) / 360)
            ftPerSec_x10 := distConv.mmps2fps(mmPerSec_x10 * 10)
            kmh_x10 := distConv.mmps2kmh(mmPerSec_x10 * 10)
            mph_x10 := distConv.fps2mph(ftPerSec_x10)

            tvMaxMmPerSec_x10 := MAX(mmPerSec_x10, tvMaxMmPerSec_x10)
            tvMaxFps_x10 := MAX(ftPerSec_x10, tvMaxFps_x10)
            tvMaxMPH_x10 := MAX(mph_x10, tvMaxMPH_x10)
            tvMaxkPH_x10 := MAX(kmh_x10, tvMaxkPH_x10)

        ' if user set time/distance to stop then stop if we are past the time or distance
        if motorStopMSecs > 0
            timeNow := getms()
            if timeNow > motorStopMSecs
                setTargetAccel(0)
                motorStopMSecs := 0 ' and clear user request
        elseif motorStopHallTicks > 0
            if posTrkHallTicks > motorStopHallTicks
                setTargetAccel(0)
                motorStopHallTicks := 0 ' and clear user request

        deltaTicks := getct() - senseStartTicks

        ' iff driver reports e-stop then clear the emergency stop request
        '  user will request it again if needed
        ' NOTE: we leave e_stop set for at least 1/8 second before clearing!
        if drv_state == DCS_ESTOP && eStopCtr == 0
            eStopCtr++
        elseif drv_state == DCS_ESTOP && eStopCtr > 0
            e_stop := FALSE
            eStopCtr := 0

    ' -----------------------------------
    ' Logic Analyzer Instrumentation Code
    ' -----------------------------------
'{
        pinlow(TEST_PIN_SENSE_LP)
'}

        ' code uses about 1_880 ticks. This is little over 9 uS  @200MHz clock
        '   wait remainder of 125 mSec before next sample
        waitct(senseStartTicks + ticks125ms)    ' wait to create "sense" time-base

PRI MAX(a,b) : nMax
' return max of a or b
    nMax := (a > b) ? a : b

PRI absDistanceInTics(newPos, priorPos) : nHallTics
    if newPos == priorPos
        nHallTics := 0
    elseif newPos < 0
        ' handle new-negative case
        if priorPos < 0
            '  -7 -> -9 = abs(-9) - abs(-7) = abs(2) = 2
            '  -11 -> -9 = abs(-9) - abs(-11) = abs(-2) = 2
            nHallTics := abs(abs(newPos) - abs(priorPos))
        else
            '  9 -> -9 = 18 = abs(9) + abs(-9) = 18
            nHallTics := abs(newPos) + abs(priorPos)
    else
        ' handle new-positive case
        if priorPos < 0
            ' -9 -> 6 = 6 + abs(-9) = 15
            ' -3 -> 6 = 6 + abs(-3) = 9
            nHallTics := newPos + abs(priorPos)
        else
            ' 9 -> 6 = 6 - 9 = abs(-3) = 3
            ' 9 -> 12 = 12 - 9 = abs(3) = 3
            nHallTics := abs(newPos - priorPos)

CON { --- The Motor driver --- }

CON { driver interface Constants}

    '  DCS_STOPPED          - motor is stopped
    '  DCS_SPIN_UP          - motor is ramping up to speed, then will be at AT_SPEED
    '  DCS_AT_SPEED         - motor is holding at speed
    '  DCS_SPIN_DN          - motor is stopping, then will be at STOPPED
    '  DCS_SLOWING_DN       - motor is slowing down (just a speed change), then will be at AT_SPEED
    '  DCS_SLOW_TO_CHG      - motor is slowing down to change direction, then will be SPEEDING_UP
    '  DCS_FAULTED          - motor faulted (couldn't drive to requested speed)
    '  DCS_ESTOP            - motor in emergency stop (external stop requested)
    '
    #0, DCS_Unknown, DCS_STOPPED, DCS_SPIN_UP, DCS_AT_SPEED, DCS_SPIN_DN, DCS_SLOWING_DN, DCS_SLOW_TO_CHG, DCS_FAULTED, DCS_ESTOP

CON { driver internal Constants}

'44KHz seems to be sweetspot for DocoEng Motor
    FRAME   = 6136             ' 44.00 KHz: (---) 1 ADC sample = 1 PWM frame, divide by two for triangle PWM

    DRVR_STATUS_LONGS_COUNT     = 14
    DRVR_PARAMS_LONGS_COUNT     = 14

VAR { * Data Structure for PASM Driver * }

  ' remember these are zeroed at run time
    LONG    motorCog                            ' record ID of cog we start (0 = not started)
    LONG    senseCog                            ' record ID of cog we start (0 = not started)

    LONG    maxDrvTics                          ' accumulators for study of driver
    LONG    minDrvTics

    ' -------------------------------------
    ' VALUES passed to driver at startup
    '
    ' / ----------------------------
    LONG    pinbase                             ' 1 long                must set initially
    LONG    params_ptr                          ' 1 long                must set initially
    LONG    targetAngle                         ' 1 long                TEST used during testing
    LONG    targetIncre                         ' 1 long                must set to cause motion
    ' \ ----------------------------

    ' -------------------------------------
    ' VALUES copied from driver each cycle
    ' 14 (DRVR_STATUS_LONGS_COUNT) longs come from driver, the 15th, "fault" also from driver but only when happens
    '
    ' / ----------------------------
    LONG    drive_u, drive_v, drive_w           ' 3 sequential longs    returns data continually
    LONG    sense_u, sense_v, sense_w, sense_i  ' 4 sequential longs    returns data continually
    LONG    hall, pos                           ' 2 sequential longs    returns data continually
    LONG    duty, err                           ' 2 sequential longs    returns data continually
    LONG    loop_ticks                          ' 1 sequential long     returns control loop duration in ticks continually
    LONG    loop_ctcks                          ' 1 sequential long     returns drive loop duration in ticks continually
    LONG    drv_state                           ' enum [DCS_STOPPED, DCS_SPIN_UP, DCS_AT_SPEED, DCS_SPIN_DN]
    ' \ ----------------------------
    LONG    fault                               ' 1 sequential long     written to 1 on fault (pins are floated when this happens)

VAR { * Data for Motor Position Tracking * }

    '  ----- HDMI monitored! ----
    LONG    tvRpm_x10
    LONG    rpm
    LONG    maxRpm
    LONG    cntsInSec
    LONG    deltaTicks
    LONG    tvMaxRpmIn10ths
    LONG    tvMaxFps_x10
    LONG    tvMaxMPH_x10
    LONG    tvMaxkPH_x10
    LONG    tvMaxMmPerSec_x10
    LONG    tvMaxCntsInSec
    LONG    tvTargetIncreInM
    LONG    tvMaxSenseI
    LONG    tv360rpm_x10
    LONG    tv360rpm
    '  --------------------------
    LONG    prioro8thSecPos
    LONG    mmPerSec_x10
    LONG    ftPerSec_x10
    LONG    kmh_x10
    LONG    mph_x10
    '  --------------------------
    LONG    posTrkHallTicks
    LONG    circInMM_x10
    LONG    tickInMM_x10


VAR  {  Motor Parameters  }

' -----------------------------------
' VALUES copied to driver each cycle
' -----------------------------------
' TABLE of  14 (DRVR_PARAMS_LONGS_COUNT) parameters the pasm2 driver reads every cycle
    LONG    offset_fwd      ' 96 frac 360 (Doug's motor)
    LONG    offset_rev      ' 228 frac 360 (Doug's motor)
    LONG    duty_min        ' was 100 << 4 #> OFFSET << 4 but now runtime loaded
    LONG    duty_max        ' was PWMLIM << 4 <# PWMLIM << 4 but now runtime loaded
    LONG    duty_up
    LONG    duty_dn
    LONG    dead_gap        ' delay between driving h/l side of driver (never drive both at once)
    LONG    pwm_limit       ' max freq of our pwm
    LONG    cfg_ctcks       ' # clock ticks needed to create 2 kHz motor drive loop
    LONG    motr_ctcks      ' # clock ticks needed to create 43 kHz motor control loop
    LONG    stop_mode       ' control / user setting, enum: [SM_FLOAT, SM_BRAKE]
    LONG    e_stop          ' T/F where T means stop all motor function
    LONG    ramp_fast       ' 12_500-18.5V 25k angle increment: add this every 500 uSec to ramp up to speed
    LONG    ramp_slo        ' subtract this every 500 uSec to ramp down to slower speed

' -----------------------------------
    LONG    charge_time     ' delay between driving h/l side of driver (never drive both at once)

DAT  {  Motor DRIVER  }
'
' PASM Driver Program
'
                org     0

driver          mov     drv_state_, #DCS_STOPPED        ' motor is currently stopped
'{
                ' Logic Analyzer Instrumentation Code
                drvl    motrCtlLpPnFld                  ' preset test pins to low
                drvl    drvrTmrPnFld                    ' preset test pins to low
'                drvl    drvrTmr2PnFld                   ' preset test pins to low
'}

                rdlong  tmpX, ptra++                    ' get base pin
                or      all_pins, tmpX                  '  finish the all-pins variable
                add     drive_pins, tmpX                '  finish the drive-pins variable
                add     adc_pins, tmpX                  '  finish the adc-pins variable

                mov     tmpY, #0                        ' make the single-pin variables
.pin            altd    tmpY, #pin_adc_u_i
                mov     0-0, tmpX
                add     tmpX, #1
                incmod  tmpY, #15      wc
    if_nc       jmp     #.pin

                rdlong  params_ptr_, ptra++             ' get parameters pointer
                add     ptra, #2*4                      '  point to return data, targetIncre is at long index [-1]
                                                        '                        targetAngle is at long index [-2]
{
                ' finish our upper duty limit
                mov     tmpX, dead_gap_
                sub     duty_max_, tmpX                 ' duty max = frame/2 - (dead-gap/2) - 1
                sub     duty_max_, twoPercent           ' duty max -= 2%
                add     duty_min_, tmpX                 ' duty max = 0 + (dead-gap/2) + 1
'}
                dirl    all_pins                        ' disable PWM and ADC pins for configuration

                wrpin   pwmn, pin_pwm_u_l               ' set up PWM pins
                wrpin   pwmt, pin_pwm_u_h
                wrpin   pwmn, pin_pwm_v_l
                wrpin   pwmt, pin_pwm_v_h
                wrpin   pwmn, pin_pwm_w_l
                wrpin   pwmt, pin_pwm_w_h

                wxpin   fram, drive_pins                '  and set PWM frame width, too

                ' ADC setup 1
                wrpin   adc_modes+0, adc_pins           ' switch ADC to GIO calibration
                wxpin   #11, adc_pins                   ' (#11 = 2048-clock / 12-bit conversion)

                dirh    all_pins                        ' enable ADC and PWM pins simultaneously for phase-locked operation

                call    #.wait4adc                      ' allow ADC rest period (wait for sample ready)

                rdpin   gio_levels+0, pin_adc_u_i       ' GIO samples done, read them
                rdpin   gio_levels+1, pin_adc_v_i
                rdpin   gio_levels+2, pin_adc_w_i
                rdpin   gio_levels+3, pin_adc_cur_i

                ' ADC setup 2
                wrpin   adc_modes+1, adc_pins           ' switch ADC to VIO calibration

                call    #.wait4adc                      ' allow ADC rest period (wait for sample ready)

                rdpin   vio_levels+0, pin_adc_u_i       ' VIO samples done, read them
                rdpin   vio_levels+1, pin_adc_v_i
                rdpin   vio_levels+2, pin_adc_w_i
                rdpin   vio_levels+3, pin_adc_cur_i

                qdiv    numerator, vio_levels+0         ' calculate our values from readings
                qdiv    numerator, vio_levels+1
                qdiv    numerator, vio_levels+2
                qdiv    numerator, vio_levels+3

                getqx   scl_levels+0
                waitx   #5                              ' wait 20ns: 4 @ 200 MHz, 5.4 @ 270 MHz
                getqx   scl_levels+1
                waitx   #5
                getqx   scl_levels+2
                waitx   #5
                getqx   scl_levels+3

                ' finally, configure the current sense pins for main loop
                dirl    all_pins                        ' disable ADC pins for configuration

                wrpin   adc_modes+2, adc_pins           ' switch ADC to pin sampling
                wxpin   adc_fram, adc_pins              ' set count period to match our PWM frame width
                wypin   #0, adc_pins                    ' set mode to incrment on highs, only (vs. #1 incr & decr)

                dirh    all_pins                        ' enable ADC and PWM pins simultaneously for phase-locked operation

                ' if we are to freewheel the motor let's float all drive pins
                cmp     stop_mode_, #SM_FLOAT       wz  ' Q: should motor be freewheeling?
    if_z        dirl    drive_pins                      ' YES: float all control pins (make them inputs)

                dirl    pin_hall_u                      ' remake HALL pins inputs (they were in-between ADC and PWM pins)
                dirl    pin_hall_v
                dirl    pin_hall_w

                mov     duty_, #duty_min_               ' reset duty
                mov     pos_, #0                        ' reset pos
                mov     loop_dtcks_, #0                 ' just in case
                mov     loop_ctcks_, #0                 ' just in case
                mov     drv_incr, #0                    ' reset incr to stopped
                mov     prior_incr, #0                  ' just in case
                mov     fwdrev, #0                      ' just in case
                mov     angle_, #0                       ' just in case

                ' do initial read of parms so control loop can use them
                setq    #DRVR_PARAMS_LONGS_COUNT-1      ' load fresh parameter table (13 DRVR_PARAMS_LONGS_COUNT longs)
                rdlong  params_ptr_+1, params_ptr_

                ' preset our starting angle
                'call    #.initAngleFmHall      ' NOTE: may not need this as SPIN_UP does this

                ' reset timer (schedule next control time)
                getct   ctrlEndTix                      ' get now
                addct1  ctrlEndTix, cfg_ctcks_          '   add in next time we need to run
                ' start driver
                jmp     #.drvMotor
    ' -------------------------------------------------------------------------


.loop           jnct1   #.ctlMotor      ' if not time for control loop just go to drive loop
    ' =========================================================================
    '  MOTOR DRIVE LOOP - runs at 2.0 kHz (500.0 uSec period)
    '       time to adjust angle...
    ' -------------------------------------------------------------------------
.drvMotor
                getct   ctrlSrtTix                          ' remember when we started this loop
'{
                ' Logic Analyzer Instrumentation Code
                drvh    drvrTmrPnFld                       ' HIGH while doing drive determination
'}

'                outnot  drvrTmr2PnFld                       ' toggle TEST marker pin
'                outnot  drvrTmr2PnFld                       ' toggle TEST marker pin
                or      e_stop_, e_stop_            wz      ' Q: Emergency Stop Requested?
    if_z        jmp     #.noEStop                           ' No: continue on..
.eStop
                dirl    drive_pins                          ' YES, at Emergency STOP: float all control pins (make them inputs)
                mov     drv_state_, #DCS_ESTOP              ' report that we are stopped
                jmp     #.endRqst

.noEStop
                cmp     drv_state_, #DCS_ESTOP      wz      ' Q: were we emergency stopped?
    if_z        mov     drv_state_, #DCS_STOPPED            ' YES: reset to simply stopped so we start out pins correctly
                rdlong  tgt_incr, ptra[-1]                  ' get rate of increment ( +/- drive power, or 0 stop)
                or      tgt_incr, tgt_incr          wz      ' Q: being asked to stop?
    if_z        jmp     #.newCmd                            ' YES, allow 'stop' to proceed

                ' Accept a new drive command only when not in middle of change
                cmp     drv_state_, #DCS_STOPPED    wz      ' Q: STOPPED not doing anything?
    if_nz       cmp     drv_state_, #DCS_AT_SPEED   wz      ' Q: AT_SPEED not doing anything?
    if_nz       cmp     drv_state_, #DCS_FAULTED    wz      ' Q: FAULTED not doing anything?
    if_nz       jmp     #.currRqst      ' no match, continue what we are doing
                ' matched one, fall through to process new request...

                ' let's see if user wants to change speed
                ' have new drive command?
.newCmd
'
'  NEW TEST SUPPORT CODE (alternate input path (angle) for TESTing!)
                rdlong  tgt_incr, ptra[-2]              ' get desired targetAngle for test
                cmp     tgt_incr, maxNeg            wz  ' Q: do we have a request?
    if_nz       mov     angle_, tgt_incr                 ' post this value to driver
    if_nz       wrlong  maxNeg, ptra[-2]                ' got it, now clear it ready for user to send another
    if_nz       jmp     #.endRqst                       ' and position motor there
                ' no? then just fall thru
'  END OF NEW TEST SUPPORT CODE
'
                rdlong  tgt_incr, ptra[-1]              ' get rate of increment ( +/- drive power, or 0 stop)
                cmp     prior_incr, tgt_incr        wz  ' Q: do we have a new request?
    if_z        jmp     #.currRqst      ' nope, just continue what we are doing

    ' ====================================
.newRqst    ' have new request
            ' determine what we need to do
    ' ====================================
                ' first, if faulted, clear fault
                cmp     drv_state_, #DCS_FAULTED    wz  ' Q: is MOTOR faulted?
    if_nz       jmp     #.chkStopCmd                    ' NO, go to next check
            ' MOTOR faulted, clear fault so we can run again
.resetFault
                mov     tgt_incr, #0                    ' YES, reset incr to stopped
                mov     drv_incr, #0                    ' reset incr to stopped
                mov     prior_incr, #0                  ' reset prior
                mov     fwdrev, #0                      ' just in case
                mov     duty_, #duty_min_               ' just in case
                mov     angle_, #0                      ' just in case
                'call    #.initAngleFmHall               ' figure out where motor is once again
                mov     drv_state_, #DCS_STOPPED        ' reset fault -> to stopped
                cmp     stop_mode_, #SM_FLOAT       wz  ' Q: are we floating pins during stop?
    if_nz       dirh    drive_pins                      ' NO, set control pins back to output
                ' if we were faulted, we are already stopped so just do nothing if stop request
                cmp     tgt_incr, stop_requst       wz  ' Q: is stop request?
    if_z        mov     prior_incr, tgt_incr            ' YES, just a stop and we already are - set this as latest prior!
    if_z        jmp     #.currRqst      ' exit, just continue what we are doing
.chkStopCmd
                ' if NEW request is stop
                cmp     tgt_incr, stop_requst       wz  ' Q: is stop request?
    if_z        mov     prior_incr, tgt_incr            ' have new request - set this as latest prior!
    if_z        mov     drv_state_, #DCS_SPIN_DN        ' yes, so start ramp down
    if_z        jmp     #.rampDn
                ' have start or speed adjustment
.chkStopped
                cmp     drv_state_, #DCS_STOPPED    wz  ' Q: are we stopped?
    if_nz       jmp     #.notStart                      ' NO, go to next check
                mov     prior_incr, tgt_incr            ' YES, have new request - set this a latest prior!
                mov     drv_state_, #DCS_SPIN_UP        ' We are going to ramp up
                ' if we have floated all drive pins, re-enable them
                cmp     stop_mode_, #SM_FLOAT       wz  ' Q: did we float pins at last stop?
    if_z        dirh    drive_pins                      ' yes, set control pins back to output
                jmp     #.rampUp            ' now go ramp up!

.notStart
    ' ------------------------------------
               ' no, We have a speed adjustment (determine how to do...)
                '  NOTEs: [ + >> +, + >> -, - >> -, - >> +]
                '    + to - -> make direction change (slow down, ramp up in other direction)
                '    - to + -> make direction change (slow down, ramp up  in other direction)
                '    + to larger + -> ramp up to new
                '    + to smaller + -> ramp down to new
                '    - to larger - -> ramp up to new
                '    - to smaller - -> ramp down to new

                ' first do we have same sign?
                testb   prior_incr, #31             wc  ' find dual '-' signs (CY=both nega)
                testb   tgt_incr, #31               andc
    if_c        jmp     #.endSame
                testbn  prior_incr, #31             wc  ' find dual '+' signs (CY=both posi)
                testbn  tgt_incr, #31               andc
.endSame
    if_nc       jmp     #.notSame
.haveSame   ' we have prior and new with same sign, so should we slow down or speed up?
                ' let's change speed
                testb   tgt_incr, #31               wc
    if_c        jmp     #.doSloNeg
.doSloPos
                cmps    prior_incr, tgt_incr        wcz ' Q: Should we slow dn or speed up? (CY=speed up)
                mov     prior_incr, tgt_incr            ' have new request - set this a latest prior!
    if_c        mov     drv_state_, #DCS_SPIN_UP        ' CY=1: speed up
    if_c        jmp     #.rampUp
    if_nc       mov     drv_state_, #DCS_SLOWING_DN     ' CY=0: slow down
    if_nc       jmp     #.slowDn
.doSloNeg
                cmps    prior_incr, tgt_incr        wcz ' Q: Should we slow dn or speed up? (CY=speed up)
                mov     prior_incr, tgt_incr            ' have new request - set this a latest prior!
    if_nc       mov     drv_state_, #DCS_SPIN_UP        ' CY=1: speed up
    if_nc       jmp     #.rampUp
    if_c        mov     drv_state_, #DCS_SLOWING_DN     ' CY=0: slow down
    if_c        jmp     #.slowDn
    ' ------------------------------------
.notSame    ' we have prior and new but NOT the same sign, let's slowdown then change direction
                ' let's change direction
                mov     prior_incr, tgt_incr            ' have new request - set this a latest prior!
                mov     drv_state_, #DCS_SLOW_TO_CHG
                jmp     #.slow2Chg


    ' ====================================
.currRqst   ' No new request, continue with
            '  current request
    ' ====================================
.chkStop        cmp     drv_state_, #DCS_STOPPED    wz
    if_z        jmp     #.endRqst                       ' motor STOPPED, just exit (w/o increment)
                ' motor is running, if ramp do ramp, else increment
.chkUp          cmp     drv_state_, #DCS_SPIN_UP    wz
    if_nz       jmp     #.chkDn                         ' not this, go check next
.rampUp
                ' if we don't have it, preset our starting angle (assume motor moved during float!)
                cmp     stop_mode_, #SM_FLOAT       wz  ' if we are "floating" pins at stop
    if_z        or      drv_incr, drv_incr          wz  ' -and- we are stopped, just about to spin up
    if_z        call    #.initAngleFmHall               ' then, let's first get motor initial angle for smooth startup
                ' do next UP adjustment or set at-speed
                abs     abs_incr, drv_incr              ' get abs(drv_incr)
                cmps    abs_incr, ramp_thresh       wc  ' Q: need early(slo) ramp?
    if_nc       mov     curr_ramp, ramp_fast_           ' NO: use fast ramp rate
    if_c        mov     curr_ramp, ramp_slo_            ' YES: use slow ramp rate
                testb   tgt_incr, #31               wc  ' Q: moving FWD or REV? (CY=REV)
    if_c        jmp     #.haveRUpRev

                adds    drv_incr, curr_ramp             ' FWD: increase increment (speeding up)
                cmps    tgt_incr, drv_incr          wc  ' Q: Did we exceed target?
                jmp     #.lastRUpZero
.haveRUpRev
                subs    drv_incr, curr_ramp             ' REV: decrease increment (speeding up)
                cmps    drv_incr, tgt_incr          wc  ' Q: Did we exceed target?
.lastRUpZero
    if_c        mov     drv_incr, tgt_incr              ' yes, reset to target!
                cmps    tgt_incr, drv_incr          wz  ' Q: Are we at target? (compare again to handle both cases)
    if_z        mov     drv_state_, #DCS_AT_SPEED       ' yes, show we got here!
                jmp     #.justIncr      ' go increment motor angle, then exit

    ' ------------------------------------
.chkDn          cmp     drv_state_, #DCS_SPIN_DN    wz
    if_nz       jmp     #.chkSlow2Chg
.rampDn
                ' do next DOWN adjustment or set stopped
                '  (increment > 0, we are not stopped)
                ' NOTE!!! tgt_incr is likely ZERO so we don't test its sign bit here
                '  instead we test the sign bit of the current driver target as we are spinning down
                '  from the current driver target to ZERO!
                testb   drv_incr, #31               wc  ' Q: moving FWD or REV? (CY=REV)
    if_c        jmp     #.haveRDnRev
                subs    drv_incr, ramp_fast_              ' FWD: decrease increment (slowing down)
                cmps    drv_incr, #0                wcz
    if_nc_and_nz jmp    #.justIncr                       ' just increment motor angle, then exit
                jmp     #.lastRDnzero
.haveRDnRev
                adds    drv_incr, ramp_fast_              ' REV: increase increment, toward zero (slowing down)
                cmps    drv_incr, #0                wcz
    if_c        jmp    #.justIncr                       ' just increment motor angle, then exit
.lastRDnzero
                subs    drv_incr, drv_incr              ' set to zero
                mov     drv_state_, #DCS_STOPPED        ' report that we are stopped
                mov     err_, #0                        ' reset err
                mov     duty_, #duty_min_               ' reset duty
                ' if we are to freewheel the motor let's float all drive pins
                cmp     stop_mode_, #SM_FLOAT       wz
    if_z        dirl    drive_pins                      ' float all control pins (make them inputs)
                jmp     #.endRqst       ' motor STOPPED, just exit (w/o increment)

     ' ------------------------------------
.chkSlow2Chg    cmp     drv_state_, #DCS_SLOW_TO_CHG wz
    if_nz       jmp     #.chkSlowDn                     ' not this, go check next
.slow2Chg
                ' do next DOWN adjustment, if stopped do spinup
                '  (increment > 0, we are not stopped)
                ' NOTE!!! tgt_incr is where we are going after we spin down so we don't test its sign bit here
                '  instead we test the sign bit of the current driver target as we are spinning down
                '  from the current driver target to ZERO!
                testb   drv_incr, #31               wc  ' Q: moving FWD or REV? (CY=REV)
    if_c        jmp     #.haveS2CRev
                subs    drv_incr, ramp_fast_              ' FWD: decrease increment (slowing down)
                cmps    drv_incr, #0                wcz
    if_nc_and_nz jmp    #.justIncr                      ' just increment motor angle, then exit
                jmp     #.lastS2CZero
.haveS2CRev
                adds    drv_incr, ramp_fast_              ' REV: increase increment, toward zero (slowing down)
                cmps    drv_incr, #0                wcz
    if_c        jmp    #.justIncr                       ' just increment motor angle, then exit
.lastS2CZero
                subs    drv_incr, drv_incr              ' set to zero
                sub     drv_incr, drv_incr              ' set to zero
                mov     drv_state_, #DCS_SPIN_UP        ' report that we are stopped
                jmp     #.rampUp        ' go immediately start moving in opposite direction

    ' ------------------------------------
.chkSlowDn      cmp     drv_state_, #DCS_SLOWING_DN wz
    if_nz       jmp     #.justIncr          ' not this, guess we just increment motor angle, then exit
.slowDn
                ' do next DOWN adjustment or set at speed
                '  (increment > 0, we are not stopped)
                testb   tgt_incr, #31               wc  ' Q: moving FWD or REV? (CY=REV)
    if_c        jmp     #.haveSDnRev                    ' REV, jump
                subs    drv_incr, ramp_fast_            ' FWD: decrease increment (slowing down)
                cmps    tgt_incr, drv_incr          wc  ' Q: Did we exceed target?
                jmp     #.lastSDnZero
.haveSDnRev
                adds    drv_incr, ramp_fast_            ' REV: increase increment (slowing down)
                cmps    drv_incr, tgt_incr          wc  ' Q: Did we exceed target?
.lastSDnZero
    if_nc       mov     drv_incr, tgt_incr              ' yes, reset to target!
                cmps    tgt_incr, drv_incr          wz  ' Q: Are we at target? (compare again to handle both cases)
    if_z        mov     drv_state_, #DCS_AT_SPEED       ' yes, show we got here!
                'jmp     #.justIncr      ' go increment motor angle, then exit

    ' ------------------------------------
.justIncr   ' just do our increment of angle and we're done!
                add     angle_, drv_incr
                'jmp    #.endRqst      ' done, fall thru
.endRqst
                getct   loop_ctcks_                 ' how long was this pass? send to host
                sub     loop_ctcks_, ctrlSrtTix
                ' reset timer (schedule next control loop run)
                mov     ctrlEndTix, ctrlSrtTix
                addct1  ctrlEndTix, cfg_ctcks_
'{
                ' Logic Analyzer Instrumentation Code
                drvl    drvrTmrPnFld                   ' LOW drive determination complete
'}
               'jmp    #.ctlMotor      ' done, fall thru
    ' -------------------------------------------------------------------------


.ctlMotor
    ' =========================================================================
    '  MOTOR Speed Maintenance Loop - runs at 43.9 kHz (22.8 uSec period)
    '       keep our error rate low...
    ' -------------------------------------------------------------------------
                getct   drvrSrtTix                  ' remember when we started this loop
                'addct2  drvrSrtTix, motr_ctcks_     '   add in next time we need to run

'{
                ' Logic Analyzer Instrumentation Code
                drvh    motrCtlLpPnFld              ' HIGH while affecting change to motor
'}
                call    #.wait4adc                  ' allow ADC rest period (wait for sample ready)
'{
                ' Logic Analyzer Instrumentation Code
                drvnot  drvrTgglPnFld               ' our loop TOGGLE (Chip's drvnot P0)
'}
                rdpin   sense_u_, pin_adc_u_i           ' pin samples done, read them
                rdpin   sense_v_, pin_adc_v_i
                rdpin   sense_w_, pin_adc_w_i
                rdpin   sense_i_, pin_adc_cur_i
'{
                sub     sense_u_, gio_levels+0      ' compute (numerator * (pin_level - gio_level)) >> 11
                muls    sense_u_, scl_levels+0
                sar     sense_u_, #11

                sub     sense_v_, gio_levels+1
                muls    sense_v_, scl_levels+1
                sar     sense_v_, #11

                sub     sense_w_, gio_levels+2
                muls    sense_w_, scl_levels+2
                sar     sense_w_, #11

                sub     sense_i_, gio_levels+3
                muls    sense_i_, scl_levels+3
                sar     sense_i_, #11
'}
                mov     tmpY, duty_                 ' feed three CORDIC operations to get phase drive levels
                shr     tmpY, #4
                mov     tmpX, angle_
                qrotate tmpY, tmpX
                add     tmpX, third
                qrotate tmpY, tmpX
                add     tmpX, third
                qrotate tmpY, tmpX

                getqy   drive_u_                    ' get three CORDIC results
                getqy   drive_v_
                getqy   drive_w_

' used when tracking down PWM drive problem...
'                mov     driveUsav_, drive_u_        ' copy for later display

                mov     tmpX, drive_u_              ' get smallest drive level into tmpX
                cmps    tmpX, drive_v_         wc
    if_nc       mov     tmpX, drive_v_
                cmps    tmpX, drive_w_         wc
    if_nc       mov     tmpX, drive_w_

                mov     tmpY, drive_u_              ' get largest drive level into tmpY
                cmps    tmpY, drive_v_         wc
    if_c        mov     tmpY, drive_v_
                cmps    tmpY, drive_w_         wc
    if_c        mov     tmpY, drive_w_

                add     tmpX, tmpY                  ' sum smallest and largest, then divide by 2
                sar     tmpX, #1

                sub     drive_u_, tmpX              ' subtract difference from drive levels
                sub     drive_v_, tmpX
                sub     drive_w_, tmpX

                add     drive_u_, bias              ' add center-bias and dead-time offsets to update PWMs
                add     drive_v_, bias
                add     drive_w_, bias

' used when tracking down PWM drive problem...
'                cmps    drive_u_, minDrvU_      wc  ' Q:is drive_u_ < minDrvU_
'    if_c        mov     minDrvU_, drive_u_          ' Y: save new min
'                cmps    maxDrvU_, drive_u_      wc  ' Q:is maxDrvU_ < drive_u_
'    if_c        mov     maxDrvU_, drive_u_          ' Y: save new max

                add     drive_u_, dead_gap_         ' dead-gap was OFFSET
                wypin   drive_u_, pin_pwm_u_l
                sub     drive_u_, dead_gap_         ' dead-gap was OFFSET
                wypin   drive_u_, pin_pwm_u_h

                add     drive_v_, dead_gap_         ' dead-gap was OFFSET
                wypin   drive_v_, pin_pwm_v_l
                sub     drive_v_, dead_gap_         ' dead-gap was OFFSET
                wypin   drive_v_, pin_pwm_v_h

                add     drive_w_, dead_gap_         ' dead-gap was OFFSET
                wypin   drive_w_, pin_pwm_w_l
                sub     drive_w_, dead_gap_         ' dead-gap was OFFSET
                wypin   drive_w_, pin_pwm_w_h

                testp   pin_hall_w              wc      ' read hall effect sensor
                rcl     hall_, #1
                testp   pin_hall_v              wc
                rcl     hall_, #1
                testp   pin_hall_u              wc
                rcl     hall_, #1
                and     hall_, #%111_111            ' (old << 3 | new) [_x_:ooo:nnn]
                altgb   hall_, #deltas              ' load byte deltas[hall_] -> [-1, 0, 1]
                getbyte tmpY
                signx   tmpY, #7                       ' sign-extend bit7
                add     pos_, tmpY                     ' add to current pos_

                setq    #DRVR_PARAMS_LONGS_COUNT-1                       ' load fresh parameter table (13 DRVR_PARAMS_LONGS_COUNT longs)
                rdlong  params_ptr_+1, params_ptr_

                cmpm    angle_, prior_angle  wcz     ' if angle has changed, forward or reverse?
    if_nz       wrc     fwdrev
                mov     prior_angle, angle_

                testb   fwdrev, #0          wc      ' determine error
                bitc    hall_, #3
                and     hall_, #%1111
                alts    hall_, #hall_angles
                mov     err_, 0-0
    if_c        add     err_, offset_fwd_
    if_nc       add     err_, offset_rev_
                subr    err_, angle_
                sar     err_, #24
                bitl    hall_, #3

                abs     tmpY, err_                     ' fault?
                cmp     tmpY, #125             wc
    if_c        jmp     #.noFault
                dirl    drive_pins                  ' at FAULT: float all control pins (make them inputs)
                wypin   #0, drive_pins              ' reset all pwm values to OFF (better restart after fault)
                mov     drv_state_,#DCS_FAULTED     '  also on FAULT: mark our motor as FAULTED
                wrlong  #1, ptra[DRVR_STATUS_LONGS_COUNT]                '  also on FAULT: report fault
                ' used when tracking down PWM drive problem...
                'debug(sdec(drive_u_), " [", sdec_(minDrvU_), " - ", sdec_(maxDrvU_), "]: ", sdec(driveUsav_), " cntr: ", sdec(tmpX), " -> ", sdec(bias), sdec(duty_), sdec(angle_))
                'mov     minDrvU_, maxPos
                'mov     maxDrvU_, maxNeg
.noFault        sub     tmpY, #256/6           wc   ' modulate duty (256 frac 6 - where 6 is # of hall cycles)
    if_nc       muls    tmpY, duty_up_
    if_c        muls    tmpY, duty_dn_
                sar     tmpY, #8                    ' 8-bits is multiplying agressiveness of correction
                add     duty_, tmpY
                fles    duty_, duty_max_            ' keep duty within limits
                fges    duty_, duty_min_

                getct   loop_dtcks_                 ' how long was this iteration? send to host
                sub     loop_dtcks_, drvrSrtTix

                setq    #DRVR_STATUS_LONGS_COUNT-1                       ' write drive[3]/sense[4]/hall/pos/duty/err/ticks[2]/state to hub
                wrlong  drive_u_, ptra
'{
                ' Logic Analyzer Instrumentation Code
                drvl    motrCtlLpPnFld              ' LOW after accepting change to motor
'}
                ' wait for rest of time here...
'.motWtLp
'                jnct2   #.motWtLp                   ' wait until delay expires
                jmp     #.loop                      ' main loop

    ' =========================================================================
    '  PRIVATE (Utiility) Subroutines
    ' -------------------------------------------------------------------------
.wait4adc
'{
                ' Logic Analyzer Instrumentation Code
                drvh  drvrTggl2PnFld
'}
.wait4adcAgn    testp   pin_adc_cur_i           wc      ' wait for ADC sample to be avail. (wtg on 4th pin set up)
    if_nc       jmp     #.wait4adcAgn
'{
                ' Logic Analyzer Instrumentation Code
                drvl  drvrTggl2PnFld
'}
.noWait4adc     RET
'    _ret_       akpin   pin_adc_cur_i  ' NO LONGER NEEDED

.initAngleFmHall
                ' init angle & prior from current motor position
                testp   pin_hall_w              wc      ' read hall effect sensor
                rcl     hall_, #1
                testp   pin_hall_v              wc
                rcl     hall_, #1
                testp   pin_hall_u              wc
                rcl     hall_, #1
'                and     hall_, #%111               ' assume forward
                testb   tgt_incr, #31           wc  ' Q: moving FWD or REV? (CY=REV)
    if_c        or      hall_ , #%1000              ' REV point to REV half of table
    if_nc       and     hall_, #%111                ' FWD point to FWD half of table
                alts    hall_, #hall_angles
                mov     angle_, 0-0
                add     angle_, offset_fwd_          ' adjust phase offset for hall sensor
    _ret_       mov     prior_angle, angle_          ' show we are already here

    '
    ' =========================================================================

all_pins	LONG	(15 << 6) + 0		    ' all-pins variable (0 addpins 15) needs ADD/OR of basepin
drive_pins	LONG	(6 << 6) + 8	        ' drive-pins variable (+8 addpins 6) needs ADD of basepin
adc_pins	LONG	(4 << 6) + 0	        ' drive-pins variable (+0 addpins 4) needs ADD/OR of basepin
pwmt        LONG    %000_000000_01_01000_0  ' PWM true (P_BITDAC | P_PWM_TRIANGLE)
pwmn        LONG    %001_000000_01_01000_0  ' PWM not (P_INVERT_OUTPUT | P_BITDAC | P_PWM_TRIANGLE)
adc_fram    LONG    FRAME                   ' set ADC to full PWM frame counts
fram        LONG    (FRAME / 2) << 16 + 1   ' PWM frame: width=FRAME/2, div sysclk by 1 (no division)
bias        LONG    FRAME / 4               ' PWM center-frame bias
third       LONG    1 FRAC 3                ' 120 degrees
numerator   LONG    3300 << 11              ' numerator for ADC calculations:     3.3V << 11 BITS
stop_requst LONG    0                       ' 32-bits of zero
maxNeg      LONG    $FFFF_FFFF              ' 32-bits of one (max negative signed value)
maxPos      LONG    $7FFF_FFFF              ' max positive signed value
ramp_thresh LONG    25_000_000              ' fm zero - slow ramp to here then fast ramp ( ~1/5 of 0-max )
twoPercent  LONG    FRAME / 10              ' 2% of frame/2
' following is experiment in limiting PWM drive request... didn't really solve the problem
'   FIXME: Chip what could we do to prevent this?, do we need to?
drv_max_    LONG    (FRAME / 2) - 1         ' maximum PWM drive value
drv_min_    LONG    0 + 1                   ' minimum PWM drive value  + 1
'maxDrvU_     LONG    -1
'minDrvU_     LONG    $7fff_ffff

    ' -----------------------------------
    ' Logic Analyzer Instrumentation Code
    ' -----------------------------------
'{
motrCtlLpPnFld  LONG    TEST_PIN_MOTR_CTL_LP addpins 0  ' convert to pinfield
drvrTmrPnFld    LONG    TEST_PIN_DRIVE_LP addpins 0  ' convert to pinfield
drvrTmr2PnFld   LONG    TEST_PIN_DRIVE_LP2 addpins 0  ' convert to pinfield
drvrTgglPnFld   LONG    TEST_PIN_LP_TOGL addpins 0  ' convert to pinfield
drvrTggl2PnFld   LONG   TEST_PIN_UNKNOWN addpins 0  ' convert to pinfield
'}

adc_modes   LONG    p_adc_gio | p_adc       ' +0 : adc modes, by state
            LONG    p_adc_vio | p_adc       ' +1
            LONG    p_adc_1x | p_count_highs   ' +2 ' WAS p_adc_1x | p_adc

' turn motor to view hall sequence ...  learn in known direction
'   efficient: low current draw at given speed

' max frequency is this...
' max ramp rate is this...

' old bit shift up by 3 then new bits
'   old is outer index
'   new is inner index
deltas      BYTE    0,  0,  0,  0,  0,  0,  0,  0  ' Hall-effect-sensor position deltas from (old<<3 | new)
            BYTE    0,  0,  0, -1,  0,  1,  0,  0
            BYTE    0,  0,  0,  1,  0,  0, -1,  0
            BYTE    0,  1, -1,  0,  0,  0,  0,  0
            BYTE    0,  0,  0,  0,  0, -1,  1,  0
            BYTE    0, -1,  0,  0,  1,  0,  0,  0
            BYTE    0,  0,  1,  0, -1,  0,  0,  0
            BYTE    0,  0,  0,  0,  0,  0,  0,  0

' 32bit angles
'  6.5" wheel
'    1 wheel revolution is 360 degrees
'   90 tics per 360 degrees
'    1 tic is 4 degrees
'    6 tics per tic-cycle
'   15 tic-cycles per 360 degrees
'   30 pole motor
'    1 tic-cycle is 24 degrees
'
'  docoEng.com 4k RPM 24v motor
'    1 shaft revolution is 360 degrees
'    1 tic is 15 degrees
'   24 tics per 360 degrees
'    6 tics per tic-cycle
'    4 tic-cycles per 360 degrees
'    8 pole motor
'    1 tic-cycle is 90 degrees
'
'   amount of rotation within hall cycle - 6.5" wheel
hall_angles LONG    0           '-%000- can't happen forward-direction table
            LONG    0 frac 6    '%001
            LONG    4 frac 6    '%010
            LONG    5 frac 6    '%011
            LONG    2 frac 6    '%100
            LONG    1 frac 6    '%101
            LONG    3 frac 6    '%110
            LONG    0           '-%111- can't happen

            LONG    0           '-%000- can't happen - reverse-direction table
            LONG    5 frac 6    '%001
            LONG    3 frac 6    '%010
            LONG    4 frac 6    '%011
            LONG    1 frac 6    '%100
            LONG    0 frac 6    '%101
            LONG    2 frac 6    '%110
            LONG    0           '-%111- can't happen

tmpX            res 1           ' miscellaneous
tmpY            res 1

' measurements
drvrSrtTix      res 1
drvrEndTix      res 1
ctrlSrtTix      res 1
ctrlEndTix      res 1

' driver inputs
tgt_incr        res 1       ' current user requested target increment
prior_incr      res 1       ' prior user requested target increment
' control loop variables
drv_incr        res 1       ' current driver increment
angle_          res 1       ' current driver angle
prior_angle     res 1       ' prior driver angle
fwdrev          res 1       ' driver current direction used for indexing into hall angle table
curr_ramp       res 1
abs_incr        res 1

' temp hold areas
' used when tracking down PWM drive problem...
'driveUsav_      res 1               ' unmodified value from cordic math

' PIN names -  single-pin variables
pin_adc_u_i     res 1       ' basepin + 0
pin_adc_v_i     res 1       ' basepin + 1
pin_adc_w_i     res 1       ' basepin + 2
pin_adc_x_i     res 1       ' basepin + 3
pin_adc_cur_i   res 1       ' basepin + 4
pin_hall_u      res 1       ' basepin + 5
pin_hall_v      res 1       ' basepin + 6
pin_hall_w      res 1       ' basepin + 7
pin_pwm_u_l     res 1       ' basepin + 8
pin_pwm_u_h     res 1       ' basepin + 9
pin_pwm_v_l     res 1       ' basepin + 10
pin_pwm_v_h     res 1       ' basepin + 11
pin_pwm_w_l     res 1       ' basepin + 12
pin_pwm_w_h     res 1       ' basepin + 13
pin_pwm_x_l     res 1       ' basepin + 14
pin_pwm_x_h     res 1       ' basepin + 15

'  ADC variables
gio_levels      res 4
vio_levels      res 4
scl_levels      res 4

' ------------------------------
'  PRECISE FORMAT:
'   copied in-to driver each loop iteration
params_ptr_ res 1               ' params_ptr must be followed by:
offset_fwd_ res 1               '  14 (DRVR_PARAMS_LONGS_COUNT) parameters
offset_rev_ res 1
duty_min_   res 1
duty_max_   res 1
duty_up_    res 1
duty_dn_    res 1
dead_gap_   res 1               ' this was OFFSET but now passed into driver
pwm_limit_  res 1               ' this was PWMLIM but now passed into driver
cfg_ctcks_  res 1
motr_ctcks_ res 1
stop_mode_  res 1
e_stop_     res 1               ' T/F where T means stopal motor function
ramp_fast_  res 1               ' angle increment: add this every 500 uSec to ramp up to speed
ramp_slo_   res 1               ' angle decrement: subtract this every 500 uSec to ramp down to slower speed

' ------------------------------
'  PRECISE FORMAT:
'   copied out-of driver each loop iteration
drive_u_    res 1               ' 14 (DRVR_STATUS_LONGS_COUNT) contiguous longs for return data structure
drive_v_    res 1
drive_w_    res 1
sense_u_    res 1
sense_v_    res 1
sense_w_    res 1
sense_i_    res 1
hall_       res 1
pos_        res 1
duty_       res 1
err_        res 1
loop_dtcks_ res 1
loop_ctcks_ res 1
drv_state_  res 1       ' enum: DCS_STOPPED, DCS_SPIN_UP, DCS_AT_SPEED, DCS_SPIN_DN, etc
' fault is here... (but external only)

' $1f8 for reg cogs
    fit     496  ' $1f8(504)? - 470 currently works

CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
