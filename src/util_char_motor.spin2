'' =================================================================================================
''
''   File....... util_char_motor.spin2
''   Purpose.... Characterize aspects of a new motor at given voltage
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2023 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Mar 2023
''   Updated.... 31 Mar 2023
''
'' Oh, and I'm a Blynk: a k-pop Blackpink fandom member and today is Jisoo's Solo Album release day!
'' =================================================================================================

CON { timing }

  CLK_FREQ = 270_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock

    ' SPECIAL for LOGGING on RPi
'{
    DEBUG_PIN_TX = 56
    DEBUG_PIN_RX = 57
    DEBUG_BAUD = 2_000_000
'}

CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

CON { application io pins }

    ' describe where things are attached to our JonnyMac eval board

    NUM_PAD_SW1     = 32
    NUM_PAD_SW2     = 33
    NUM_PAD_SW3     = 34
    NUM_PAD_SW4     = 35

    JOYSTICK_SW     = 40    ' grn
    JOYSTICK_Y_AXIS = 41    ' yel
    JOYSTICK_X_AXIS = 42    ' org

    HDMI_BASE_PIN       = tvDebug.PINS_P8_P15

    NOT_SET = -1

OBJ { our Motor(s) }

    user        :   "isp_bldc_motor_userconfig"         ' driver configuration
    tvDebug     :   "isp_hdmi_debug"                    ' HDMI debug object
    wheel       :   "isp_bldc_motor"                    ' the single BLDC motor
    ofsTrk      :   "isp_discon_tracker"                ' data struct for tracking offset ranges

DAT { run-time condition vars }

    bUseHDMI        LONG   TRUE       ' set to TRUE to enable HDMI use/output

    nGroups         LONG    0
    pGroupTitles    LONG    0
    pGroupNames     LONG    0
    pGroupVarCts    LONG    0
    pGroupVars      LONG    0

    motorCog        LONG    0
    senseCog        LONG    0

    basePin         LONG    0
    detectMode      LONG    0
    voltage         LONG    0
    motor           LONG    0

    prior_mV        LONG    0
    priorOfs        LONG    0

PUB main() | bDidFault, failSpeed, testSpeed, bDidMove, bFwdIsInverse, ofstInDegr, bRuns, end_mV, spanIdx, srtOfst, endOffset, currOffset, min_mV
'' DEMO Driving a single wheeled platform

    ' start our HDMI debug output
    if bUseHDMI
        basePin := tvDebug.validBasePinForChoice(HDMI_BASE_PIN)
        if basePin <> tvDebug.INVALID_PIN_BASE
            tvDebug.start(basePin)


    ' validate user settings/choicess
    '  do NOT start motor unless all are legit!
    basePin := wheel.validBasePinForChoice(user.ONLY_MOTOR_BASE)
    detectMode := wheel.validDetectModeForChoice(user.ONLY_BOARD_TYPE)
    voltage := wheel.validVoltageForChoice(user.DRIVE_VOLTAGE)
    motor := wheel.validMotorForChoice(user.MOTOR_TYPE)

    if basePin <> wheel.INVALID_PIN_BASE and voltage <> wheel.INVALID_VOLTAGE and motor <> wheel.INVALID_MOTOR and detectMode <> wheel.INVALID_DET_MODE
        ' start our single motor driver
        motorCog := wheel.start(basePin, voltage, detectMode)
        'tvDebug.reportMotorCog(motorCog)

        ' for single motor let's start the single motor sense task
        senseCog := wheel.startSenseCog()

        if bUseHDMI
            nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars := wheel.getDebugData()
            debug("* Received: ", udec(nGroups), uhex_long(pGroupTitles), uhex_long(pGroupNames), uhex_long(pGroupVarCts), uhex_long(pGroupVars))

            tvDebug.registerDisplay(nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars)

        showPowerSetting(voltage)

        ' just don't draw current at stop
        wheel.holdAtStop(false)

        wheel.setMaxSpeed(100)  ' override 75% with 100% for these tests
        wheel.resetTracking()

        ' Motor notes:
        ' --------------
        '  6.5" 30 pole, 12degr/pole(magnet),  4degr/hall tic, 3 hall tics/magnet
        ' Doco   8 pole, 45degr/pole(magnet), 15degr/hall tic, 3 hall tics/magnet

        ' ----------------------------------------------------------------------------
        ' PASS 1: let's see if we find working offsets within 1st 90 degrees of rotation
        '  and how many of them work
        ofsPassNbr := 1
        passNbr := 1
        testSpeed := 50_000_000
        bFwdIsInverse := (user.MOTOR_TYPE == wheel.MOTR_DOCO_4KRPM) ? TRUE : FALSE
        debug("  ")
        debug(" ---------------- < * > ----------------")
        debug("* Determine Offset: scan 1 to 90 degr, incr by 3")
        'debug(" --- ")
        repeat ofstInDegr from 3 to 90 step 3
            bRuns, end_mV := evalOffset(ofstInDegr, bFwdIsInverse, testSpeed)
            if bRuns
                ofsTrk.addSpan(ofstInDegr, end_mV, 3)
                ofsTrk.addWorkingOffset(ofstInDegr, end_mV)
                debug("   ")
            else
                debug(" ----------------------- ")
                debug("   3 sec...")
                waitms(3_000) ' Nsec delay between passes - motor cool down

        ' ----------------------------------------------------------------------------
        ' PASS 2: within the ranges that worked, let's do discrete current-use checks
        debug("  ")
        debug(" ---------------- < * > ----------------")
        debug("* Determine lowest current for each offset works")
        spanIdx := ofsTrk.spanCount()
        if spanIdx > 0
            debug("* studying ", udec_(spanIdx), " span(s)")
            spanIdx := 0    ' start from first!
            repeat
                srtOfst, endOffset := ofsTrk.offsetsForSpan(spanIdx)
                debug("  -- Studying SPAN: ", udec_(srtOfst), " to ", udec_(endOffset))
                repeat currOffset from srtOfst to endOffset step 1
                        bRuns, end_mV := evalOffset(currOffset, bFwdIsInverse, testSpeed)
                        if bRuns
                            if ofsTrk.isWorkingOffsetChecked(currOffset) == TRUE
                                priorOfs, prior_mV := ofsTrk.valuesForOffset(currOffset)
                                if prior_mV > end_mV
                                    ofsTrk.replaceWorkingOffset(currOffset, end_mV)
                                else
                                    debug("  -- keeping prior run: ofs=(", udec_(currOffset), "), mV=(", udec_(prior_mV), ")")
                            else
                                ofsTrk.addWorkingOffset(currOffset, end_mV)
                            debug("   ")
                        else
                            debug(" ----------------------- ")
                            debug("   3 sec...")
                            waitms(3_000) ' Nsec delay between passes - motor cool down

                ' are are more spans?
                spanIdx++
                if spanIdx >= ofsTrk.spanCount() - 1
                    ' no, outta here!
                    quit
        else
            debug("* EEEE no spans to study!!")

        ' ----------------------------------------------------------------------------
        ' PASS 3: within the top 5 let's do discrete current use at speed checks

        ' TBA  let's add a reverse drive loop
        debug("* quit: all checked")
        debug("  ")

        debug("* END TEST: holding for 30 secs...")
        waitms(30_000)   ' 30 seconds, then stop

        ' turn off our motor drivers
        wheel.stop()

PRI evalOffset(newOffsetInDegr, bFwdIsInverse, speed): bDidSpin, end_mV | bDidFault, bDidMove
' test these offsets speed to see if current is best
    bDidSpin := FALSE
    wheel.testResetMaxValues()
    debug(" ======================= ")
    debug("* OFFSET pass(", udec_(ofsPassNbr), "), ", udec(newOffsetInDegr))
    wheel.testSetFwdRevOffsets(newOffsetInDegr, bFwdIsInverse)
    debug(" ----------------------- ")
    bDidFault, bDidMove, end_mV := evalSpeed(speed)
    if not bDidMove
        debug(" -  Didn't move ", udec(speed))
    else
        bDidSpin := TRUE
    if bDidFault or bDidMove
        wheel.resetTracking()
    if not bDidFault
        debug(" -  PASS #", udec_(ofsPassNbr), " - OFS ", udec_(newOffsetInDegr), ", mV:", udec_(end_mV))
    else
        debug(" -  PASS #", udec_(ofsPassNbr), " - OFS ", udec_(newOffsetInDegr), ", FAULT")
        debug("  ")

    ofsPassNbr++

PRI evalSpeed(testSpd): bDidFault, bDidMove, end_mV | endMaxRPM, endMaxTics
' test this speed to see if would fail
    clearFault()

    debug("  ")
    debug("* TEST FWD pass(", udec_(passNbr), ")", udec(testSpd))
    driveForwardAtSpeed(testSpd)
    bDidFault, endMaxRPM, endMaxTics, end_mV := reportEndCondition()
    bDidMove := (endMaxRPM > 0 and not bDidFault) ? TRUE : FALSE
    if bDidFault
        clearFault()
        waitms(5_000) ' 5sec slight delay when clearing FAULT

    ' if work on FWD then test REV
    if not bDidFault and bDidMove
        debug("* TEST REV pass(", udec_(passNbr), ")", udec(testSpd))
        waitms(2_000) ' 2Sec delay between FWD/REV
        driveReverseAtSpeed(testSpd)
        bDidFault, endMaxRPM, endMaxTics, end_mV := reportEndCondition()
        bDidMove := (endMaxRPM > 0 and not bDidFault) ? TRUE : FALSE
        if bDidFault
            clearFault()
            waitms(5_000) ' 5sec slight delay when clearing FAULT

    passNbr++


VAR
    ' work values
    LONG    minX
    LONG    minY
    LONG    maxX
    LONG    maxY
    LONG    passNbr
    LONG    ofsPassNbr
    LONG    highestRPM
    LONG    highestTics
    LONG    repeatCt

DAT

passCt    LONG    0

PRI clearFault() | bDidFault
    wheel.resetTracking()
    wheel.testResetMaxValues()

    if wheel.isFaultSignal()
        debug("S clearFault()")
        wheel.testResetFault()
        wheel.clearFaultSignal()                        ' extra in case it didn't??

PRI reportEndCondition(): bDidFault, endMaxRPM, endMaxTics, max_mV
    ' just finished pass which ended in NOT fault or fault
    '  report max RPM and max Tics
    '  report fault or not
    endMaxRPM, endMaxTics, bDidFault, max_mV := wheel.testGetResults()
    debug("* RPT: ", udec(endMaxRPM), udec(endMaxTICs), sdec(bDidFault), udec(max_mV))
    debug("  ")

PRI driveForwardAtSpeed(speed): bBadStart | bDidFault
    bBadStart := FALSE
    bDidFault := waitUntilMotorReady()
    if not bDidFault
        ' now drive!
        wheel.stopAfterTime(10, wheel.DTU_SEC)      ' set to hold at speed for 15 Sec
        wheel.testDriveAtMotorIncrement(speed)

        bDidFault, bBadStart := waitUntilMotorDone()
        'wheel.driveAtPower(0)                      ' no need to force STOPwill timeout
    else
        debug("*E motor not ready")

PRI driveReverseAtSpeed(speed): bBadStart | bDidFault
    bBadStart := FALSE
    bDidFault := waitUntilMotorReady()
    if not bDidFault
        ' now drive!
        wheel.stopAfterTime(10, wheel.DTU_SEC)      ' set to hold at speed for 15 Sec
        wheel.testDriveAtMotorIncrement(0 - speed)

        bDidFault, bBadStart := waitUntilMotorDone()
        'wheel.driveAtPower(0)                      ' no need to force STOPwill timeout

    else
        debug("*E motor not ready")


PRI driveForwardToFail(): bBadStart | bDidFault
    bBadStart := FALSE
    bDidFault := waitUntilMotorReady()
    if not bDidFault
        ' now drive!
        wheel.stopAfterTime(15, wheel.DTU_SEC)      ' set to hold at speed for 15 Sec
        wheel.driveAtPower(100)                      ' now go FWD at 100% pwr

        bDidFault, bBadStart := waitUntilMotorDone()
        wheel.driveAtPower(0)                      ' force STOP

    else
        debug("*E motor not ready")


PRI driveReverseToFail(): bBadStart | bDidFault
    bBadStart := FALSE
    bDidFault := waitUntilMotorReady()
    if not bDidFault
        ' now drive!
        wheel.stopAfterTime(15, wheel.DTU_SEC)      ' set to hold at speed for 15 Sec
        wheel.driveAtPower(-100)                      ' now go FWD at 100% pwr

        bDidFault, bBadStart := waitUntilMotorDone()
        wheel.driveAtPower(0)                      ' force STOP

    else
        debug("*E motor not ready")


PRI waitUntilMotorReady(): bDidFault
    bDidFault := FALSE
    if wheel.isReady() == false
        'debug("* wait motor ready...")
        repeat
            _, _, bDidFault, _ := wheel.testGetResults()
            if wheel.isReady()
                quit
            elseif bDidFault
                debug("*E Motor NOT Ready? FAULT!")
                quit
            else
                waitms(2)

    'if not bDidFault
    '    debug("* Motor ready, let's drive!")


PRI waitUntilMotorDone(): bDidFault, bBadStart
    bDidFault := FALSE
    bBadStart := FALSE
    if not wheel.isTurning()
         debug("* wait until motor starts...")
         repeat
            _, _, bDidFault, _ := wheel.testGetResults()
            if wheel.isTurning()
                quit
            elseif bDidFault
                bBadStart := TRUE
                debug("*E NOT turning? Start ended w/FAULT!")
                quit
            else
                waitms(2)

    if not bDidFault and wheel.isStopped() == false
        debug("* wait until motor finishes...")
        repeat
            _, _, bDidFault, _ := wheel.testGetResults()
            if wheel.isStopped()
                quit
            elseif bDidFault
                debug("*E NOT Stopped?  wait Finish ended w/FAULT!")
                quit
            else
                waitms(2)

    if not bDidFault
        debug("* Motor stopped!")

PRI showPowerSetting(ePower)
    CASE ePower
        wheel.PWR_6p0V:
            debug("* PWR - 6.0V")
        wheel.PWR_7p4V:
            debug("* PWR - 7.4V")
        wheel.PWR_11p1V:
            debug("* PWR - 11.1V")
        wheel.PWR_12p0V:
            debug("* PWR - 12.0V")
        wheel.PWR_14p8V:
            debug("* PWR - 14.8V")
        wheel.PWR_18p5V:
            debug("* PWR - 18.5V")
        wheel.PWR_22p2V:
            debug("* PWR - 22.2V")
        wheel.PWR_24p0V:
            debug("* PWR - 24.0V")
        wheel.PWR_25p9V:
            debug("* PWR - 25.9V")
        OTHER:
            debug("* PWR unknown value!!")

CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2023 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
