'' =================================================================================================
''
''   File....... isp_bldc_motor.spin2
''   Purpose.... Object providing control interface for a single BLDC motor
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Feb 2022
''   Updated.... 9 Feb 2022
''
'' =================================================================================================

CON { Public Interface Constants }

    '  ID where the P2 Eval Motor Board is plugged in (Enum)
    '    (Names of supported PinGroups)
    #0[16], PINS_P0_P15, PINS_P16_P31, PINS_P32_P47
    ' return value when user makes bad choice
    INVALID_PIN_BASE = -1

    ' Names of supported voltages
    #0, PWR_Unknown, PWR_6V, PWR_12V, PWR_18p5V, PWR_24V
    ' return value when user makes bad choice
    INVALID_VOLTAGE = -1

    ' Driver Distance-Units Enum (Inches, Millimeters, Feet, Meters, Miles, Kilometers)
    #0, DDU_Unknown, DDU_IN, DDU_MM, DDU_FT, DDU_M, DDU_MI, DDU_KM

    ' Driver Rotation-Units Enum
    #0, DRU_Unknown, DRU_DEGREES, DRU_ROTATIONS

    ' Driver Time-Unit Enum
    #0, DTU_Unknown, DTU_MILLISEC, DTU_SEC

    ' Driver Status Enum
    #10, DS_Unknown, DS_MOVING, DS_HOLDING, DS_OFF

    #0, SM_Unknown, SM_FLOAT, SM_BRAKE

OBJ { objects / constants included by this object }

    user    :   "isp_bldc_motor_userconfig"     ' driver configuration

CON { test pins for LA measurement }

    ' PIN_8 - PIN_15
    TEST_BASE_PIN = 8
    TEST_ALL_PINS = TEST_BASE_PIN addpins 7
    TEST_PIN_OUTER_LOOP = TEST_BASE_PIN + 0       ' LA grey
    TEST_PIN_SENSE_LOOP = TEST_BASE_PIN + 1       ' LA red
    TEST_PIN_DRIVER_LOOP = TEST_BASE_PIN + 2            ' LA Yellow
    TEST_PIN_DRIVER_TMR = TEST_BASE_PIN + 3             ' LA Green

DAT { misc time constants / debug enable }

    ticks125ms  long    0                     ' time constants based on CPU freq
    ticks500us  long    0                     '
    ticks750us  long    0                     '
    ticks800us  long    0                     '
    ticks1ms    long    0                     '
    ticks1us    long    0                     '

    useDebug   long    TRUE

    circInMMx10    long     0

PUB null()

'' This is not a top-level object

PUB start(eMotorBasePin, eMotorVoltage) : ok | legalBase
'' Specify motor control board connect location for this motor and start the driver
        ' setup runtime constants
        ticks1ms   := (CLKFREQ / 1_000)
        ticks1us   := (CLKFREQ / 1_000_000)
        ticks125ms := ticks1ms * 125
        ticks500us := (ticks1ms * 500) / 1_000  ' phrased this way for better result
        ticks750us := (ticks1ms * 750) / 1_000  ' phrased this way for better result
        ticks800us := (ticks1ms * 800) / 1_000  ' phrased this way for better result

        ' setup driver parameters based on clock rate
        ctrl_ticks := ticks500us
        dead_gap    := (ticks1us * 80) / 1_000    ' 80 of these made into "value nS"
        duty_min    := 100 << 4 #> dead_gap << 4
        pwm_limit   := FRAME - dead_gap     'PWM duty hard limit 1/2 freq of PWM
        duty_max    := pwm_limit << 4 <# pwm_limit << 4

        loop_ticks := 0
        minDrvTics := 65535
        drv_state := DS_Unknown

        maxMmPerSec := 0
        maxFps := 0
        maxMPH := 0
        maxkPH := 0


        circInMMx10 := circOfWheelOfDia(user.MOTOR_DIA_HALF_IN_UNITS)

    ' ensure we only use legal values
    legalBase := eMotorBasePin
    CASE eMotorBasePin
        PINS_P0_P15 :
        PINS_P16_P31 :
        PINS_P32_P47 :
        OTHER :
            legalBase := INVALID_PIN_BASE

    ' if legal base-pin then start cog
    if legalBase <> INVALID_PIN_BASE
        pinbase := legalBase        ' record base pin number
        params_ptr := @params       ' point to driver variables
        setTargetAccel(0)           ' do NOT move at startup

        ok := motorCog := coginit(NEWCOG, @driver, @pinbase) + 1
        if motorCog == 0    ' did fail?
            debug("!! ERROR filed to start Motor Control task")

PUB startSenseCog() : ok
    ok := senseCog := cogspin(NEWCOG, taskPostionSense(), @taskStack) + 1
    if senseCog == 0    ' did fail?
        debug("!! ERROR filed to start Position Sense task")

PUB stop()
'' Stop cog and release pins assigned to this motor

    if motorCog     ' stop motor drive
        cogstop(motorCog - 1)
        motorCog := 0

    ' Bottom 8 pins are sensed, top 8 are driven, so clear only the top 8
    pinclear(pinbase+8 addpins 7)

    if senseCog     ' stop motor reads
        cogstop(senseCog - 1)
        senseCog := 0

PUB setAcceleration(rate)
'' Limit Acceleration to {rate} where {rate} is [??? - ???] mm/s squared (default is ??? mm/s squared)

PUB setMaxSpeed(speed)
'' Limit top-speed to {speed} where {speed} is [??? - ???] mm/s (default is ??? mm/s)

PUB setMaxSpeedForDistance(speed)
'' Limit top-speed of driveDistance() operations to {speed} where {speed} is [??? - ???] mm/s (default is ??? mm/s)

PUB calibrate()
'' (we may need this?)

PUB holdAtStop(bEnable)
'' Informs the motor control cog to actively hold postiion (bEnable=true) or coast (bEnable=false) at end of motion
    stop_mode := (bEnable) ? SM_BRAKE : SM_FLOAT

PUB resetTracking()
'' Resets the position tracking values returned by getDistance() and getRotations()
    trk_mm := trk_90ths := 0    ' reset all of our trackers (they are incremented in sensor loop)

CON { --- Subsystem Control --- }

PUB driveForDistance(distance, distanceUnits)
'' Control the forward direction of this motor using the {distance} and {distanceUnits} inputs.
'' Turn the motor on then turn it off again after it reaches the specified {distance} in {distanceUnits} [DDU_IN or DDU_MM].
'' AFFECTED BY:  setAcceleration(), setMaxSpeedForDistance(), holdAtStop()

PUB driveAtPower(power) | limitPwr
'' Control the speed and direction of this motor using the {power, [(-100) to 100]} input.
'' Turns the motor on at {power}.
'' AFFECTED BY:  setAcceleration(), setMaxSpeed(), holdAtStop()
    limitPwr :=  -100 #> power <# 100

PUB stopAfterRotation(rotationCount, rotationUnits)
'' Stops the motor after it reaches {rotationCount} of {rotationUnits} [DRU_DEGREES, DRU_ROTATIONS].
'' USE WITH:  driveDirection(), drive()

PUB stopAfterDistance(distance, distanceUnits)
'' Stops the motor after either it reaches {distance} specified in {distanceUnits} [DDU_IN or DDU_MM].
'' USE WITH:  driveDirection(), drive()

PUB stopAfterTime(time, timeUnits)
'' Stops the motor, after {time} specified in {timeUnits} [DTU_IN_MILLISEC or DTU_IN_SEC] has elapsed.
'' USE WITH:  driveDirection(), drive()

PUB stopMotor()
'' Stops the motor, killing any motion that was still in progress
''  AFFECTED BY:holdAtStop()

CON { --- Subsystem Status --- }

PUB getDistance(distanceUnits) : distanceInUnits
'' Returns the distance in {distanceUnits} [DDU_IN or DDU_MM] travelled by this motor since last reset

PUB getRotationCount(rotationUnits) : rotationCount
'' Returns accumulated {rotationCount} in {rotationUnits} [DRU_DEGREES, DRU_ROTATIONS], since last reset, for this motor.

PUB getStatus() : eStatus
'' Returns status of motor drive state for this motor: enumerated constant: DS_MOVING, DS_HOLDING or DS_OFF
    eStatus := DS_OFF   ' force this for now...

PUB validBasePinForChoice(userBasePin) : legalBasePin
'' VALIDATE users' base-pin choice returns legalBasePin or INVALID_PIN_BASE
    legalBasePin := userBasePin
    CASE userBasePin
        PINS_P0_P15 :
        PINS_P16_P31 :
        PINS_P32_P47 :
        OTHER :
            legalBasePin := INVALID_PIN_BASE

PUB validVoltageForChoice(userVoltage) : legalVoltage
'' VALIDATE users' voltage choice returns legalVoltage or INVALID_VOLTAGE
    legalVoltage := userVoltage
    CASE userVoltage
        PWR_6V :
        PWR_12V :
        PWR_18p5V :
        PWR_24V :
        OTHER :
            legalVoltage := INVALID_VOLTAGE


CON { --- PRIVATE Utility Methods --- }

PRI circOfWheelOfDia(diaInInchTenths) : nCircInMMx10
' Return circumference in mm for diameter in inches
'  FIXME: UNDONE replace this with math!
'     circumference = 2*pi*r - where r is 1/2 * dia
'     circumference in mm = circumference in inches x 25.4

    nCircInMMx10 := 0
    if diaInInchTenths == 65
        ' our 6.5 in wheel
        '  diameter is 6.5"
        '  radius is 3.25"
        '  cirumference is 20.42035"
        '   in mm is: 518.67689mm
        nCircInMMx10 := 5187

PRI setTargetAccel(nTgtIncr)
    targetIncre := nTgtIncr
    targetIncreInM := nTgtIncr / 10_000

CON { --- HDMI Debug Support --- }

CON { Constants for HDMI Debug }

    DBG_GROUPS_CT = 3
    DBG_MAX_VARS_IN_GROUP = 7

VAR { Data Structure for HDMI Debug }

    long    pTitlesAr[DBG_GROUPS_CT + 1]    ' first value is max vars
    long    pVarCtAr[DBG_GROUPS_CT]
    long    pNamesAr[DBG_GROUPS_CT*DBG_MAX_VARS_IN_GROUP]
    long    pValsAr[DBG_GROUPS_CT*DBG_MAX_VARS_IN_GROUP]

DAT { Literals for HDMI Debug }
' motor drive data
    nameTitle1  byte    "Motor Drive",0
    name10      byte    "hall",0
    name11      byte    "pos",0
    name12      byte    "duty",0
    name13      byte    "err",0
    name14      byte    "loopTicks",0
    name15      byte    "state",0
    name16      byte    "FAULT",0
    nextAddr1
    dataLen1     long    @nextAddr1 - @nameTitle1

' motor sense data
    nameTitle2  byte    "Motor Sense",0
    name20      byte    "RPM 10ths",0
    name21      byte    "RPM",0
    name22      byte    "cnts/sec",0
    name23      byte    "delta",0
    nextAddr2
    dataLen2     long    @nextAddr2 - @nameTitle2

' motor rate  data
    nameTitle3  byte    "Motor Rate(.1)",0
    name30      byte    "RPM",0
    name31      byte    "cnts/sec",0
    name32      byte    "f/s",0
    name33      byte    "MPH",0
    name34      byte    "kM/H",0
    name35      byte    "mm/s",0
    name36      byte    "Angl/10k",0
    nextAddr3
    dataLen3     long    @nextAddr3 - @nameTitle3

PRI loadDisplayList() | nGrpOffset, nValsGrpOffset, nVarsInGroup
' do internal one-time setup of driver debug data
    nGrpOffset := 0
    nVarsInGroup := 7
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle1
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
    ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name10
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name11
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name12
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name13
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name14
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name15
    LONG[@pNamesAr][nValsGrpOffset + 6] := @name16
    LONG[@pValsAr][nValsGrpOffset + 0] := @hall
    LONG[@pValsAr][nValsGrpOffset + 1] := @pos
    LONG[@pValsAr][nValsGrpOffset + 2] := @duty
    LONG[@pValsAr][nValsGrpOffset + 3] := @err
    LONG[@pValsAr][nValsGrpOffset + 4] := @loop_ticks
    LONG[@pValsAr][nValsGrpOffset + 5] := @drv_state
    LONG[@pValsAr][nValsGrpOffset + 6] := @fault

    nGrpOffset := 1
    nVarsInGroup := 4
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle2
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
     ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP ' mult by vars in prior group
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name20
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name21
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name22
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name23
    LONG[@pValsAr][nValsGrpOffset + 0] := @rpmIn10ths
    LONG[@pValsAr][nValsGrpOffset + 1] := @rpm
    LONG[@pValsAr][nValsGrpOffset + 2] := @cntsInSec
    LONG[@pValsAr][nValsGrpOffset + 3] := @deltaTicks

    nGrpOffset := 2
    nVarsInGroup := 7
    LONG[@pTitlesAr][nGrpOffset] := @nameTitle3
    LONG[@pVarCtAr][nGrpOffset] := nVarsInGroup
     ' populate the empty name/value ptr tables
    nValsGrpOffset := nGrpOffset * DBG_MAX_VARS_IN_GROUP ' mult by vars in prior group
    LONG[@pNamesAr][nValsGrpOffset + 0] := @name30
    LONG[@pNamesAr][nValsGrpOffset + 1] := @name31
    LONG[@pNamesAr][nValsGrpOffset + 2] := @name32
    LONG[@pNamesAr][nValsGrpOffset + 3] := @name33
    LONG[@pNamesAr][nValsGrpOffset + 4] := @name34
    LONG[@pNamesAr][nValsGrpOffset + 5] := @name35
    LONG[@pNamesAr][nValsGrpOffset + 6] := @name36
    LONG[@pValsAr][nValsGrpOffset + 0] := @maxRpmIn10ths
    LONG[@pValsAr][nValsGrpOffset + 1] := @maxCntsInSec
    LONG[@pValsAr][nValsGrpOffset + 2] := @maxFps
    LONG[@pValsAr][nValsGrpOffset + 3] := @maxMPH
    LONG[@pValsAr][nValsGrpOffset + 4] := @maxkPH
    LONG[@pValsAr][nValsGrpOffset + 5] := @maxMmPerSec
    LONG[@pValsAr][nValsGrpOffset + 6] := @targetIncreInM

    ' tell our table size to reader
    nGrpOffset := 3
    LONG[@pTitlesAr][nGrpOffset] := DBG_MAX_VARS_IN_GROUP

PUB getDebugData() : nGroups, pGroupTitles, pGroupNames, pGroupVarCts, pGroupVars | tmpAbsPtr
'' Return pointers to debug data structures for this motor-object instance
    loadDisplayList()
    nGroups := DBG_GROUPS_CT
    pGroupTitles := @pTitlesAr         ' pStr = long[pTitlesAr][grpIdx]
    pGroupVarCts := @pVarCtAr          ' nNbrGrpVars = long[pVarCtAr][grpIdx]
    pGroupNames := @pNamesAr           ' pGrpNameAr = long[pNamesAr][grpIdx], pVarName = long[pNameAr][varIdx]  where varIdx is from 0 to nNbrGrpVars - 1
    pGroupVars := @pValsAr             ' pGrpLongVar = long[pValsAr][grpIdx][varIdx]  where varIdx is from 0 to nNbrGrpVars - 1
    debug("* -------------")
    debug("* MOTR DAT values: ", uhex_long(@hall), uhex_long_array(@hall, 4))
    debug("* MOTR VAR values: ", uhex_long(@rpmIn10ths), uhex_long_array(@rpmIn10ths, 4))
    debug("* NAMEs SOURCE1: ", uhex_long(@nameTitle1), uhex_byte_array(@nameTitle1, dataLen1))
    debug("* NAMEs SOURCE2: ", uhex_long(@nameTitle2), uhex_byte_array(@nameTitle2, dataLen2))
    debug("* NAMEs SOURCE3: ", uhex_long(@nameTitle3), uhex_byte_array(@nameTitle3, dataLen3))
    debug("* -------------")
    debug("* MOTR DL title: ", uhex_long(@pTitlesAr), uhex_long_array(@pTitlesAr, DBG_GROUPS_CT + 1))
    debug("* MOTR DL VarCt: ", uhex_long(@pVarCtAr), uhex_long_array(@pVarCtAr, DBG_GROUPS_CT))
    debug("* MOTR DL Names: ", uhex_long(@pNamesAr), uhex_long_array(@pNamesAr, DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP))
    debug("* MOTR DL Values: ", uhex_long(@pValsAr), uhex_long_array(@pValsAr, DBG_GROUPS_CT * DBG_MAX_VARS_IN_GROUP))
    debug("* -------------")
    debug("* MOTR PARM values: ", uhex_long(@nGroups), uhex_long_array(@nGroups, 5))
    debug("* -------------")
    debug("* MOTR Sent: ", udec(nGroups), uhex_long(pGroupTitles), uhex_long(pGroupNames), uhex_long(pGroupVarCts), uhex_long(pGroupVars))
    debug("* =============")

CON { --- The Motor driver --- }

  STABILIZE_LOOP_CT = 2000

PUB findFaultForCurrV() | bStartingUp, runLoopCount, startTicks, priorHall, faultHoldoffCtr, currTarget, minRange, maxRange, rangeStep
'' invoke start() before invoke of findFaultForCurrV()

    minRange := 60_000_000
    maxRange := 685_000_000
    rangeStep := 25_000_000

    repeat

        pinlow(TEST_ALL_PINS)

        debug("* RUN: ", udec(minRange), udec(maxRange), udec(rangeStep))

        runLoopCount := 15_000 ' count of 1 ms loops (15 seconds)
        bStartingUp := true
        setTargetAccel(0)
        fault := faultHoldoffCtr := 0

        repeat currTarget from minRange to maxRange step rangeStep

            pintoggle(TEST_PIN_OUTER_LOOP)
            pintoggle(TEST_PIN_OUTER_LOOP)

            startTicks := getct()

            if bStartingUp == true and targetIncre == 0
                debug("-  ", udec(currTarget))
                setTargetAccel(currTarget)  ' request run at speed

            if drv_state == DCS_AT_SPEED
                debug("- at SPEED")
                bStartingUp := false

            if runLoopCount > 0 and drv_state == DCS_AT_SPEED
                runLoopCount--
                debug("-  ", udec(runLoopCount))
                if runLoopCount == 0
                    setTargetAccel(0)    ' request stop

            if drv_state == DCS_STOPPED and bStartingUp == false and targetIncre == 0
                debug("- stopped")
                quit    ' exit, this pass worked....

            if faultHoldoffCtr++ < STABILIZE_LOOP_CT            ' if still getting sense of motor hold-off faults
                fault~

            if fault and faultHoldoffCtr > STABILIZE_LOOP_CT    ' if fault, end this pass
                ' setup for next iteration
                debug("- FAULT at ", udec(currTarget), udec(rangeStep))
                minRange := currTarget - rangeStep
                maxRange := currTarget
                rangeStep := (maxRange - minRange) / 10
                fault := faultHoldoffCtr := 0
                setTargetAccel(0)
                quit   ' and exit

            waitct(startTicks + ticks1ms)    ' wait to create time base (1000 ok, 500 faults motor w/angle!!)

        debug("- out of loop?!")

        waitms(500)     ' kill time for 1/2 sec!

PUB testMotor() | priorHall, angleIncrement, faultHoldoffCtr, startTicks, runLoopCount, increment, decrement, angleTarget, bStartingUp
'' invoke start() before invoke of testMotor()
    if useDebug
        debug(`logic l title 'Hall Effect' pos 25 440 'Hall' 3)

        debug(`term t title 'Status' pos 650 650 size 30 1 textsize 20 update)

        debug(`scope r title 'Duty and Error' pos 363 439 size 256 256 samples 256 rate 50)
        debug(`r 'Duty' 0 `(pwm_limit<<4) 256 0)
        debug(`r 'Error' -128 128 256 0 15)

        debug(`scope s title 'Voltages' pos 105 60 size 512 300 samples 256 rate 256)
        debug(`s 'U' 0 `(FRAME) 128 170)
        debug(`s 'V' 0 `(FRAME) 128 170)
        debug(`s 'W' 0 `(FRAME) 128 170)
        debug(`s 'Iu' 0 2000 128 70)
        debug(`s 'Iv' 0 2000 128 70)
        debug(`s 'Iw' 0 2000 128 70)
        debug(`s 'P' 0 100 128 10)

    'pintoggle(TEST_ALL_PINS)
    'pintoggle(TEST_ALL_PINS)
    'pintoggle(TEST_ALL_PINS)
    pinlow(TEST_ALL_PINS)

    bStartingUp := true

    runLoopCount := 30_000 ' count of 1 ms loops (20 seconds)
    'runLoopCount := 30_000 ' count of 1 ms loops (30 seconds)
    'runLoopCount := 40_000 ' count of 1 ms loops (40 seconds)

    repeat
        pintoggle(TEST_PIN_OUTER_LOOP)
        pintoggle(TEST_PIN_OUTER_LOOP)

        startTicks := getct()
        ' @18.5V 10_000_000 is 5.8 RPM
        ' @18.5V 10_000_000 is 5.8 RPM

        if bStartingUp and targetIncre == 0
            setTargetAccel(144_375_000)  ' request run at speed

        if drv_state == DCS_AT_SPEED
            bStartingUp := false

        if runLoopCount > 0 && bStartingUp == false
            runLoopCount--
            if runLoopCount == 0
                setTargetAccel(0)    ' request stop

        if hall <> priorHall                    'if hall effect changed, update logic display
            priorHall := hall
            if useDebug
                debug(`l `ubin_byte_(hall))

        if useDebug
            debug(`t 0 '`sdec(duty, pos)' update)       'update terminal and scope displays
            debug(`r `sdec_(duty, err))
            debug(`s `sdec_long_array_(@drive_u,3) `sdec_long_array_(@sense_u,4))

        maxDrvTics := loop_ticks > maxDrvTics ? loop_ticks : maxDrvTics
        minDrvTics := loop_ticks > 10 && loop_ticks < minDrvTics  ? loop_ticks : minDrvTics

        if faultHoldoffCtr++ < STABILIZE_LOOP_CT            ' if still getting sense of motor hold-off faults
            fault~
        if fault and faultHoldoffCtr > STABILIZE_LOOP_CT and 0   ' if fault, shut down
            if useDebug
                debug(`t 0 'FAULT' update)
            stop()
            repeat    ' and lock here!

        'waitus(1000)
        waitct(startTicks + ticks1ms)    ' wait to create time base (1000 ok, 500 faults motor w/angle!!)

CON { TASK position tracking }

  STACK_SIZE_LONGS = 48
  WINDOW_SIZE = 5

VAR { arrays }
    long    countsWindow[WINDOW_SIZE]
    long    taskStack[STACK_SIZE_LONGS]

PRI taskPostionSense() | senseStartTicks, posThis8th, mmThis8th, fValue, fFps
' TASK: every 1/8 Sec (8Hz) read motor pos and calculate RPM and countOf90ths/Sec

    longfill(@countsWindow, 0, WINDOW_SIZE) ' zero our window accum
    maxRpmIn10ths := maxCntsInSec := maxMmPerSec := 0
    maxFps := maxMPH := maxkPH := 0

    repeat
        senseStartTicks := getct()
        pintoggle(TEST_PIN_SENSE_LOOP)
        pintoggle(TEST_PIN_SENSE_LOOP)

        newCntsInSec := distanceIn90ths(pos)            ' Read the next sensor value
        windowSum -= LONG[@countsWindow][winIndex]          ' Remove the oldest entry from the sum
        long [@countsWindow][winIndex] := newCntsInSec      ' place the newest reading into the window
        windowSum += newCntsInSec                           ' Add the newest reading to the sum
        winIndex := (winIndex + 1) +// WINDOW_SIZE          ' Increment the index, and wrap to 0 if it exceeds the window size
        if winEntryCt < WINDOW_SIZE                         ' incr number of samples in sum until is window size
            winEntryCt++

        cntsInSec := (windowSum / winEntryCt) * 8                 ' moving average, scaled
        rpmIn10ths := (cntsInSec * 60) / 9
        rpm := rpmIn10ths / 10
        rpmTenths := rpmIn10ths +// 10

        maxRpmIn10ths := max(rpmIn10ths, maxRpmIn10ths)
        maxCntsInSec := max(cntsInSec, maxCntsInSec)

        posThis8th := windowSum / winEntryCt
        trk_90ths += posThis8th
        ' pos is in hall-steps of 4Degr each.
        ' circumference of wheel is in mm x10
        '   degrees of rotation is pos * 4
        '   number of rotations is degrees / 360
        '   dist in mm is (circInMMx10 * rotations) / 10
        mmThis8th := (((posThis8th * 4) * circInMMx10) / 360) / 10
        trk_mm += mmThis8th
        mmPerSec := (((cntsInSec * 4) * circInMMx10) / 360)
        maxMmPerSec := max(mmPerSec, maxMmPerSec)
        ' RULE: 1 mm/sec = 0.00328084 ft/sec
        fFps := float(mmPerSec) *. 0.00328084 /. 10.0
        ftPerSec := trunc(fFps *. 10.0)
        ' RULE: 1 mm/sec = 0.0036 km/hr
        fValue := float(mmPerSec) *. 0.0036 /. 10.0
        kmh := trunc(fValue *. 10.0)
        ' RULE: 1 ft/sec = 0.681818 mi/hr
        fValue := fFps *. 0.681818
        mph := trunc(fValue *. 10.0)
        maxFps := MAX(ftPerSec, maxFps)
        maxMPH := MAX(mph, maxMPH)
        maxkPH := MAX(kmh, maxkPH)

        deltaTicks := getct() - senseStartTicks

        ' code uses about 1_880 ticks. This is little over 9 uS  @200MHz clock
        '   wait remainder of 125 mSec before next sample
        waitct(senseStartTicks + ticks125ms)    ' wait to create "sense" time-base

PRI max(a,b) : nMax
' return max of a or b
    nMax := (a > b) ? a : b

PRI distanceIn90ths(newPos) : n90ths
    if newPos == priorPos
        n90ths := 0
    elseif newPos < 0
        ' handle pos negative case
        if priorPos < 0
            '  -7 -> -9 = abs(-9) - abs(-7) = abs(2) = 2
            '  -11 -> -9 = abs(-9) - abs(-11) = abs(-2) = 2
            n90ths := abs(abs(newPos) - abs(priorPos))
        else
            '  9 -> -9 = 18 = abs(9) + abs(-9) = 18
            n90ths := abs(newPos) + abs(priorPos)
    else
        ' handle pos positive case
        if priorPos < 0
            ' -9 -> 6 = 6 + abs(-9) = 15
            ' -3 -> 6 = 6 + abs(-3) = 9
            n90ths := newPos + abs(priorPos)
        else
            ' 9 -> 6 = 6 - 9 = abs(-3) = 3
            ' 9 -> 12 = 12 - 9 = abs(3) = 3
            n90ths := abs(newPos - priorPos)
    priorPos := newPos


CON { driver interface Constants}

    '  DCS_STOPPED          - motor is stopped
    '  DCS_SPIN_UP          - motor is ramping up to speed, then will be at AT_SPEED
    '  DCS_AT_SPEED         - motor is holding at speed
    '  DCS_SPIN_DN          - motor is stopping, then will be at STOPPED
    '  DCS_SLOWING_DN       - motor is slowing down (just a speed change), then will be at AT_SPEED
    '  DCS_SLOW_TO_CHG      - motor is slowing down to change direction, then will be SPEEDING_UP
    '
    #0, DCS_STOPPED, DCS_SPIN_UP, DCS_AT_SPEED, DCS_SPIN_DN, DCS_SLOWING_DN, DCS_SLOW_TO_CHG


CON { driver internal Constants}

    FRAME    = 1024 * 6 / 2       '6 ADC samples make 1 PWM frame, divide by two for triangle PWM
'    OFFSET   = 40                ' enforced dead time in clock cycles (at 200_000_000 -> 200 nSec)
'    OFFSET   = 80                ' enforced dead time in clock cycles (at 200_000_000 -> 400 nSec)
'    OFFSET   = 108                ' enforced dead time in clock cycles (at 270_000_000 -> 400 nSec)
'    PWMLIM   = FRAME - OFFSET     'PWM duty hard limit 1/2 freq of PWM
    ' Driver Control State Enum:
VAR { Data Structure for PASM Driver }
  ' remember these are zeroed at run time
    long    motorCog                            ' record ID of cog we start (0 = not started)
    long    senseCog                            ' record ID of cog we start (0 = not started)

    long    maxDrvTics                          ' accumulators for study of driver
    long    minDrvTics
    long    targetIncreInM

    long    pinbase                             ' 1 long                must set initially
    long    params_ptr                          ' 1 long                must set initially
    ' / ----------------------------
    long    targetIncre                         ' 1 long                must set to cause motion
    ' 14 longs come from driver, the 14th, fault also from driver but only when happens
    long    drive_u, drive_v, drive_w           ' 3 sequential longs    returns data continually
    long    sense_u, sense_v, sense_w, sense_i  ' 4 sequential longs    returns data continually
    '  ----- HDMI monitored! ----
    long    hall, pos, duty, err                ' 4 sequential longs    returns data continually
    long    loop_ticks                          ' 1 sequential long     returns control loop duration in ticks continually
    long    loop_ctcks                          ' 1 sequential long     returns drive loop duration in ticks continually
    long    drv_state                           ' enum [DCS_STOPPED, DCS_SPIN_UP, DCS_AT_SPEED, DCS_SPIN_DN]
    ' \ ----------------------------
    long    fault                               ' 1 sequential long     written to 1 on fault

VAR { Data for Motor Position Tracking }

    long    winIndex
    long    winEntryCt
    long    newCntsInSec
    long    windowSum
    '  ----- HDMI monitored! ----
    long    rpmIn10ths
    long    rpm
    long    cntsInSec
    long    deltaTicks
    long    maxRpmIn10ths
    long    maxFps
    long    maxMPH
    long    maxkPH
    long    maxMmPerSec
    long    maxCntsInSec
    '  --------------------------
    long    priorPos
    long    rpmTenths
    long    mmPerSec
    long    ftPerSec
    long    kmh
    long    mph
    '  --------------------------
    long    trk_mm
    long    trk_90ths

DAT  {  DRIVER w/Motor Parameters  }
'

    ' ------ HDMI monitored! -----
    ' (driver reads this into own memory each iteration)
    params                                  ' motor-control parameters, reloaded every frame
    offset_fwd  long    20 frac 360         ' 96 frac 360 (Doug's motor)
    offset_rev  long    340 frac 360        ' 228 frac 360 (Doug's motor)
    duty_min    long    0                   ' was 100 << 4 #> OFFSET << 4 but now runtime loaded
    duty_max    long    0                   ' was PWMLIM << 4 <# PWMLIM << 4 but now runtime loaded
    duty_up     long    16
    duty_dn     long    4
    dead_gap    long    0           ' this was OFFSET but now runtime loaded
    pwm_limit   long    0           ' this was PWMLIM but now runtime loaded
    ctrl_ticks  long    0           ' # clock ticks needed to create 2 kHz motor control loop
    stop_mode   long    SM_FLOAT    ' enum: [SM_FLOAT, SM_BRAKE]
    ramp_up     long    12_500      ' 25k angle increment: add this every 500 uSec to ramp up to speed
    ramp_dn     long    25_000      ' 25k angle decrement: subtract this every 500 uSec to ramp down to 0
    ' ------ --------------- -----

'
' PASM Driver Program
'
                org

driver          rdlong  x, ptra++                   ' get base pin
                rdlong  params_ptr_, ptra++         ' get parameters pointer
                add     ptra, #1*4                  ' point to return data, angle is at long index [-1]

                mov     drv_state_, #DCS_STOPPED    ' motor is currently stopped

                or      all_pins, x                 ' make all-pins variable
                add     drive_pins, x               ' make drive-pins variable

                drvl    drvrLoopPnFld                ' preset test pins to low
                drvl    drvrTmrPnFld

                mov     y, #0                       ' make single-pin variables
.pin            altd    y, #adc_u_i
                mov     0-0, x
                add     x, #1
                incmod  y, #15      wc
    if_nc       jmp     #.pin

                dirl    all_pins                    ' disable PWM and ADC pins for configuration

                wrpin   adc_modes+0, adc_u_i        ' set up ADC pins
                wrpin   adc_modes+0, adc_v_i
                wrpin   adc_modes+0, adc_w_i
                wrpin   adc_modes+0, adc_i

                wxpin   #10, adc_u_i                ' (#10 = 1024-clock / 11-bit conversion)
                wxpin   #10, adc_v_i
                wxpin   #10, adc_w_i
                wxpin   #10, adc_i

                wrpin   pwmn, pwm_u_l               ' set up PWM pins
                wrpin   pwmt, pwm_u_h
                wrpin   pwmn, pwm_v_l
                wrpin   pwmt, pwm_v_h
                wrpin   pwmn, pwm_w_l
                wrpin   pwmt, pwm_w_h

                wxpin   fram, pwm_u_l
                wxpin   fram, pwm_u_h
                wxpin   fram, pwm_v_l
                wxpin   fram, pwm_v_h
                wxpin   fram, pwm_w_l
                wxpin   fram, pwm_w_h

                dirh    all_pins                        ' enable ADC and PWM pins simultaneously for phase-locked operation

                dirl    hall_u                          ' remake HALL pins inputs (they were in-between ADC and PWM pins)
                dirl    hall_v
                dirl    hall_w

                mov     duty_, #0                       ' reset duty
                mov     pos_, #0                        ' reset pos
                mov     loop_dtcks_, #0                 ' just in case
                mov     drv_incr, #0                    ' reset incr to stopped
                mov     prior_incr, #0                 ' just in case

                ' preset our starting angle
                call    #.initAngleFmHall   ' NOTE: may not need this a SPIN_UP does this

                ' start driver
                jmp     #.run1stTime
    ' -------------------------------------------------------------------------


.loop           jnct1   #.noAdjust
    ' =========================================================================
    '  MOTOR DRIVE LOOP - runs at 2.0 kHz (500.0 uSec period)
    '       time to adjust angle...
    ' -------------------------------------------------------------------------
.run1stTime
                getct   ctrlSrtTix                      ' remember when we started this loop
                outnot  drvrTmrPnFld                    ' toggle TEST marker pin
                outnot  drvrTmrPnFld

                ' let's see if user wants to change speed
                ' have new drive command?
                rdlong  tgt_incr, ptra[-1]              ' get rate of increment ( +/- drive power, or 0 stop)
                cmp     prior_incr, tgt_incr        wz  ' Q: do we have a new request?
    if_z        jmp     #.currRqst      ' nope, just continue what we are doing

    ' ====================================
.newRqst    ' have new request
            ' determine what we need to do
    ' ====================================
                ' if NEW request is stop
                cmp     tgt_incr, stop_requst       wz  ' Q: is stop request?
    if_z        mov     prior_incr, tgt_incr            ' have new request - set this a latest prior!
    if_z        mov     drv_state_, #DCS_SPIN_DN        ' yes, so start ramp down
    if_z        jmp     #.rampDn
                ' have start or speed adjustment
                cmp     drv_state_, #DCS_STOPPED    wz  ' Q: is start request?
    if_z        mov     prior_incr, tgt_incr            ' have new request - set this a latest prior!
    if_z        mov     drv_state_, #DCS_SPIN_UP        ' yes, go ramp up
    if_z        jmp     #.rampUp

    ' ------------------------------------
               ' no, We have a speed adjustment (determine how to do...)
                '  NOTEs: [ + >> +, + >> -, - >> -, - >> +]
                '    + to - -> make direction change (slow down, ramp up in other direction)
                '    - to + -> make direction change (slow down, ramp up  in other direction)
                '    + to larger + -> ramp up to new
                '    + to smaller + -> ramp down to new
                '    - to larger - -> ramp up to new
                '    - to smaller - -> ramp down to new

                ' first do we have same sign?
                testb   prior_incr, #31     wc      ' find dual '-' signs (CY=both neg)
                testb   tgt_incr, #31       andc
    if_c        jmp     #.endSame
                testbn  prior_incr, #31     wc      ' find dual '+' signs (CY=both pos)
                testbn  tgt_incr, #31       andc
.endSame
    if_nc       jmp     #.notSame
.haveSame   ' we have prior and new with same sign, so should we slow down or speed up?
                ' let's change speed
                cmps    prior_incr, tgt_incr        wcz ' Q: Should we slow dn or speed up? (CY=speed up)
                mov     prior_incr, tgt_incr            ' have new request - set this a latest prior!
    if_c        mov     drv_state_, #DCS_SPIN_UP        ' CY=1: speed up
    if_c        jmp     #.rampUp
    if_nc       mov     drv_state_, #DCS_SLOWING_DN     ' CY=0: slow down
    if_nc       jmp     #.slowDn

    ' ------------------------------------
.notSame    ' we have prior and new but NOT the same sign, let's slowdown then change direction
                ' let's change direction
                mov     prior_incr, tgt_incr            ' have new request - set this a latest prior!
                mov     drv_state_, #DCS_SLOW_TO_CHG
                jmp     #.slow2Chg


    ' ====================================
.currRqst   ' No new request, continue with
            '  current request
    ' ====================================
.chkStop        cmp     drv_state_, #DCS_STOPPED    wz
    if_z        jmp     #.endRqst                       ' nothing to do, just leave
                ' motor is running, if ramp do ramp, else increment
.chkUp          cmp     drv_state_, #DCS_SPIN_UP    wz
    if_nz       jmp     #.chkDn                         ' not this, go check next
.rampUp
                ' if we don't have it, preset our starting angle (assume motor moved during float!)
                cmp     stop_mode_, #SM_FLOAT       wz  ' if we are "floating" pins at stop
    if_z        or      drv_incr, drv_incr          wz  ' -and- we are stopped, just about to spin up
    if_z        call    #.initAngleFmHall               ' then, let's first get motor initial angle for smooth startup
                ' do next UP adjustment or set at-speed
                testb   tgt_incr, #31               wc  ' Q: moving FWD or REV? (CY=REV)
    if_nc       add     drv_incr, ramp_up_              ' FWD: increase increment (speeding up)
    if_c        sub     drv_incr, ramp_up_              ' REV: decrease increment (speeding up)
                cmps    tgt_incr, drv_incr          wc  ' Q: Did we exceed target?
    if_c        mov     drv_incr, tgt_incr              ' yes, reset to target!
                cmps    tgt_incr, drv_incr          wz  ' Q: Are we at target? (compare again to handle both cases)
    if_z        mov     drv_state_, #DCS_AT_SPEED       ' yes, show we got here!
                jmp     #.justIncr      ' go increment motor angle, then exit

    ' ------------------------------------
.chkDn          cmp     drv_state_, #DCS_SPIN_DN    wz
    if_nz       jmp     #.chkSlow2Chg
.rampDn
                ' do next DOWN adjustment or set stopped
                '  (increment > 0, we are not stopped)
                testb   tgt_incr, #31               wc  ' Q: moving FWD or REV? (CY=REV)
    if_nc       sub     drv_incr, ramp_dn_              ' FWD: decrease increment (slowing down)
    if_c        add     drv_incr, ramp_dn_              ' REV: increase increment, toward zero (slowing down)
                cmps    drv_incr, #0                wcz
    if_nc_and_nz jmp    #.justIncr
                sub     drv_incr, drv_incr              ' set to zero
                mov     drv_state_, #DCS_STOPPED        ' report that we are stopped
                ' if we are to freewheel the motor let's float all drive pins
                cmp     stop_mode_, #SM_FLOAT       wz
    if_z        dirl    drive_pins                      ' float all control pins (make them inputs)
                jmp     #.endRqst       ' motor STOPPED, just exit (w/o increment)

     ' ------------------------------------
.chkSlow2Chg    cmp     drv_state_, #DCS_SLOW_TO_CHG wz
    if_nz       jmp     #.chkSlowDn                     ' not this, go check next
.slow2Chg
                ' do next DOWN adjustment, if stopped do spinup
                '  (increment > 0, we are not stopped)
                testb   tgt_incr, #31               wc  ' Q: moving FWD or REV? (CY=REV)
    if_nc       sub     drv_incr, ramp_dn_              ' FWD: decrease increment (slowing down)
    if_c        add     drv_incr, ramp_dn_              ' REV: increase increment, toward zero (slowing down)
                cmps    drv_incr, #0                wcz
    if_nc_and_nz jmp    #.justIncr
                sub     drv_incr, drv_incr              ' set to zero
                mov     drv_state_, #DCS_SPIN_UP        ' report that we are stopped
                jmp     #.rampUp        ' go immediately start moving in opposite direction

    ' ------------------------------------
.chkSlowDn      cmp     drv_state_, #DCS_SLOWING_DN wz
    if_nz       jmp     #.justIncr          ' not this, guess we just increment motor angle!
.slowDn
                ' do next DOWN adjustment or set at speed
                '  (increment > 0, we are not stopped)
                testb   tgt_incr, #31               wc  ' Q: moving FWD or REV? (CY=REV)
    if_nc       sub     drv_incr, ramp_dn_              ' FWD: decrease increment (slowing down)
    if_c        add     drv_incr, ramp_dn_              ' REV: increase increment, toward zero (slowing down)
                cmps    tgt_incr, drv_incr          wc  ' Q: Did we exceed target?
    if_c        mov     drv_incr, tgt_incr              ' yes, reset to target!
                cmps    tgt_incr, drv_incr          wz  ' Q: Are we at target? (compare again to handle both cases)
    if_z        mov     drv_state_, #DCS_AT_SPEED       ' yes, show we got here!
                jmp     #.justIncr      ' go increment motor angle, then exit


    ' ------------------------------------
.justIncr   ' just do our increment of angle and we're done!
                add     angle, drv_incr
                jmp    #.endRqst
.endRqst
                getct   loop_ctcks_                 ' how long was this pass? send to host
                sub     loop_ctcks_, ctrlSrtTix
                ' reset timer (schedule next control time)
                mov     ctrlEndTix, ctrlSrtTix
                addct1  ctrlEndTix, cfg_ctcks_
                'jmp    #.noAdjust      ' done, fall thru
    ' -------------------------------------------------------------------------


.noAdjust
    ' =========================================================================
    '  MOTOR Speed Maintenance Loop - runs at 43.9 kHz (22.8 uSec period)
    '       keep our error rate low...
    ' -------------------------------------------------------------------------
                getct   drvrSrtTix                  ' remember when we started this loop
                call    #.wait4adc                  ' allow ADC rest period (Period 1 of 6)
                outnot  drvrLoopPnFld               ' toggle TEST marker pin
                outnot  drvrLoopPnFld

                rdpin   vio_levels+0, adc_u_i       ' VIO samples done, read them
                rdpin   vio_levels+1, adc_v_i
                rdpin   vio_levels+2, adc_w_i
                rdpin   vio_levels+3, adc_i

                wrpin   adc_modes+2, adc_u_i        ' switch ADC to pin
                wrpin   adc_modes+2, adc_v_i
                wrpin   adc_modes+2, adc_w_i
                wrpin   adc_modes+2, adc_i

                call    #.wait4adc                  ' allow ADC rest period (Period 2 of 6)
                call    #.wait4adc                  ' allow ADC rest period (Period 3 of 6)

                rdpin   sense_u_, adc_u_i           ' pin samples done, read them
                rdpin   sense_v_, adc_v_i
                rdpin   sense_w_, adc_w_i
                rdpin   sense_i_, adc_i

                wrpin   adc_modes+0, adc_u_i        ' switch ADC to GIO calibration
                wrpin   adc_modes+0, adc_v_i
                wrpin   adc_modes+0, adc_w_i
                wrpin   adc_modes+0, adc_i

                call    #.wait4adc                  ' allow ADC rest period (Period 4 of 6)

                sub     vio_levels+0, gio_levels+0  ' compute (3300 << 11) / (vio_level - gio_level)
                sub     vio_levels+1, gio_levels+1
                sub     vio_levels+2, gio_levels+2
                sub     vio_levels+3, gio_levels+3

                qdiv    numerator, vio_levels+0
                qdiv    numerator, vio_levels+1
                qdiv    numerator, vio_levels+2
                qdiv    numerator, vio_levels+3

                getqx   scl_levels+0
                waitx   #4
                getqx   scl_levels+1
                waitx   #4
                getqx   scl_levels+2
                waitx   #4
                getqx   scl_levels+3

                sub     sense_u_, gio_levels+0      ' compute (quotient * (pin_level - gio_level)) >> 11
                muls    sense_u_, scl_levels+0
                sar     sense_u_, #11

                sub     sense_v_, gio_levels+1
                muls    sense_v_, scl_levels+1
                sar     sense_v_, #11

                sub     sense_w_, gio_levels+2
                muls    sense_w_, scl_levels+2
                sar     sense_w_, #11

                sub     sense_i_, gio_levels+3
                muls    sense_i_, scl_levels+3
                sar     sense_i_, #11

                call    #.wait4adc                  ' allow ADC rest period (Period 5 of 6)

                rdpin   gio_levels+0, adc_u_i       ' GIO samples done, read them
                rdpin   gio_levels+1, adc_v_i
                rdpin   gio_levels+2, adc_w_i
                rdpin   gio_levels+3, adc_i

                wrpin   adc_modes+1, adc_u_i        ' switch ADC to VIO calibration
                wrpin   adc_modes+1, adc_v_i
                wrpin   adc_modes+1, adc_w_i
                wrpin   adc_modes+1, adc_i

                call    #.wait4adc                  ' allow ADC rest period (Period 6 of 6)

                mov     y, duty_                    ' feed three CORDIC operations to get phase drive levels
                shr     y, #4
                mov     x, angle
                qrotate y, x
                add     x, third
                qrotate y, x
                add     x, third
                qrotate y, x

                getqy   drive_u_                    ' get three CORDIC results
                getqy   drive_v_
                getqy   drive_w_

                mov     x, drive_u_                 ' get smallest drive level into x
                cmps    x, drive_v_         wc
    if_nc       mov     x, drive_v_
                cmps    x, drive_w_         wc
    if_nc       mov     x, drive_w_

                mov     y, drive_u_                 ' get largest drive level into y
                cmps    y, drive_v_         wc
    if_c        mov     y, drive_v_
                cmps    y, drive_w_         wc
    if_c        mov     y, drive_w_

                add     x, y                        ' sum smallest and largest, then divide by 2
                sar     x, #1

                sub     drive_u_, x                 ' subtract difference from drive levels
                sub     drive_v_, x
                sub     drive_w_, x

                add     drive_u_, bias              ' add center-bias and dead-time offsets to update PWMs
                add     drive_u_, dead_gap_
                wypin   drive_u_, pwm_u_l
                sub     drive_u_, dead_gap_
                wypin   drive_u_, pwm_u_h

                add     drive_v_, bias
                add     drive_v_, dead_gap_
                wypin   drive_v_, pwm_v_l
                sub     drive_v_, dead_gap_
                wypin   drive_v_, pwm_v_h

                add     drive_w_, bias
                add     drive_w_, dead_gap_
                wypin   drive_w_, pwm_w_l
                sub     drive_w_, dead_gap_
                wypin   drive_w_, pwm_w_h

                testp   hall_w              wc      ' read hall effect sensor
                rcl     hall_, #1
                testp   hall_v              wc
                rcl     hall_, #1
                testp   hall_u              wc
                rcl     hall_, #1
                and     hall_, #%111_111            ' (old << 3 | new) [ooo:nnn]
                altgb   hall_, #deltas              ' load byte deltas[hall_] -> [-1, 0, 1]
                getbyte x
                signx   x, #7                       ' sign-extend bit7
                add     pos_, x                     ' add to current pos_

                setq    #12-1                       ' load fresh parameter table (12 longs)
                rdlong  params_ptr_+1, params_ptr_

                cmpm    angle, prior_angle  wcz     ' if angle has changed, forward or reverse?
    if_nz       wrc     fwdrev
                mov     prior_angle, angle

                testb   fwdrev, #0          wc      ' determine error
                bitc    hall_, #3
                and     hall_, #%1111
                alts    hall_, #hall_angles
                mov     err_, 0-0
    if_c        add     err_, offset_fwd_
    if_nc       add     err_, offset_rev_
                subr    err_, angle
                sar     err_, #24
                bitl    hall_, #3

                abs     x, err_                     ' fault?
                cmp     x, #125             wc
    if_nc       wrlong  #1, ptra[14]                ' report fault
    if_nc       dirl    drive_pins                  '  also on FAULT: float all control pins (make them inputs)
                sub     x, #256/6           wc      ' modulate duty
    if_nc       muls    x, duty_up_
    if_c        muls    x, duty_dn_
                sar     x, #8
                add     duty_, x
                fles    duty_, duty_max_            ' keep duty within limits
                fges    duty_, duty_min_

                getct   loop_dtcks_                 ' how long was this iteration? send to host
                sub     loop_dtcks_, drvrSrtTix

                setq    #14-1                       ' write drive[3]/sense[4]/hall/pos/duty/err/ticks[2]/state to hub
                wrlong  drive_u_, ptra

                jmp     #.loop                      ' main loop

    ' =========================================================================
    '  PRIVATE (Utiility) Subroutines
    ' -------------------------------------------------------------------------
.wait4adc       testp   adc_u_i             wc      ' wait for next ADC sample (6 samples = PWM frame)
    if_nc       jmp     #.wait4adc

    _ret_       akpin   adc_u_i

.initAngleFmHall
                ' init angle & prior from current motor position
                testp   hall_w              wc      ' read hall effect sensor
                rcl     hall_, #1
                testp   hall_v              wc
                rcl     hall_, #1
                testp   hall_u              wc
                rcl     hall_, #1
                and     hall_, #%111                ' assume forward
                alts    hall_, #hall_angles
                mov     angle, 0-0
                add     angle, offset_fwd_          ' adjust phase offset for hall sensor
    _ret_       mov     prior_angle, angle          ' show we are already here

    '
    ' =========================================================================

all_pins	long	15 << 6			            ' all-pins variable (addpins 15) needs OR of basepin
drive_pins	long	(7 << 6) + 8	            ' drive-pins variable (+8 addpins 7) needs ADD of basepin
pwmt        long    %000_000000_01_01000_0  ' PWM true
pwmn        long    %001_000000_01_01000_0  ' PWM not
fram        long    FRAME << 16 + 1         ' PWM frame setting
bias        long    FRAME / 2               ' PWM center-frame bias
third       long    1 FRAC 3                ' 120 degrees
numerator   long    3300 << 11              ' numerator for ADC calculations
stop_requst long    0                       ' 32-bits of zero
ramp_up_dly long    8                       ' cycles 8,7,6... -> 0 then back to 8, over and over

drvrLoopPnFld   long    TEST_PIN_DRIVER_LOOP addpins 0  ' convert to pinfield
drvrTmrPnFld    long    TEST_PIN_DRIVER_TMR addpins 0  ' convert to pinfield

adc_modes   long    p_adc_gio | p_adc       ' adc modes, by state
            long    p_adc_vio | p_adc
            long    p_adc_1x  | p_adc

deltas      byte    0, 0, 0, 0, 0, 0, 0, 0  ' Hall-effect-sensor position deltas from (old<<3 | new)
            byte    0, 0, 0,-1, 0, 1, 0, 0
            byte    0, 0, 0, 1, 0, 0,-1, 0
            byte    0, 1,-1, 0, 0, 0, 0, 0
            byte    0, 0, 0, 0, 0,-1, 1, 0
            byte    0,-1, 0, 0, 1, 0, 0, 0
            byte    0, 0, 1, 0,-1, 0, 0, 0
            byte    0, 0, 0, 0, 0, 0, 0, 0

hall_angles long    0           ' forward-direction table
            long    0 frac 6    '%001
            long    4 frac 6    '%010
            long    5 frac 6    '%011
            long    2 frac 6    '%100
            long    1 frac 6    '%101
            long    3 frac 6    '%110
            long    0
            long    0           ' reverse-direction table
            long    5 frac 6    '%001
            long    3 frac 6    '%010
            long    4 frac 6    '%011
            long    1 frac 6    '%100
            long    0 frac 6    '%101
            long    2 frac 6    '%110
            long    0


x           res     1           ' miscellaneous
y           res     1

drvrSrtTix  res 1
drvrEndTix  res 1
ctrlSrtTix  res 1
ctrlEndTix  res 1

' driver inputs
tgt_incr    res 1       ' current user requested target increment
prior_incr  res 1       ' prior user requested target increment
' control loop variables
drv_incr    res 1       ' current driver increment
angle       res 1       ' current driver angle
prior_angle res 1       ' prior driver angle
fwdrev      res 1       ' driver current direction used for indexing into hall angle table

' PIN names
adc_u_i     res 1       ' single-pin variables
adc_v_i     res 1
adc_w_i     res 1
adc_x_i     res 1
adc_i       res 1
hall_u      res 1
hall_v      res 1
hall_w      res 1
pwm_u_l     res 1
pwm_u_h     res 1
pwm_v_l     res 1
pwm_v_h     res 1
pwm_w_l     res 1
pwm_w_h     res 1
pwm_x_l     res 1
pwm_x_h     res 1

gio_levels  res 4               ' ADC variables
vio_levels  res 4
scl_levels  res 4

' ------------------------------
'  PRECISE FORMAT:
'   copied in-to driver each loop iteration
params_ptr_ res 1               ' params_ptr must be followed by the 12 parameters
offset_fwd_ res 1
offset_rev_ res 1
duty_min_   res 1
duty_max_   res 1
duty_up_    res 1
duty_dn_    res 1
dead_gap_   res 1               ' this was OFFSET but now passed into driver
pwm_limit_  res 1               ' this was PWMLIM but now passed into driver
cfg_ctcks_  res 1
stop_mode_  res 1
ramp_up_    res 1               ' angle increment: add this every 500 uSec to ramp up to speed
ramp_dn_    res 1               ' angle decrement: subtract this every 500 uSec to ramp down to 0

' ------------------------------
'  PRECISE FORMAT:
'   copied out-of driver each loop iteration
drive_u_    res 1               '   14 contiguous longs for return data structure
drive_v_    res 1
drive_w_    res 1
sense_u_    res 1
sense_v_    res 1
sense_w_    res 1
sense_i_    res 1
hall_       res 1
pos_        res 1
duty_       res 1
err_        res 1
loop_dtcks_ res 1
loop_ctcks_ res 1
drv_state_  res 1       ' enum: DCS_STOPPED, DCS_SPIN_UP, DCS_AT_SPEED, DCS_SPIN_DN, etc
' fault is here... (but external only)


CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
