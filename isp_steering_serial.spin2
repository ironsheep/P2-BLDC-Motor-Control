'' =================================================================================================
''
''   File....... isp_steering_serial.spin2
''   Purpose.... Top-level Object providing serial control over stearing of a twin-bldc-motor platform
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Apr 2022
''   Updated.... 29 Apr 2022
''
'' =================================================================================================

CON { timing }

  CLK_FREQ = 270_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock

CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

CON { application io pins }

  GW_RX2      = 57  { I }                                      ' programming / debug
  GW_TX2      = 56  { O }

  GW_BAUDRATE = 624_000   ' 624kb/s - allow P2 rx to keep up!

DAT { our hardware ID strings and 1-wire buffers, collection names }

p2HardwareID    byte    "P2 Edge - 2WheelBot",0

OBJ { our Motors }

    wheels      : "isp_steering_2wheel"                         ' our steering object
    IoT_GW      : "isp_rpi_iot_gw"                              ' serial I/O to/from host (RPi, Arduino, etc.)
    rxQue       : "isp_queue_serial"                            ' access to our received data


PUB main()
'' DEMO Driving a two wheeled platform

    debug("* serial I/F to dual motor platform")

    '' DEMO send status values to a web page and act on control values sent by the web page
    IoT_GW.startx(GW_RX2, GW_TX2, GW_BAUDRATE, IoT_GW.PU_15K)    ' tell singleton our pins and rate

    ' (one time) tell the RPi about how to identify this hardware
    IoT_GW.identify(@p2HardwareID)

    ' start our motor drivers (left and right)
    wheels.start(wheels.PINS_P0_P15, wheels.PINS_P16_P31, wheels.PWR_18p5V) ' wheels.PWR_12V) '

    ' override defaults, use 100 %
    wheels.setMaxSpeed(100)
    wheels.setMaxSpeedForDistance(100)
    ' just don't draw current at stop
    wheels.holdAtStop(false)




CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
